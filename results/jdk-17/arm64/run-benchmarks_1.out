
#############################################################################
#######       Welcome to JVM Performance Benchmarks Tests Suite       #######
#############################################################################

+========================+
| [1/5] OS Configuration |
+========================+

+--------------------------+
| OS environment variables |
+--------------------------+
Operating system: Mac OS X
Architecture: arm64
JSON processor: jq/jq-osx-amd64


+=========================+
| [2/5] JVM Configuration |
+=========================+
Select the JDK/JVM:
    1) - jdk-11 / OpenJDK HotSpot VM
    2) - jdk-11 / GraalVM CE
    3) - jdk-11 / GraalVM EE
    4) - jdk-17 / OpenJDK HotSpot VM
    5) - jdk-17 / GraalVM CE
    6) - jdk-17 / GraalVM EE


Java home: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home
JDK version: 17
JVM name: OpenJDK HotSpot VM
JVM benchmarks identifier: openjdk-hotspot-vm


+=========================+
| [3/5] JMH Configuration |
+=========================+
JMH jar: benchmarks/target/benchmarks.jar
JMH benchmarks suite configuration file: benchmarks-suite-jdk17.json
JMH output folder: results/jdk-17/arm64/openjdk-hotspot-vm


+===============================+
| [4/5] Compile benchmark suite |
+===============================+
./mvnw -P jdk17_profile clean spotless:apply package

[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Build Order:
[INFO]
[INFO] JVM Performance Benchmarks                                         [pom]
[INFO] JVM Performance Benchmarks Suite                                   [jar]
[INFO]
[INFO] -------< jvm.performance.benchmarks:jvm-performance-benchmarks >--------
[INFO] Building JVM Performance Benchmarks 1.0.0-SNAPSHOT                 [1/2]
[INFO] --------------------------------[ pom ]---------------------------------
[INFO]
[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ jvm-performance-benchmarks ---
[INFO] Deleting /Users/wzhioba/Data/Workspaces/jvm-performance-benchmarks/target
[INFO]
[INFO] --- spotless-maven-plugin:2.25.0:apply (default-cli) @ jvm-performance-benchmarks ---
[WARNING] null
[INFO]
[INFO] --- spotless-maven-plugin:2.25.0:apply (default) @ jvm-performance-benchmarks ---
[INFO]
[INFO] --- maven-shade-plugin:3.4.0:shade (default) @ jvm-performance-benchmarks ---
[INFO] Replacing /Users/wzhioba/Data/Workspaces/jvm-performance-benchmarks/target/benchmarks.pom with /Users/wzhioba/Data/Workspaces/jvm-performance-benchmarks/target/jvm-performance-benchmarks-1.0.0-SNAPSHOT-shaded.pom
[INFO]
[INFO] ----< jvm.performance.benchmarks:jvm-performance-benchmarks-suite >-----
[INFO] Building JVM Performance Benchmarks Suite 1.0.0-SNAPSHOT           [2/2]
[INFO] --------------------------------[ jar ]---------------------------------
[INFO]
[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ jvm-performance-benchmarks-suite ---
[INFO] Deleting /Users/wzhioba/Data/Workspaces/jvm-performance-benchmarks/benchmarks/target
[INFO]
[INFO] --- spotless-maven-plugin:2.25.0:apply (default-cli) @ jvm-performance-benchmarks-suite ---
[INFO]
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ jvm-performance-benchmarks-suite ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 3 resources
[INFO]
[INFO] --- maven-compiler-plugin:3.10.1:compile (default-compile) @ jvm-performance-benchmarks-suite ---
[INFO] Changes detected - recompiling the module!
[INFO] Compiling 77 source files to /Users/wzhioba/Data/Workspaces/jvm-performance-benchmarks/benchmarks/target/classes
[INFO]
[INFO] --- spotless-maven-plugin:2.25.0:apply (default) @ jvm-performance-benchmarks-suite ---
[INFO]
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ jvm-performance-benchmarks-suite ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /Users/wzhioba/Data/Workspaces/jvm-performance-benchmarks/benchmarks/src/test/resources
[INFO]
[INFO] --- maven-compiler-plugin:3.10.1:testCompile (default-testCompile) @ jvm-performance-benchmarks-suite ---
[INFO] No sources to compile
[INFO]
[INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ jvm-performance-benchmarks-suite ---
[INFO] No tests to run.
[INFO]
[INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ jvm-performance-benchmarks-suite ---
[INFO] Building jar: /Users/wzhioba/Data/Workspaces/jvm-performance-benchmarks/benchmarks/target/jvm-performance-benchmarks-suite-1.0.0-SNAPSHOT.jar
[INFO]
[INFO] --- maven-shade-plugin:3.4.0:shade (default) @ jvm-performance-benchmarks-suite ---
[INFO] Including org.openjdk.jmh:jmh-core:jar:1.36 in the shaded jar.
[INFO] Including net.sf.jopt-simple:jopt-simple:jar:5.0.4 in the shaded jar.
[INFO] Including org.apache.commons:commons-math3:jar:3.2 in the shaded jar.
[INFO] Including org.openjdk.jol:jol-core:jar:0.14 in the shaded jar.
[INFO] Dependency-reduced POM written at: /Users/wzhioba/Data/Workspaces/jvm-performance-benchmarks/benchmarks/dependency-reduced-pom.xml
[WARNING] jmh-core-1.36.jar, jol-core-0.14.jar define 2 overlapping resources:
[WARNING]   - LICENSE
[WARNING]   - THIRD-PARTY
[WARNING] commons-math3-3.2.jar, jmh-core-1.36.jar, jol-core-0.14.jar, jopt-simple-5.0.4.jar, jvm-performance-benchmarks-suite-1.0.0-SNAPSHOT.jar define 1 overlapping resource:
[WARNING]   - META-INF/MANIFEST.MF
[WARNING] maven-shade-plugin has detected that some class files are
[WARNING] present in two or more JARs. When this happens, only one
[WARNING] single version of the class is copied to the uber jar.
[WARNING] Usually this is not harmful and you can skip these warnings,
[WARNING] otherwise try to manually exclude artifacts based on
[WARNING] mvn dependency:tree -Ddetail=true and the above output.
[WARNING] See https://maven.apache.org/plugins/maven-shade-plugin/
[INFO] Replacing /Users/wzhioba/Data/Workspaces/jvm-performance-benchmarks/benchmarks/target/benchmarks.jar with /Users/wzhioba/Data/Workspaces/jvm-performance-benchmarks/benchmarks/target/jvm-performance-benchmarks-suite-1.0.0-SNAPSHOT-shaded.jar
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Summary for JVM Performance Benchmarks 1.0.0-SNAPSHOT:
[INFO]
[INFO] JVM Performance Benchmarks ......................... SUCCESS [  1.246 s]
[INFO] JVM Performance Benchmarks Suite ................... SUCCESS [ 11.949 s]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  13.317 s
[INFO] Finished at: 2023-01-20T14:04:17+01:00
[INFO] ------------------------------------------------------------------------

+===========================+
| [5/5] Run benchmark suite |
+===========================+
Running OpenJDK HotSpot VM tests suite ...

Creating results/jdk-17/arm64/openjdk-hotspot-vm folder ...

Running BranchlessBitwiseBenchmark benchmark ...
java  -jar benchmarks/target/benchmarks.jar .*BranchlessBitwiseBenchmark.* -foe true -wi 5 -w 10 -i 5 -r 10 -f 5 -rf csv -rff results/jdk-17/arm64/openjdk-hotspot-vm/BranchlessBitwiseBenchmark.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.BranchlessBitwiseBenchmark.a_less_than_zero_return_b_else_a

# Run progress: 0,00% complete, ETA 00:33:20
# Fork: 1 of 5
# Warmup Iteration   1: 1,440 ns/op
# Warmup Iteration   2: 2,020 ns/op
# Warmup Iteration   3: 2,020 ns/op
# Warmup Iteration   4: 2,019 ns/op
# Warmup Iteration   5: 2,033 ns/op
Iteration   1: 2,023 ns/op
Iteration   2: 2,017 ns/op
Iteration   3: 2,020 ns/op
Iteration   4: 2,020 ns/op
Iteration   5: 2,019 ns/op

# Run progress: 5,00% complete, ETA 00:32:24
# Fork: 2 of 5
# Warmup Iteration   1: 1,443 ns/op
# Warmup Iteration   2: 2,019 ns/op
# Warmup Iteration   3: 2,018 ns/op
# Warmup Iteration   4: 2,018 ns/op
# Warmup Iteration   5: 2,019 ns/op
Iteration   1: 2,018 ns/op
Iteration   2: 2,020 ns/op
Iteration   3: 2,018 ns/op
Iteration   4: 2,017 ns/op
Iteration   5: 2,018 ns/op

# Run progress: 10,00% complete, ETA 00:30:24
# Fork: 3 of 5
# Warmup Iteration   1: 1,440 ns/op
# Warmup Iteration   2: 2,018 ns/op
# Warmup Iteration   3: 2,019 ns/op
# Warmup Iteration   4: 2,018 ns/op
# Warmup Iteration   5: 2,019 ns/op
Iteration   1: 2,019 ns/op
Iteration   2: 2,018 ns/op
Iteration   3: 2,017 ns/op
Iteration   4: 2,043 ns/op
Iteration   5: 2,037 ns/op

# Run progress: 15,00% complete, ETA 00:28:47
# Fork: 4 of 5
# Warmup Iteration   1: 1,452 ns/op
# Warmup Iteration   2: 2,033 ns/op
# Warmup Iteration   3: 2,038 ns/op
# Warmup Iteration   4: 2,036 ns/op
# Warmup Iteration   5: 2,039 ns/op
Iteration   1: 2,039 ns/op
Iteration   2: 2,037 ns/op
Iteration   3: 2,037 ns/op
Iteration   4: 2,038 ns/op
Iteration   5: 2,038 ns/op

# Run progress: 20,00% complete, ETA 00:27:21
# Fork: 5 of 5
# Warmup Iteration   1: 1,452 ns/op
# Warmup Iteration   2: 2,033 ns/op
# Warmup Iteration   3: 2,033 ns/op
# Warmup Iteration   4: 2,052 ns/op
# Warmup Iteration   5: 2,034 ns/op
Iteration   1: 2,032 ns/op
Iteration   2: 2,032 ns/op
Iteration   3: 2,033 ns/op
Iteration   4: 2,030 ns/op
Iteration   5: 2,030 ns/op


Result "com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.BranchlessBitwiseBenchmark.a_less_than_zero_return_b_else_a":
  2,027 Â±(99.9%) 0,007 ns/op [Average]
  (min, avg, max) = (2,017, 2,027, 2,043), stdev = 0,009
  CI (99.9%): [2,020, 2,034] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.BranchlessBitwiseBenchmark.a_less_than_zero_return_b_else_a_baseline

# Run progress: 25,00% complete, ETA 00:25:37
# Fork: 1 of 5
# Warmup Iteration   1: 1,469 ns/op
# Warmup Iteration   2: 2,035 ns/op
# Warmup Iteration   3: 2,035 ns/op
# Warmup Iteration   4: 2,031 ns/op
# Warmup Iteration   5: 2,029 ns/op
Iteration   1: 2,034 ns/op
Iteration   2: 2,035 ns/op
Iteration   3: 2,034 ns/op
Iteration   4: 2,034 ns/op
Iteration   5: 2,034 ns/op

# Run progress: 30,00% complete, ETA 00:24:01
# Fork: 2 of 5
# Warmup Iteration   1: 1,464 ns/op
# Warmup Iteration   2: 2,030 ns/op
# Warmup Iteration   3: 2,031 ns/op
# Warmup Iteration   4: 2,035 ns/op
# Warmup Iteration   5: 2,030 ns/op
Iteration   1: 2,030 ns/op
Iteration   2: 2,031 ns/op
Iteration   3: 2,030 ns/op
Iteration   4: 2,031 ns/op
Iteration   5: 2,031 ns/op

# Run progress: 35,00% complete, ETA 00:22:23
# Fork: 3 of 5
# Warmup Iteration   1: 1,465 ns/op
# Warmup Iteration   2: 2,030 ns/op
# Warmup Iteration   3: 2,031 ns/op
# Warmup Iteration   4: 2,039 ns/op
# Warmup Iteration   5: 2,035 ns/op
Iteration   1: 2,035 ns/op
Iteration   2: 2,035 ns/op
Iteration   3: 2,034 ns/op
Iteration   4: 2,035 ns/op
Iteration   5: 2,034 ns/op

# Run progress: 40,00% complete, ETA 00:20:38
# Fork: 4 of 5
# Warmup Iteration   1: 1,468 ns/op
# Warmup Iteration   2: 2,032 ns/op
# Warmup Iteration   3: 2,030 ns/op
# Warmup Iteration   4: 2,030 ns/op
# Warmup Iteration   5: 2,030 ns/op
Iteration   1: 2,031 ns/op
Iteration   2: 2,030 ns/op
Iteration   3: 2,031 ns/op
Iteration   4: 2,030 ns/op
Iteration   5: 2,030 ns/op

# Run progress: 45,00% complete, ETA 00:18:53
# Fork: 5 of 5
# Warmup Iteration   1: 1,465 ns/op
# Warmup Iteration   2: 2,031 ns/op
# Warmup Iteration   3: 2,030 ns/op
# Warmup Iteration   4: 2,030 ns/op
# Warmup Iteration   5: 2,030 ns/op
Iteration   1: 2,030 ns/op
Iteration   2: 2,030 ns/op
Iteration   3: 2,031 ns/op
Iteration   4: 2,031 ns/op
Iteration   5: 2,030 ns/op


Result "com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.BranchlessBitwiseBenchmark.a_less_than_zero_return_b_else_a_baseline":
  2,032 Â±(99.9%) 0,002 ns/op [Average]
  (min, avg, max) = (2,030, 2,032, 2,035), stdev = 0,002
  CI (99.9%): [2,031, 2,034] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.BranchlessBitwiseBenchmark.x_equals_y_return_a_else_b

# Run progress: 50,00% complete, ETA 00:17:09
# Fork: 1 of 5
# Warmup Iteration   1: 1,510 ns/op
# Warmup Iteration   2: 2,174 ns/op
# Warmup Iteration   3: 2,174 ns/op
# Warmup Iteration   4: 2,174 ns/op
# Warmup Iteration   5: 2,174 ns/op
Iteration   1: 2,174 ns/op
Iteration   2: 2,174 ns/op
Iteration   3: 2,174 ns/op
Iteration   4: 2,174 ns/op
Iteration   5: 2,165 ns/op

# Run progress: 55,00% complete, ETA 00:15:26
# Fork: 2 of 5
# Warmup Iteration   1: 1,500 ns/op
# Warmup Iteration   2: 2,162 ns/op
# Warmup Iteration   3: 2,161 ns/op
# Warmup Iteration   4: 2,161 ns/op
# Warmup Iteration   5: 2,162 ns/op
Iteration   1: 2,161 ns/op
Iteration   2: 2,161 ns/op
Iteration   3: 2,167 ns/op
Iteration   4: 2,161 ns/op
Iteration   5: 2,161 ns/op

# Run progress: 60,00% complete, ETA 00:13:44
# Fork: 3 of 5
# Warmup Iteration   1: 1,501 ns/op
# Warmup Iteration   2: 2,161 ns/op
# Warmup Iteration   3: 2,161 ns/op
# Warmup Iteration   4: 2,161 ns/op
# Warmup Iteration   5: 2,161 ns/op
Iteration   1: 2,163 ns/op
Iteration   2: 2,162 ns/op
Iteration   3: 2,163 ns/op
Iteration   4: 2,161 ns/op
Iteration   5: 2,161 ns/op

# Run progress: 65,00% complete, ETA 00:12:03
# Fork: 4 of 5
# Warmup Iteration   1: 1,500 ns/op
# Warmup Iteration   2: 2,162 ns/op
# Warmup Iteration   3: 2,161 ns/op
# Warmup Iteration   4: 2,161 ns/op
# Warmup Iteration   5: 2,161 ns/op
Iteration   1: 2,161 ns/op
Iteration   2: 2,161 ns/op
Iteration   3: 2,164 ns/op
Iteration   4: 2,183 ns/op
Iteration   5: 2,178 ns/op

# Run progress: 70,00% complete, ETA 00:10:20
# Fork: 5 of 5
# Warmup Iteration   1: 1,511 ns/op
# Warmup Iteration   2: 2,177 ns/op
# Warmup Iteration   3: 2,178 ns/op
# Warmup Iteration   4: 2,178 ns/op
# Warmup Iteration   5: 2,178 ns/op
Iteration   1: 2,178 ns/op
Iteration   2: 2,178 ns/op
Iteration   3: 2,178 ns/op
Iteration   4: 2,178 ns/op
Iteration   5: 2,178 ns/op


Result "com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.BranchlessBitwiseBenchmark.x_equals_y_return_a_else_b":
  2,169 Â±(99.9%) 0,006 ns/op [Average]
  (min, avg, max) = (2,161, 2,169, 2,183), stdev = 0,008
  CI (99.9%): [2,163, 2,175] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.BranchlessBitwiseBenchmark.x_equals_y_return_a_else_b_baseline

# Run progress: 75,00% complete, ETA 00:08:36
# Fork: 1 of 5
# Warmup Iteration   1: 1,508 ns/op
# Warmup Iteration   2: 2,034 ns/op
# Warmup Iteration   3: 2,030 ns/op
# Warmup Iteration   4: 2,029 ns/op
# Warmup Iteration   5: 2,034 ns/op
Iteration   1: 2,035 ns/op
Iteration   2: 2,034 ns/op
Iteration   3: 2,031 ns/op
Iteration   4: 2,033 ns/op
Iteration   5: 2,034 ns/op

# Run progress: 80,00% complete, ETA 00:06:52
# Fork: 2 of 5
# Warmup Iteration   1: 1,508 ns/op
# Warmup Iteration   2: 2,035 ns/op
# Warmup Iteration   3: 2,035 ns/op
# Warmup Iteration   4: 2,034 ns/op
# Warmup Iteration   5: 2,034 ns/op
Iteration   1: 2,035 ns/op
Iteration   2: 2,034 ns/op
Iteration   3: 2,035 ns/op
Iteration   4: 2,035 ns/op
Iteration   5: 2,035 ns/op

# Run progress: 85,00% complete, ETA 00:05:09
# Fork: 3 of 5
# Warmup Iteration   1: 1,508 ns/op
# Warmup Iteration   2: 2,034 ns/op
# Warmup Iteration   3: 2,034 ns/op
# Warmup Iteration   4: 2,030 ns/op
# Warmup Iteration   5: 2,035 ns/op
Iteration   1: 2,034 ns/op
Iteration   2: 2,035 ns/op
Iteration   3: 2,035 ns/op
Iteration   4: 2,035 ns/op
Iteration   5: 2,034 ns/op

# Run progress: 90,00% complete, ETA 00:03:26
# Fork: 4 of 5
# Warmup Iteration   1: 1,508 ns/op
# Warmup Iteration   2: 2,030 ns/op
# Warmup Iteration   3: 2,030 ns/op
# Warmup Iteration   4: 2,030 ns/op
# Warmup Iteration   5: 2,035 ns/op
Iteration   1: 2,035 ns/op
Iteration   2: 2,035 ns/op
Iteration   3: 2,030 ns/op
Iteration   4: 2,034 ns/op
Iteration   5: 2,034 ns/op

# Run progress: 95,00% complete, ETA 00:01:43
# Fork: 5 of 5
# Warmup Iteration   1: 1,508 ns/op
# Warmup Iteration   2: 2,034 ns/op
# Warmup Iteration   3: 2,035 ns/op
# Warmup Iteration   4: 2,035 ns/op
# Warmup Iteration   5: 2,035 ns/op
Iteration   1: 2,034 ns/op
Iteration   2: 2,035 ns/op
Iteration   3: 2,035 ns/op
Iteration   4: 2,035 ns/op
Iteration   5: 2,034 ns/op


Result "com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.BranchlessBitwiseBenchmark.x_equals_y_return_a_else_b_baseline":
  2,034 Â±(99.9%) 0,001 ns/op [Average]
  (min, avg, max) = (2,030, 2,034, 2,035), stdev = 0,001
  CI (99.9%): [2,033, 2,035] (assumes normal distribution)


# Run complete. Total time: 00:34:22

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                             Mode  Cnt  Score   Error  Units
BranchlessBitwiseBenchmark.a_less_than_zero_return_b_else_a           avgt   25  2,027 Â± 0,007  ns/op
BranchlessBitwiseBenchmark.a_less_than_zero_return_b_else_a_baseline  avgt   25  2,032 Â± 0,002  ns/op
BranchlessBitwiseBenchmark.x_equals_y_return_a_else_b                 avgt   25  2,169 Â± 0,006  ns/op
BranchlessBitwiseBenchmark.x_equals_y_return_a_else_b_baseline        avgt   25  2,034 Â± 0,001  ns/op

Benchmark result is saved to results/jdk-17/arm64/openjdk-hotspot-vm/BranchlessBitwiseBenchmark.csv

Running BurstHeapMemoryAllocatorBenchmark benchmark ...
java  -jar benchmarks/target/benchmarks.jar .*BurstHeapMemoryAllocatorBenchmark.* -foe true -wi 5 -w 10 -i 5 -r 10 -f 5 -rf csv -rff results/jdk-17/arm64/openjdk-hotspot-vm/BurstHeapMemoryAllocatorBenchmark_serialGC_1thread.csv -t 1 -prof gc -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseSerialGC"

# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc
# Parameters: (percentageOfHeapToAllocate = P_25)

# Run progress: 0,00% complete, ETA 00:25:00
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,667 ops/s
# Warmup Iteration   2: 0,764 ops/s
# Warmup Iteration   3: 0,787 ops/s
# Warmup Iteration   4: 0,670 ops/s
# Warmup Iteration   5: 0,760 ops/s
Iteration   1: 0,787 ops/s
                 Â·gc.alloc.rate:      973,600 MB/sec
                 Â·gc.alloc.rate.norm: 1297449027,000 B/op
                 Â·gc.count:           13,000 counts
                 Â·gc.time:            9388,000 ms

Iteration   2: 0,670 ops/s
                 Â·gc.alloc.rate:      829,330 MB/sec
                 Â·gc.alloc.rate.norm: 1297449031,000 B/op
                 Â·gc.count:           14,000 counts
                 Â·gc.time:            11153,000 ms

Iteration   3: 0,759 ops/s
                 Â·gc.alloc.rate:      938,738 MB/sec
                 Â·gc.alloc.rate.norm: 1297449027,000 B/op
                 Â·gc.count:           13,000 counts
                 Â·gc.time:            9767,000 ms

Iteration   4: 0,790 ops/s
                 Â·gc.alloc.rate:      978,074 MB/sec
                 Â·gc.alloc.rate.norm: 1297449031,000 B/op
                 Â·gc.count:           13,000 counts
                 Â·gc.time:            9329,000 ms

Iteration   5: 0,671 ops/s
                 Â·gc.alloc.rate:      830,264 MB/sec
                 Â·gc.alloc.rate.norm: 1297449031,000 B/op
                 Â·gc.count:           14,000 counts
                 Â·gc.time:            11138,000 ms


# Run progress: 6,67% complete, ETA 00:26:05
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,668 ops/s
# Warmup Iteration   2: 0,766 ops/s
# Warmup Iteration   3: 0,790 ops/s
# Warmup Iteration   4: 0,673 ops/s
# Warmup Iteration   5: 0,766 ops/s
Iteration   1: 0,789 ops/s
                 Â·gc.alloc.rate:      975,707 MB/sec
                 Â·gc.alloc.rate.norm: 1297449027,000 B/op
                 Â·gc.count:           13,000 counts
                 Â·gc.time:            9366,000 ms

Iteration   2: 0,672 ops/s
                 Â·gc.alloc.rate:      831,224 MB/sec
                 Â·gc.alloc.rate.norm: 1297449027,000 B/op
                 Â·gc.count:           14,000 counts
                 Â·gc.time:            11129,000 ms

Iteration   3: 0,762 ops/s
                 Â·gc.alloc.rate:      942,512 MB/sec
                 Â·gc.alloc.rate.norm: 1297449027,000 B/op
                 Â·gc.count:           13,000 counts
                 Â·gc.time:            9727,000 ms

Iteration   4: 0,792 ops/s
                 Â·gc.alloc.rate:      980,329 MB/sec
                 Â·gc.alloc.rate.norm: 1297449027,000 B/op
                 Â·gc.count:           13,000 counts
                 Â·gc.time:            9306,000 ms

Iteration   5: 0,673 ops/s
                 Â·gc.alloc.rate:      832,467 MB/sec
                 Â·gc.alloc.rate.norm: 1297449031,000 B/op
                 Â·gc.count:           14,000 counts
                 Â·gc.time:            11111,000 ms


# Run progress: 13,33% complete, ETA 00:24:26
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,667 ops/s
# Warmup Iteration   2: 0,765 ops/s
# Warmup Iteration   3: 0,788 ops/s
# Warmup Iteration   4: 0,672 ops/s
# Warmup Iteration   5: 0,765 ops/s
Iteration   1: 0,788 ops/s
                 Â·gc.alloc.rate:      974,901 MB/sec
                 Â·gc.alloc.rate.norm: 1297449027,000 B/op
                 Â·gc.count:           13,000 counts
                 Â·gc.time:            9374,000 ms

Iteration   2: 0,670 ops/s
                 Â·gc.alloc.rate:      829,441 MB/sec
                 Â·gc.alloc.rate.norm: 1297449027,000 B/op
                 Â·gc.count:           14,000 counts
                 Â·gc.time:            11153,000 ms

Iteration   3: 0,761 ops/s
                 Â·gc.alloc.rate:      941,097 MB/sec
                 Â·gc.alloc.rate.norm: 1297449027,000 B/op
                 Â·gc.count:           13,000 counts
                 Â·gc.time:            9739,000 ms

Iteration   4: 0,791 ops/s
                 Â·gc.alloc.rate:      979,080 MB/sec
                 Â·gc.alloc.rate.norm: 1297449027,000 B/op
                 Â·gc.count:           13,000 counts
                 Â·gc.time:            9321,000 ms

Iteration   5: 0,672 ops/s
                 Â·gc.alloc.rate:      830,944 MB/sec
                 Â·gc.alloc.rate.norm: 1297449031,000 B/op
                 Â·gc.count:           14,000 counts
                 Â·gc.time:            11131,000 ms


# Run progress: 20,00% complete, ETA 00:22:37
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,668 ops/s
# Warmup Iteration   2: 0,767 ops/s
# Warmup Iteration   3: 0,790 ops/s
# Warmup Iteration   4: 0,674 ops/s
# Warmup Iteration   5: 0,766 ops/s
Iteration   1: 0,789 ops/s
                 Â·gc.alloc.rate:      976,598 MB/sec
                 Â·gc.alloc.rate.norm: 1297449027,000 B/op
                 Â·gc.count:           13,000 counts
                 Â·gc.time:            9356,000 ms

Iteration   2: 0,672 ops/s
                 Â·gc.alloc.rate:      831,386 MB/sec
                 Â·gc.alloc.rate.norm: 1297449027,000 B/op
                 Â·gc.count:           14,000 counts
                 Â·gc.time:            11125,000 ms

Iteration   3: 0,763 ops/s
                 Â·gc.alloc.rate:      943,539 MB/sec
                 Â·gc.alloc.rate.norm: 1297449027,000 B/op
                 Â·gc.count:           13,000 counts
                 Â·gc.time:            9713,000 ms

Iteration   4: 0,793 ops/s
                 Â·gc.alloc.rate:      980,649 MB/sec
                 Â·gc.alloc.rate.norm: 1297449031,000 B/op
                 Â·gc.count:           13,000 counts
                 Â·gc.time:            9306,000 ms

Iteration   5: 0,673 ops/s
                 Â·gc.alloc.rate:      832,746 MB/sec
                 Â·gc.alloc.rate.norm: 1297449031,000 B/op
                 Â·gc.count:           14,000 counts
                 Â·gc.time:            11105,000 ms


# Run progress: 26,67% complete, ETA 00:20:46
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,675 ops/s
# Warmup Iteration   2: 0,762 ops/s
# Warmup Iteration   3: 0,794 ops/s
# Warmup Iteration   4: 0,673 ops/s
# Warmup Iteration   5: 0,763 ops/s
Iteration   1: 0,793 ops/s
                 Â·gc.alloc.rate:      981,412 MB/sec
                 Â·gc.alloc.rate.norm: 1297449027,000 B/op
                 Â·gc.count:           13,000 counts
                 Â·gc.time:            9300,000 ms

Iteration   2: 0,676 ops/s
                 Â·gc.alloc.rate:      835,873 MB/sec
                 Â·gc.alloc.rate.norm: 1297449027,000 B/op
                 Â·gc.count:           14,000 counts
                 Â·gc.time:            11054,000 ms

Iteration   3: 0,765 ops/s
                 Â·gc.alloc.rate:      946,902 MB/sec
                 Â·gc.alloc.rate.norm: 1297449027,000 B/op
                 Â·gc.count:           13,000 counts
                 Â·gc.time:            9664,000 ms

Iteration   4: 0,790 ops/s
                 Â·gc.alloc.rate:      977,948 MB/sec
                 Â·gc.alloc.rate.norm: 1297449027,000 B/op
                 Â·gc.count:           13,000 counts
                 Â·gc.time:            9344,000 ms

Iteration   5: 0,674 ops/s
                 Â·gc.alloc.rate:      834,316 MB/sec
                 Â·gc.alloc.rate.norm: 1297449031,000 B/op
                 Â·gc.count:           14,000 counts
                 Â·gc.time:            11075,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc":
  0,737 Â±(99.9%) 0,041 ops/s [Average]
  (min, avg, max) = (0,670, 0,737, 0,793), stdev = 0,055
  CI (99.9%): [0,696, 0,779] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate":
  912,363 Â±(99.9%) 51,277 MB/sec [Average]
  (min, avg, max) = (829,330, 912,363, 981,412), stdev = 68,453
  CI (99.9%): [861,086, 963,640] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate.norm":
  1297449028,280 Â±(99.9%) 1,427 B/op [Average]
  (min, avg, max) = (1297449027,000, 1297449028,280, 1297449031,000), stdev = 1,904
  CI (99.9%): [1297449026,853, 1297449029,707] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.count":
  335,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (13,000, 13,400, 14,000), stdev = 0,500
  CI (99.9%): [335,000, 335,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.time":
  253174,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (9300,000, 10126,960, 11153,000), stdev = 838,213
  CI (99.9%): [253174,000, 253174,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc
# Parameters: (percentageOfHeapToAllocate = P_50)

# Run progress: 33,33% complete, ETA 00:18:53
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,397 ops/s
# Warmup Iteration   2: 0,342 ops/s
# Warmup Iteration   3: 0,378 ops/s
# Warmup Iteration   4: 0,388 ops/s
# Warmup Iteration   5: 0,333 ops/s
Iteration   1: 0,378 ops/s
                 Â·gc.alloc.rate:      936,459 MB/sec
                 Â·gc.alloc.rate.norm: 2594898054,000 B/op
                 Â·gc.count:           13,000 counts
                 Â·gc.time:            9783,000 ms

Iteration   2: 0,393 ops/s
                 Â·gc.alloc.rate:      972,632 MB/sec
                 Â·gc.alloc.rate.norm: 2594898046,000 B/op
                 Â·gc.count:           13,000 counts
                 Â·gc.time:            9388,000 ms

Iteration   3: 0,336 ops/s
                 Â·gc.alloc.rate:      832,696 MB/sec
                 Â·gc.alloc.rate.norm: 2594898038,000 B/op
                 Â·gc.count:           14,000 counts
                 Â·gc.time:            11095,000 ms

Iteration   4: 0,377 ops/s
                 Â·gc.alloc.rate:      933,287 MB/sec
                 Â·gc.alloc.rate.norm: 2594898046,000 B/op
                 Â·gc.count:           13,000 counts
                 Â·gc.time:            9834,000 ms

Iteration   5: 0,395 ops/s
                 Â·gc.alloc.rate:      977,818 MB/sec
                 Â·gc.alloc.rate.norm: 2594898046,000 B/op
                 Â·gc.count:           13,000 counts
                 Â·gc.time:            9331,000 ms


# Run progress: 40,00% complete, ETA 00:16:56
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,398 ops/s
# Warmup Iteration   2: 0,344 ops/s
# Warmup Iteration   3: 0,391 ops/s
# Warmup Iteration   4: 0,336 ops/s
# Warmup Iteration   5: 0,372 ops/s
Iteration   1: 0,391 ops/s
                 Â·gc.alloc.rate:      968,456 MB/sec
                 Â·gc.alloc.rate.norm: 2594898038,000 B/op
                 Â·gc.count:           13,000 counts
                 Â·gc.time:            9442,000 ms

Iteration   2: 0,333 ops/s
                 Â·gc.alloc.rate:      825,051 MB/sec
                 Â·gc.alloc.rate.norm: 2594898038,000 B/op
                 Â·gc.count:           14,000 counts
                 Â·gc.time:            11193,000 ms

Iteration   3: 0,379 ops/s
                 Â·gc.alloc.rate:      937,983 MB/sec
                 Â·gc.alloc.rate.norm: 2594898038,000 B/op
                 Â·gc.count:           13,000 counts
                 Â·gc.time:            9757,000 ms

Iteration   4: 0,391 ops/s
                 Â·gc.alloc.rate:      967,441 MB/sec
                 Â·gc.alloc.rate.norm: 2594898054,000 B/op
                 Â·gc.count:           13,000 counts
                 Â·gc.time:            9456,000 ms

Iteration   5: 0,337 ops/s
                 Â·gc.alloc.rate:      833,376 MB/sec
                 Â·gc.alloc.rate.norm: 2594898046,000 B/op
                 Â·gc.count:           14,000 counts
                 Â·gc.time:            11084,000 ms


# Run progress: 46,67% complete, ETA 00:15:05
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,396 ops/s
# Warmup Iteration   2: 0,345 ops/s
# Warmup Iteration   3: 0,384 ops/s
# Warmup Iteration   4: 0,330 ops/s
# Warmup Iteration   5: 0,380 ops/s
Iteration   1: 0,391 ops/s
                 Â·gc.alloc.rate:      968,534 MB/sec
                 Â·gc.alloc.rate.norm: 2594898038,000 B/op
                 Â·gc.count:           13,000 counts
                 Â·gc.time:            9447,000 ms

Iteration   2: 0,335 ops/s
                 Â·gc.alloc.rate:      828,965 MB/sec
                 Â·gc.alloc.rate.norm: 2594898038,000 B/op
                 Â·gc.count:           14,000 counts
                 Â·gc.time:            11168,000 ms

Iteration   3: 0,377 ops/s
                 Â·gc.alloc.rate:      933,624 MB/sec
                 Â·gc.alloc.rate.norm: 2594898038,000 B/op
                 Â·gc.count:           13,000 counts
                 Â·gc.time:            9829,000 ms

Iteration   4: 0,391 ops/s
                 Â·gc.alloc.rate:      967,688 MB/sec
                 Â·gc.alloc.rate.norm: 2594898038,000 B/op
                 Â·gc.count:           13,000 counts
                 Â·gc.time:            9444,000 ms

Iteration   5: 0,332 ops/s
                 Â·gc.alloc.rate:      821,272 MB/sec
                 Â·gc.alloc.rate.norm: 2594898046,000 B/op
                 Â·gc.count:           14,000 counts
                 Â·gc.time:            11277,000 ms


# Run progress: 53,33% complete, ETA 00:13:14
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,395 ops/s
# Warmup Iteration   2: 0,344 ops/s
# Warmup Iteration   3: 0,378 ops/s
# Warmup Iteration   4: 0,395 ops/s
# Warmup Iteration   5: 0,338 ops/s
Iteration   1: 0,377 ops/s
                 Â·gc.alloc.rate:      933,918 MB/sec
                 Â·gc.alloc.rate.norm: 2594898038,000 B/op
                 Â·gc.count:           13,000 counts
                 Â·gc.time:            9826,000 ms

Iteration   2: 0,392 ops/s
                 Â·gc.alloc.rate:      970,403 MB/sec
                 Â·gc.alloc.rate.norm: 2594898038,000 B/op
                 Â·gc.count:           13,000 counts
                 Â·gc.time:            9427,000 ms

Iteration   3: 0,335 ops/s
                 Â·gc.alloc.rate:      829,124 MB/sec
                 Â·gc.alloc.rate.norm: 2594898038,000 B/op
                 Â·gc.count:           14,000 counts
                 Â·gc.time:            11164,000 ms

Iteration   4: 0,380 ops/s
                 Â·gc.alloc.rate:      940,795 MB/sec
                 Â·gc.alloc.rate.norm: 2594898038,000 B/op
                 Â·gc.count:           13,000 counts
                 Â·gc.time:            9726,000 ms

Iteration   5: 0,392 ops/s
                 Â·gc.alloc.rate:      971,218 MB/sec
                 Â·gc.alloc.rate.norm: 2594898046,000 B/op
                 Â·gc.count:           13,000 counts
                 Â·gc.time:            9421,000 ms


# Run progress: 60,00% complete, ETA 00:11:21
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,394 ops/s
# Warmup Iteration   2: 0,346 ops/s
# Warmup Iteration   3: 0,388 ops/s
# Warmup Iteration   4: 0,338 ops/s
# Warmup Iteration   5: 0,381 ops/s
Iteration   1: 0,393 ops/s
                 Â·gc.alloc.rate:      971,703 MB/sec
                 Â·gc.alloc.rate.norm: 2594898038,000 B/op
                 Â·gc.count:           13,000 counts
                 Â·gc.time:            9414,000 ms

Iteration   2: 0,336 ops/s
                 Â·gc.alloc.rate:      830,335 MB/sec
                 Â·gc.alloc.rate.norm: 2594898038,000 B/op
                 Â·gc.count:           14,000 counts
                 Â·gc.time:            11139,000 ms

Iteration   3: 0,377 ops/s
                 Â·gc.alloc.rate:      932,521 MB/sec
                 Â·gc.alloc.rate.norm: 2594898038,000 B/op
                 Â·gc.count:           13,000 counts
                 Â·gc.time:            9842,000 ms

Iteration   4: 0,395 ops/s
                 Â·gc.alloc.rate:      978,249 MB/sec
                 Â·gc.alloc.rate.norm: 2594898038,000 B/op
                 Â·gc.count:           13,000 counts
                 Â·gc.time:            9327,000 ms

Iteration   5: 0,336 ops/s
                 Â·gc.alloc.rate:      831,546 MB/sec
                 Â·gc.alloc.rate.norm: 2594898046,000 B/op
                 Â·gc.count:           14,000 counts
                 Â·gc.time:            11128,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc":
  0,370 Â±(99.9%) 0,019 ops/s [Average]
  (min, avg, max) = (0,332, 0,370, 0,395), stdev = 0,025
  CI (99.9%): [0,351, 0,389] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate":
  915,804 Â±(99.9%) 46,922 MB/sec [Average]
  (min, avg, max) = (821,272, 915,804, 978,249), stdev = 62,639
  CI (99.9%): [868,882, 962,725] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate.norm":
  2594898041,520 Â±(99.9%) 3,899 B/op [Average]
  (min, avg, max) = (2594898038,000, 2594898041,520, 2594898054,000), stdev = 5,205
  CI (99.9%): [2594898037,621, 2594898045,419] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.count":
  333,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (13,000, 13,320, 14,000), stdev = 0,476
  CI (99.9%): [333,000, 333,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.time":
  251942,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (9327,000, 10077,680, 11277,000), stdev = 773,615
  CI (99.9%): [251942,000, 251942,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc
# Parameters: (percentageOfHeapToAllocate = P_75)

# Run progress: 66,67% complete, ETA 00:09:26
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,185 ops/s
# Warmup Iteration   2: 0,170 ops/s
# Warmup Iteration   3: 0,169 ops/s
# Warmup Iteration   4: 0,170 ops/s
# Warmup Iteration   5: 0,169 ops/s
Iteration   1: 0,168 ops/s
                 Â·gc.alloc.rate:      623,720 MB/sec
                 Â·gc.alloc.rate.norm: 3892347100,000 B/op
                 Â·gc.count:           10,000 counts
                 Â·gc.time:            11318,000 ms

Iteration   2: 0,168 ops/s
                 Â·gc.alloc.rate:      623,210 MB/sec
                 Â·gc.alloc.rate.norm: 3892347100,000 B/op
                 Â·gc.count:           10,000 counts
                 Â·gc.time:            11331,000 ms

Iteration   3: 0,168 ops/s
                 Â·gc.alloc.rate:      623,020 MB/sec
                 Â·gc.alloc.rate.norm: 3892347100,000 B/op
                 Â·gc.count:           10,000 counts
                 Â·gc.time:            11333,000 ms

Iteration   4: 0,169 ops/s
                 Â·gc.alloc.rate:      627,667 MB/sec
                 Â·gc.alloc.rate.norm: 3892347100,000 B/op
                 Â·gc.count:           10,000 counts
                 Â·gc.time:            11235,000 ms

Iteration   5: 0,168 ops/s
                 Â·gc.alloc.rate:      623,190 MB/sec
                 Â·gc.alloc.rate.norm: 3892347116,000 B/op
                 Â·gc.count:           10,000 counts
                 Â·gc.time:            11328,000 ms


# Run progress: 73,33% complete, ETA 00:07:35
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,183 ops/s
# Warmup Iteration   2: 0,168 ops/s
# Warmup Iteration   3: 0,169 ops/s
# Warmup Iteration   4: 0,168 ops/s
# Warmup Iteration   5: 0,167 ops/s
Iteration   1: 0,168 ops/s
                 Â·gc.alloc.rate:      625,430 MB/sec
                 Â·gc.alloc.rate.norm: 3892347100,000 B/op
                 Â·gc.count:           10,000 counts
                 Â·gc.time:            11282,000 ms

Iteration   2: 0,168 ops/s
                 Â·gc.alloc.rate:      624,984 MB/sec
                 Â·gc.alloc.rate.norm: 3892347100,000 B/op
                 Â·gc.count:           10,000 counts
                 Â·gc.time:            11284,000 ms

Iteration   3: 0,169 ops/s
                 Â·gc.alloc.rate:      626,790 MB/sec
                 Â·gc.alloc.rate.norm: 3892347100,000 B/op
                 Â·gc.count:           10,000 counts
                 Â·gc.time:            11253,000 ms

Iteration   4: 0,168 ops/s
                 Â·gc.alloc.rate:      622,167 MB/sec
                 Â·gc.alloc.rate.norm: 3892347100,000 B/op
                 Â·gc.count:           10,000 counts
                 Â·gc.time:            11349,000 ms

Iteration   5: 0,168 ops/s
                 Â·gc.alloc.rate:      625,035 MB/sec
                 Â·gc.alloc.rate.norm: 3892347116,000 B/op
                 Â·gc.count:           10,000 counts
                 Â·gc.time:            11284,000 ms


# Run progress: 80,00% complete, ETA 00:05:43
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,182 ops/s
# Warmup Iteration   2: 0,168 ops/s
# Warmup Iteration   3: 0,167 ops/s
# Warmup Iteration   4: 0,168 ops/s
# Warmup Iteration   5: 0,168 ops/s
Iteration   1: 0,167 ops/s
                 Â·gc.alloc.rate:      619,602 MB/sec
                 Â·gc.alloc.rate.norm: 3892347100,000 B/op
                 Â·gc.count:           10,000 counts
                 Â·gc.time:            11399,000 ms

Iteration   2: 0,167 ops/s
                 Â·gc.alloc.rate:      618,900 MB/sec
                 Â·gc.alloc.rate.norm: 3892347100,000 B/op
                 Â·gc.count:           10,000 counts
                 Â·gc.time:            11411,000 ms

Iteration   3: 0,167 ops/s
                 Â·gc.alloc.rate:      619,892 MB/sec
                 Â·gc.alloc.rate.norm: 3892347100,000 B/op
                 Â·gc.count:           10,000 counts
                 Â·gc.time:            11393,000 ms

Iteration   4: 0,169 ops/s
                 Â·gc.alloc.rate:      625,986 MB/sec
                 Â·gc.alloc.rate.norm: 3892347116,000 B/op
                 Â·gc.count:           10,000 counts
                 Â·gc.time:            11269,000 ms

Iteration   5: 0,168 ops/s
                 Â·gc.alloc.rate:      623,266 MB/sec
                 Â·gc.alloc.rate.norm: 3892347116,000 B/op
                 Â·gc.count:           10,000 counts
                 Â·gc.time:            11328,000 ms


# Run progress: 86,67% complete, ETA 00:03:50
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,184 ops/s
# Warmup Iteration   2: 0,168 ops/s
# Warmup Iteration   3: 0,169 ops/s
# Warmup Iteration   4: 0,168 ops/s
# Warmup Iteration   5: 0,168 ops/s
Iteration   1: 0,169 ops/s
                 Â·gc.alloc.rate:      628,073 MB/sec
                 Â·gc.alloc.rate.norm: 3892347100,000 B/op
                 Â·gc.count:           10,000 counts
                 Â·gc.time:            11233,000 ms

Iteration   2: 0,169 ops/s
                 Â·gc.alloc.rate:      628,402 MB/sec
                 Â·gc.alloc.rate.norm: 3892347100,000 B/op
                 Â·gc.count:           10,000 counts
                 Â·gc.time:            11222,000 ms

Iteration   3: 0,169 ops/s
                 Â·gc.alloc.rate:      626,975 MB/sec
                 Â·gc.alloc.rate.norm: 3892347100,000 B/op
                 Â·gc.count:           10,000 counts
                 Â·gc.time:            11250,000 ms

Iteration   4: 0,168 ops/s
                 Â·gc.alloc.rate:      624,206 MB/sec
                 Â·gc.alloc.rate.norm: 3892347116,000 B/op
                 Â·gc.count:           10,000 counts
                 Â·gc.time:            11311,000 ms

Iteration   5: 0,169 ops/s
                 Â·gc.alloc.rate:      628,281 MB/sec
                 Â·gc.alloc.rate.norm: 3892347116,000 B/op
                 Â·gc.count:           10,000 counts
                 Â·gc.time:            11224,000 ms


# Run progress: 93,33% complete, ETA 00:01:55
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,184 ops/s
# Warmup Iteration   2: 0,169 ops/s
# Warmup Iteration   3: 0,168 ops/s
# Warmup Iteration   4: 0,169 ops/s
# Warmup Iteration   5: 0,169 ops/s
Iteration   1: 0,168 ops/s
                 Â·gc.alloc.rate:      623,962 MB/sec
                 Â·gc.alloc.rate.norm: 3892347116,000 B/op
                 Â·gc.count:           10,000 counts
                 Â·gc.time:            11316,000 ms

Iteration   2: 0,168 ops/s
                 Â·gc.alloc.rate:      623,514 MB/sec
                 Â·gc.alloc.rate.norm: 3892347100,000 B/op
                 Â·gc.count:           10,000 counts
                 Â·gc.time:            11324,000 ms

Iteration   3: 0,168 ops/s
                 Â·gc.alloc.rate:      623,502 MB/sec
                 Â·gc.alloc.rate.norm: 3892347100,000 B/op
                 Â·gc.count:           10,000 counts
                 Â·gc.time:            11325,000 ms

Iteration   4: 0,169 ops/s
                 Â·gc.alloc.rate:      627,268 MB/sec
                 Â·gc.alloc.rate.norm: 3892347132,000 B/op
                 Â·gc.count:           10,000 counts
                 Â·gc.time:            11244,000 ms

Iteration   5: 0,168 ops/s
                 Â·gc.alloc.rate:      623,648 MB/sec
                 Â·gc.alloc.rate.norm: 3892347116,000 B/op
                 Â·gc.count:           10,000 counts
                 Â·gc.time:            11322,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc":
  0,168 Â±(99.9%) 0,001 ops/s [Average]
  (min, avg, max) = (0,167, 0,168, 0,169), stdev = 0,001
  CI (99.9%): [0,168, 0,169] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate":
  624,428 Â±(99.9%) 1,980 MB/sec [Average]
  (min, avg, max) = (618,900, 624,428, 628,402), stdev = 2,643
  CI (99.9%): [622,448, 626,407] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate.norm":
  3892347106,400 Â±(99.9%) 6,920 B/op [Average]
  (min, avg, max) = (3892347100,000, 3892347106,400, 3892347132,000), stdev = 9,238
  CI (99.9%): [3892347099,480, 3892347113,320] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.count":
  250,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (10,000, 10,000, 10,000), stdev = 0,001
  CI (99.9%): [250,000, 250,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.time":
  282568,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (11222,000, 11302,720, 11411,000), stdev = 53,699
  CI (99.9%): [282568,000, 282568,000] (assumes normal distribution)


# Run complete. Total time: 00:28:57

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                 (percentageOfHeapToAllocate)   Mode  Cnt           Score    Error   Units
BurstHeapMemoryAllocatorBenchmark.gc                                              P_25  thrpt   25           0,737 Â±  0,041   ops/s
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate                               P_25  thrpt   25         912,363 Â± 51,277  MB/sec
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate.norm                          P_25  thrpt   25  1297449028,280 Â±  1,427    B/op
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.count                                    P_25  thrpt   25         335,000           counts
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.time                                     P_25  thrpt   25      253174,000               ms
BurstHeapMemoryAllocatorBenchmark.gc                                              P_50  thrpt   25           0,370 Â±  0,019   ops/s
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate                               P_50  thrpt   25         915,804 Â± 46,922  MB/sec
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate.norm                          P_50  thrpt   25  2594898041,520 Â±  3,899    B/op
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.count                                    P_50  thrpt   25         333,000           counts
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.time                                     P_50  thrpt   25      251942,000               ms
BurstHeapMemoryAllocatorBenchmark.gc                                              P_75  thrpt   25           0,168 Â±  0,001   ops/s
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate                               P_75  thrpt   25         624,428 Â±  1,980  MB/sec
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate.norm                          P_75  thrpt   25  3892347106,400 Â±  6,920    B/op
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.count                                    P_75  thrpt   25         250,000           counts
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.time                                     P_75  thrpt   25      282568,000               ms

Benchmark result is saved to results/jdk-17/arm64/openjdk-hotspot-vm/BurstHeapMemoryAllocatorBenchmark_serialGC_1thread.csv

Running BurstHeapMemoryAllocatorBenchmark benchmark ...
java  -jar benchmarks/target/benchmarks.jar .*BurstHeapMemoryAllocatorBenchmark.* -foe true -wi 5 -w 10 -i 5 -r 10 -f 5 -rf csv -rff results/jdk-17/arm64/openjdk-hotspot-vm/BurstHeapMemoryAllocatorBenchmark_serialGC_2threads.csv -t 2 -prof gc -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseSerialGC"

# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc
# Parameters: (percentageOfHeapToAllocate = P_25)

# Run progress: 0,00% complete, ETA 00:25:00
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
1,956 ops/s
# Warmup Iteration   2: 1,846 ops/s
# Warmup Iteration   3: 1,849 ops/s
# Warmup Iteration   4: 1,687 ops/s
# Warmup Iteration   5: 1,695 ops/s
Iteration   1: 1,597 ops/s
                 Â·gc.alloc.rate:      1018,555 MB/sec
                 Â·gc.alloc.rate.norm: 648724549,053 B/op
                 Â·gc.count:           16,000 counts
                 Â·gc.time:            11049,000 ms

Iteration   2: 1,627 ops/s
                 Â·gc.alloc.rate:      1105,694 MB/sec
                 Â·gc.alloc.rate.norm: 648724547,368 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            10139,000 ms

Iteration   3: 1,690 ops/s
                 Â·gc.alloc.rate:      1012,541 MB/sec
                 Â·gc.alloc.rate.norm: 648725116,211 B/op
                 Â·gc.count:           16,000 counts
                 Â·gc.time:            11122,000 ms

Iteration   4: 1,715 ops/s
                 Â·gc.alloc.rate:      1061,330 MB/sec
                 Â·gc.alloc.rate.norm: 648724547,368 B/op
                 Â·gc.count:           16,000 counts
                 Â·gc.time:            10585,000 ms

Iteration   5: 1,712 ops/s
                 Â·gc.alloc.rate:      1042,929 MB/sec
                 Â·gc.alloc.rate.norm: 648724547,368 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            10780,000 ms


# Run progress: 6,67% complete, ETA 00:27:33
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
1,985 ops/s
# Warmup Iteration   2: 1,687 ops/s
# Warmup Iteration   3: 1,836 ops/s
# Warmup Iteration   4: 1,692 ops/s
# Warmup Iteration   5: 1,736 ops/s
Iteration   1: 1,601 ops/s
                 Â·gc.alloc.rate:      1020,397 MB/sec
                 Â·gc.alloc.rate.norm: 648724547,368 B/op
                 Â·gc.count:           16,000 counts
                 Â·gc.time:            11019,000 ms

Iteration   2: 1,607 ops/s
                 Â·gc.alloc.rate:      1092,540 MB/sec
                 Â·gc.alloc.rate.norm: 648724547,368 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            10270,000 ms

Iteration   3: 1,692 ops/s
                 Â·gc.alloc.rate:      1015,108 MB/sec
                 Â·gc.alloc.rate.norm: 648724547,368 B/op
                 Â·gc.count:           16,000 counts
                 Â·gc.time:            11084,000 ms

Iteration   4: 1,700 ops/s
                 Â·gc.alloc.rate:      1051,804 MB/sec
                 Â·gc.alloc.rate.norm: 648725116,211 B/op
                 Â·gc.count:           16,000 counts
                 Â·gc.time:            10686,000 ms

Iteration   5: 1,697 ops/s
                 Â·gc.alloc.rate:      1036,442 MB/sec
                 Â·gc.alloc.rate.norm: 648724547,368 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            10850,000 ms


# Run progress: 13,33% complete, ETA 00:25:39
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
1,760 ops/s
# Warmup Iteration   2: 1,656 ops/s
# Warmup Iteration   3: 1,673 ops/s
# Warmup Iteration   4: 1,527 ops/s
# Warmup Iteration   5: 1,582 ops/s
Iteration   1: 1,763 ops/s
                 Â·gc.alloc.rate:      1119,017 MB/sec
                 Â·gc.alloc.rate.norm: 648724542,476 B/op
                 Â·gc.count:           17,000 counts
                 Â·gc.time:            11074,000 ms

Iteration   2: 1,734 ops/s
                 Â·gc.alloc.rate:      1167,118 MB/sec
                 Â·gc.alloc.rate.norm: 648724542,476 B/op
                 Â·gc.count:           16,000 counts
                 Â·gc.time:            10587,000 ms

Iteration   3: 1,686 ops/s
                 Â·gc.alloc.rate:      1010,669 MB/sec
                 Â·gc.alloc.rate.norm: 648724547,368 B/op
                 Â·gc.count:           16,000 counts
                 Â·gc.time:            11143,000 ms

Iteration   4: 1,719 ops/s
                 Â·gc.alloc.rate:      1062,631 MB/sec
                 Â·gc.alloc.rate.norm: 648725116,211 B/op
                 Â·gc.count:           16,000 counts
                 Â·gc.time:            10569,000 ms

Iteration   5: 1,708 ops/s
                 Â·gc.alloc.rate:      1040,512 MB/sec
                 Â·gc.alloc.rate.norm: 648724547,368 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            10806,000 ms


# Run progress: 20,00% complete, ETA 00:23:43
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
1,974 ops/s
# Warmup Iteration   2: 1,702 ops/s
# Warmup Iteration   3: 1,688 ops/s
# Warmup Iteration   4: 1,727 ops/s
# Warmup Iteration   5: 1,592 ops/s
Iteration   1: 1,613 ops/s
                 Â·gc.alloc.rate:      1096,301 MB/sec
                 Â·gc.alloc.rate.norm: 648724547,368 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            10231,000 ms

Iteration   2: 1,697 ops/s
                 Â·gc.alloc.rate:      1018,210 MB/sec
                 Â·gc.alloc.rate.norm: 648724550,737 B/op
                 Â·gc.count:           16,000 counts
                 Â·gc.time:            11049,000 ms

Iteration   3: 1,706 ops/s
                 Â·gc.alloc.rate:      1056,088 MB/sec
                 Â·gc.alloc.rate.norm: 648724547,368 B/op
                 Â·gc.count:           16,000 counts
                 Â·gc.time:            10642,000 ms

Iteration   4: 1,896 ops/s
                 Â·gc.alloc.rate:      1143,539 MB/sec
                 Â·gc.alloc.rate.norm: 648725057,143 B/op
                 Â·gc.count:           17,000 counts
                 Â·gc.time:            10822,000 ms

Iteration   5: 1,702 ops/s
                 Â·gc.alloc.rate:      1037,691 MB/sec
                 Â·gc.alloc.rate.norm: 648724544,000 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            10840,000 ms


# Run progress: 26,67% complete, ETA 00:21:43
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
1,978 ops/s
# Warmup Iteration   2: 1,701 ops/s
# Warmup Iteration   3: 1,686 ops/s
# Warmup Iteration   4: 1,725 ops/s
# Warmup Iteration   5: 1,591 ops/s
Iteration   1: 1,645 ops/s
                 Â·gc.alloc.rate:      1032,207 MB/sec
                 Â·gc.alloc.rate.norm: 648724544,800 B/op
                 Â·gc.count:           17,000 counts
                 Â·gc.time:            11497,000 ms

Iteration   2: 1,764 ops/s
                 Â·gc.alloc.rate:      1075,316 MB/sec
                 Â·gc.alloc.rate.norm: 648724542,476 B/op
                 Â·gc.count:           17,000 counts
                 Â·gc.time:            11537,000 ms

Iteration   3: 1,709 ops/s
                 Â·gc.alloc.rate:      1089,259 MB/sec
                 Â·gc.alloc.rate.norm: 648724547,368 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            10305,000 ms

Iteration   4: 1,723 ops/s
                 Â·gc.alloc.rate:      1089,898 MB/sec
                 Â·gc.alloc.rate.norm: 648725116,211 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            10298,000 ms

Iteration   5: 1,591 ops/s
                 Â·gc.alloc.rate:      1013,720 MB/sec
                 Â·gc.alloc.rate.norm: 648724547,368 B/op
                 Â·gc.count:           16,000 counts
                 Â·gc.time:            11107,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc":
  1,692 Â±(99.9%) 0,050 ops/s [Average]
  (min, avg, max) = (1,591, 1,692, 1,896), stdev = 0,066
  CI (99.9%): [1,642, 1,741] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate":
  1060,381 Â±(99.9%) 32,380 MB/sec [Average]
  (min, avg, max) = (1010,669, 1060,381, 1167,118), stdev = 43,226
  CI (99.9%): [1028,001, 1092,761] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate.norm":
  648724658,152 Â±(99.9%) 170,781 B/op [Average]
  (min, avg, max) = (648724542,476, 648724658,152, 648725116,211), stdev = 227,987
  CI (99.9%): [648724487,371, 648724828,932] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.count":
  395,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (15,000, 15,800, 17,000), stdev = 0,707
  CI (99.9%): [395,000, 395,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.time":
  270091,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (10139,000, 10803,640, 11537,000), stdev = 376,302
  CI (99.9%): [270091,000, 270091,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc
# Parameters: (percentageOfHeapToAllocate = P_50)

# Run progress: 33,33% complete, ETA 00:19:40
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,725 ops/s
# Warmup Iteration   2: 0,770 ops/s
# Warmup Iteration   3: 0,705 ops/s
# Warmup Iteration   4: 0,782 ops/s
# Warmup Iteration   5: 0,774 ops/s
Iteration   1: 0,706 ops/s
                 Â·gc.alloc.rate:      766,738 MB/sec
                 Â·gc.alloc.rate.norm: 1297449084,444 B/op
                 Â·gc.count:           16,000 counts
                 Â·gc.time:            14035,000 ms

Iteration   2: 0,776 ops/s
                 Â·gc.alloc.rate:      916,293 MB/sec
                 Â·gc.alloc.rate.norm: 1297449084,444 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            11664,000 ms

Iteration   3: 0,775 ops/s
                 Â·gc.alloc.rate:      964,271 MB/sec
                 Â·gc.alloc.rate.norm: 1297449084,444 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            11059,000 ms

Iteration   4: 0,713 ops/s
                 Â·gc.alloc.rate:      774,134 MB/sec
                 Â·gc.alloc.rate.norm: 1297450288,889 B/op
                 Â·gc.count:           16,000 counts
                 Â·gc.time:            13888,000 ms

Iteration   5: 0,780 ops/s
                 Â·gc.alloc.rate:      920,334 MB/sec
                 Â·gc.alloc.rate.norm: 1297449077,333 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            11609,000 ms


# Run progress: 40,00% complete, ETA 00:18:03
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,723 ops/s
# Warmup Iteration   2: 0,772 ops/s
# Warmup Iteration   3: 0,709 ops/s
# Warmup Iteration   4: 0,786 ops/s
# Warmup Iteration   5: 0,780 ops/s
Iteration   1: 0,709 ops/s
                 Â·gc.alloc.rate:      770,623 MB/sec
                 Â·gc.alloc.rate.norm: 1297449084,444 B/op
                 Â·gc.count:           16,000 counts
                 Â·gc.time:            13962,000 ms

Iteration   2: 0,778 ops/s
                 Â·gc.alloc.rate:      918,535 MB/sec
                 Â·gc.alloc.rate.norm: 1297449084,444 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            11637,000 ms

Iteration   3: 0,779 ops/s
                 Â·gc.alloc.rate:      967,634 MB/sec
                 Â·gc.alloc.rate.norm: 1297449084,444 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            11016,000 ms

Iteration   4: 0,716 ops/s
                 Â·gc.alloc.rate:      775,787 MB/sec
                 Â·gc.alloc.rate.norm: 1297450285,333 B/op
                 Â·gc.count:           16,000 counts
                 Â·gc.time:            13859,000 ms

Iteration   5: 0,782 ops/s
                 Â·gc.alloc.rate:      921,148 MB/sec
                 Â·gc.alloc.rate.norm: 1297449084,444 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            11595,000 ms


# Run progress: 46,67% complete, ETA 00:16:16
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,731 ops/s
# Warmup Iteration   2: 0,691 ops/s
# Warmup Iteration   3: 0,717 ops/s
# Warmup Iteration   4: 0,778 ops/s
# Warmup Iteration   5: 0,771 ops/s
Iteration   1: 0,717 ops/s
                 Â·gc.alloc.rate:      777,696 MB/sec
                 Â·gc.alloc.rate.norm: 1297449084,444 B/op
                 Â·gc.count:           16,000 counts
                 Â·gc.time:            13820,000 ms

Iteration   2: 0,781 ops/s
                 Â·gc.alloc.rate:      920,335 MB/sec
                 Â·gc.alloc.rate.norm: 1297449084,444 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            11608,000 ms

Iteration   3: 0,776 ops/s
                 Â·gc.alloc.rate:      966,108 MB/sec
                 Â·gc.alloc.rate.norm: 1297450285,333 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            11039,000 ms

Iteration   4: 0,715 ops/s
                 Â·gc.alloc.rate:      777,058 MB/sec
                 Â·gc.alloc.rate.norm: 1297449088,000 B/op
                 Â·gc.count:           16,000 counts
                 Â·gc.time:            13844,000 ms

Iteration   5: 0,784 ops/s
                 Â·gc.alloc.rate:      926,781 MB/sec
                 Â·gc.alloc.rate.norm: 1297449084,444 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            11531,000 ms


# Run progress: 53,33% complete, ETA 00:14:21
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,731 ops/s
# Warmup Iteration   2: 0,779 ops/s
# Warmup Iteration   3: 0,715 ops/s
# Warmup Iteration   4: 0,787 ops/s
# Warmup Iteration   5: 0,781 ops/s
Iteration   1: 0,711 ops/s
                 Â·gc.alloc.rate:      773,060 MB/sec
                 Â·gc.alloc.rate.norm: 1297449084,444 B/op
                 Â·gc.count:           16,000 counts
                 Â·gc.time:            13916,000 ms

Iteration   2: 0,785 ops/s
                 Â·gc.alloc.rate:      927,797 MB/sec
                 Â·gc.alloc.rate.norm: 1297449084,444 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            11513,000 ms

Iteration   3: 0,766 ops/s
                 Â·gc.alloc.rate:      957,604 MB/sec
                 Â·gc.alloc.rate.norm: 1297449084,444 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            11128,000 ms

Iteration   4: 0,616 ops/s
                 Â·gc.alloc.rate:      792,473 MB/sec
                 Â·gc.alloc.rate.norm: 1297450285,333 B/op
                 Â·gc.count:           16,000 counts
                 Â·gc.time:            13558,000 ms

Iteration   5: 0,775 ops/s
                 Â·gc.alloc.rate:      917,452 MB/sec
                 Â·gc.alloc.rate.norm: 1297449084,444 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            11643,000 ms


# Run progress: 60,00% complete, ETA 00:12:21
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,730 ops/s
# Warmup Iteration   2: 0,779 ops/s
# Warmup Iteration   3: 0,720 ops/s
# Warmup Iteration   4: 0,785 ops/s
# Warmup Iteration   5: 0,776 ops/s
Iteration   1: 0,780 ops/s
                 Â·gc.alloc.rate:      777,629 MB/sec
                 Â·gc.alloc.rate.norm: 1297449084,444 B/op
                 Â·gc.count:           16,000 counts
                 Â·gc.time:            13818,000 ms

Iteration   2: 0,789 ops/s
                 Â·gc.alloc.rate:      930,343 MB/sec
                 Â·gc.alloc.rate.norm: 1297449084,444 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            11484,000 ms

Iteration   3: 0,778 ops/s
                 Â·gc.alloc.rate:      969,084 MB/sec
                 Â·gc.alloc.rate.norm: 1297449084,444 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            11007,000 ms

Iteration   4: 0,714 ops/s
                 Â·gc.alloc.rate:      775,697 MB/sec
                 Â·gc.alloc.rate.norm: 1297450285,333 B/op
                 Â·gc.count:           16,000 counts
                 Â·gc.time:            13870,000 ms

Iteration   5: 0,789 ops/s
                 Â·gc.alloc.rate:      930,088 MB/sec
                 Â·gc.alloc.rate.norm: 1297449088,000 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            11483,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc":
  0,752 Â±(99.9%) 0,032 ops/s [Average]
  (min, avg, max) = (0,616, 0,752, 0,789), stdev = 0,043
  CI (99.9%): [0,720, 0,783] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate":
  872,588 Â±(99.9%) 61,510 MB/sec [Average]
  (min, avg, max) = (766,738, 872,588, 969,084), stdev = 82,115
  CI (99.9%): [811,078, 934,099] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate.norm":
  1297449324,764 Â±(99.9%) 367,465 B/op [Average]
  (min, avg, max) = (1297449077,333, 1297449324,764, 1297450288,889), stdev = 490,555
  CI (99.9%): [1297448957,300, 1297449692,229] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.count":
  385,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (15,000, 15,400, 16,000), stdev = 0,500
  CI (99.9%): [385,000, 385,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.time":
  309586,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (11007,000, 12383,440, 14035,000), stdev = 1246,757
  CI (99.9%): [309586,000, 309586,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc
# Parameters: (percentageOfHeapToAllocate = P_75)

# Run progress: 66,67% complete, ETA 00:10:19
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,202 ops/s
# Warmup Iteration   2: 0,231 ops/s
# Warmup Iteration   3: 0,257 ops/s
# Warmup Iteration   4: 0,266 ops/s
# Warmup Iteration   5: 0,223 ops/s
Iteration   1: 0,291 ops/s
                 Â·gc.alloc.rate:      480,301 MB/sec
                 Â·gc.alloc.rate.norm: 1946173651,200 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            18880,000 ms

Iteration   2: 0,259 ops/s
                 Â·gc.alloc.rate:      492,541 MB/sec
                 Â·gc.alloc.rate.norm: 1946173651,200 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            18401,000 ms

Iteration   3: 0,266 ops/s
                 Â·gc.alloc.rate:      493,184 MB/sec
                 Â·gc.alloc.rate.norm: 1946175812,800 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            18377,000 ms

Iteration   4: 0,223 ops/s
                 Â·gc.alloc.rate:      443,050 MB/sec
                 Â·gc.alloc.rate.norm: 1946173651,200 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            20508,000 ms

Iteration   5: 0,260 ops/s
                 Â·gc.alloc.rate:      477,840 MB/sec
                 Â·gc.alloc.rate.norm: 1946173657,600 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            18985,000 ms


# Run progress: 73,33% complete, ETA 00:08:43
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,206 ops/s
# Warmup Iteration   2: 0,234 ops/s
# Warmup Iteration   3: 0,254 ops/s
# Warmup Iteration   4: 0,262 ops/s
# Warmup Iteration   5: 0,228 ops/s
Iteration   1: 0,292 ops/s
                 Â·gc.alloc.rate:      473,626 MB/sec
                 Â·gc.alloc.rate.norm: 1946173651,200 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            19155,000 ms

Iteration   2: 0,226 ops/s
                 Â·gc.alloc.rate:      483,435 MB/sec
                 Â·gc.alloc.rate.norm: 1946173651,200 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            18754,000 ms

Iteration   3: 0,256 ops/s
                 Â·gc.alloc.rate:      485,786 MB/sec
                 Â·gc.alloc.rate.norm: 1946175812,800 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            18660,000 ms

Iteration   4: 0,223 ops/s
                 Â·gc.alloc.rate:      448,668 MB/sec
                 Â·gc.alloc.rate.norm: 1946173651,200 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            20241,000 ms

Iteration   5: 0,294 ops/s
                 Â·gc.alloc.rate:      473,624 MB/sec
                 Â·gc.alloc.rate.norm: 1946173651,200 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            19149,000 ms


# Run progress: 80,00% complete, ETA 00:06:49
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,224 ops/s
# Warmup Iteration   2: 0,244 ops/s
# Warmup Iteration   3: 0,249 ops/s
# Warmup Iteration   4: 0,235 ops/s
# Warmup Iteration   5: 0,205 ops/s
Iteration   1: 0,252 ops/s
                 Â·gc.alloc.rate:      474,791 MB/sec
                 Â·gc.alloc.rate.norm: 1946173651,200 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            19101,000 ms

Iteration   2: 0,257 ops/s
                 Â·gc.alloc.rate:      488,559 MB/sec
                 Â·gc.alloc.rate.norm: 1946173651,200 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            18549,000 ms

Iteration   3: 0,256 ops/s
                 Â·gc.alloc.rate:      486,561 MB/sec
                 Â·gc.alloc.rate.norm: 1946173651,200 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            18632,000 ms

Iteration   4: 0,207 ops/s
                 Â·gc.alloc.rate:      450,666 MB/sec
                 Â·gc.alloc.rate.norm: 1946175812,800 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            20154,000 ms

Iteration   5: 0,251 ops/s
                 Â·gc.alloc.rate:      474,237 MB/sec
                 Â·gc.alloc.rate.norm: 1946173651,200 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            19128,000 ms


# Run progress: 86,67% complete, ETA 00:04:43
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,236 ops/s
# Warmup Iteration   2: 0,249 ops/s
# Warmup Iteration   3: 0,218 ops/s
# Warmup Iteration   4: 0,276 ops/s
# Warmup Iteration   5: 0,256 ops/s
Iteration   1: 0,262 ops/s
                 Â·gc.alloc.rate:      485,118 MB/sec
                 Â·gc.alloc.rate.norm: 1946173651,200 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            18690,000 ms

Iteration   2: 0,254 ops/s
                 Â·gc.alloc.rate:      561,583 MB/sec
                 Â·gc.alloc.rate.norm: 1946173651,200 B/op
                 Â·gc.count:           14,000 counts
                 Â·gc.time:            16084,000 ms

Iteration   3: 0,236 ops/s
                 Â·gc.alloc.rate:      468,511 MB/sec
                 Â·gc.alloc.rate.norm: 1946173651,200 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            19364,000 ms

Iteration   4: 0,241 ops/s
                 Â·gc.alloc.rate:      486,756 MB/sec
                 Â·gc.alloc.rate.norm: 1946175812,800 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            18622,000 ms

Iteration   5: 0,263 ops/s
                 Â·gc.alloc.rate:      487,166 MB/sec
                 Â·gc.alloc.rate.norm: 1946173651,200 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            18605,000 ms


# Run progress: 93,33% complete, ETA 00:02:25
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,237 ops/s
# Warmup Iteration   2: 0,229 ops/s
# Warmup Iteration   3: 0,220 ops/s
# Warmup Iteration   4: 0,263 ops/s
# Warmup Iteration   5: 0,224 ops/s
Iteration   1: 0,260 ops/s
                 Â·gc.alloc.rate:      478,068 MB/sec
                 Â·gc.alloc.rate.norm: 1946173651,200 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            18970,000 ms

Iteration   2: 0,240 ops/s
                 Â·gc.alloc.rate:      486,147 MB/sec
                 Â·gc.alloc.rate.norm: 1946173651,200 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            18648,000 ms

Iteration   3: 0,256 ops/s
                 Â·gc.alloc.rate:      487,635 MB/sec
                 Â·gc.alloc.rate.norm: 1946173651,200 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            18589,000 ms

Iteration   4: 0,205 ops/s
                 Â·gc.alloc.rate:      446,683 MB/sec
                 Â·gc.alloc.rate.norm: 1946175812,800 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            20336,000 ms

Iteration   5: 0,251 ops/s
                 Â·gc.alloc.rate:      473,775 MB/sec
                 Â·gc.alloc.rate.norm: 1946173657,600 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            19149,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc":
  0,251 Â±(99.9%) 0,017 ops/s [Average]
  (min, avg, max) = (0,205, 0,251, 0,294), stdev = 0,023
  CI (99.9%): [0,234, 0,269] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate":
  479,533 Â±(99.9%) 16,750 MB/sec [Average]
  (min, avg, max) = (443,050, 479,533, 561,583), stdev = 22,361
  CI (99.9%): [462,782, 496,283] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate.norm":
  1946174084,032 Â±(99.9%) 660,846 B/op [Average]
  (min, avg, max) = (1946173651,200, 1946174084,032, 1946175812,800), stdev = 882,210
  CI (99.9%): [1946173423,186, 1946174744,878] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.count":
  374,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (14,000, 14,960, 15,000), stdev = 0,200
  CI (99.9%): [374,000, 374,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.time":
  473731,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (16084,000, 18949,240, 20508,000), stdev = 855,427
  CI (99.9%): [473731,000, 473731,000] (assumes normal distribution)


# Run complete. Total time: 00:37:23

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                 (percentageOfHeapToAllocate)   Mode  Cnt           Score     Error   Units
BurstHeapMemoryAllocatorBenchmark.gc                                              P_25  thrpt   25           1,692 Â±   0,050   ops/s
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate                               P_25  thrpt   25        1060,381 Â±  32,380  MB/sec
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate.norm                          P_25  thrpt   25   648724658,152 Â± 170,781    B/op
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.count                                    P_25  thrpt   25         395,000            counts
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.time                                     P_25  thrpt   25      270091,000                ms
BurstHeapMemoryAllocatorBenchmark.gc                                              P_50  thrpt   25           0,752 Â±   0,032   ops/s
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate                               P_50  thrpt   25         872,588 Â±  61,510  MB/sec
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate.norm                          P_50  thrpt   25  1297449324,764 Â± 367,465    B/op
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.count                                    P_50  thrpt   25         385,000            counts
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.time                                     P_50  thrpt   25      309586,000                ms
BurstHeapMemoryAllocatorBenchmark.gc                                              P_75  thrpt   25           0,251 Â±   0,017   ops/s
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate                               P_75  thrpt   25         479,533 Â±  16,750  MB/sec
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate.norm                          P_75  thrpt   25  1946174084,032 Â± 660,846    B/op
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.count                                    P_75  thrpt   25         374,000            counts
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.time                                     P_75  thrpt   25      473731,000                ms

Benchmark result is saved to results/jdk-17/arm64/openjdk-hotspot-vm/BurstHeapMemoryAllocatorBenchmark_serialGC_2threads.csv

Running BurstHeapMemoryAllocatorBenchmark benchmark ...
java  -jar benchmarks/target/benchmarks.jar .*BurstHeapMemoryAllocatorBenchmark.* -foe true -wi 5 -w 10 -i 5 -r 10 -f 5 -rf csv -rff results/jdk-17/arm64/openjdk-hotspot-vm/BurstHeapMemoryAllocatorBenchmark_parallelGC_1thread.csv -t 1 -prof gc -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseParallelGC"

# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc
# Parameters: (percentageOfHeapToAllocate = P_25)

# Run progress: 0,00% complete, ETA 00:25:00
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,311 ops/s
# Warmup Iteration   2: 0,184 ops/s
# Warmup Iteration   3: 0,292 ops/s
# Warmup Iteration   4: 0,374 ops/s
# Warmup Iteration   5: 0,383 ops/s
Iteration   1: 0,357 ops/s
                 Â·gc.alloc.rate:      437,434 MB/sec
                 Â·gc.alloc.rate.norm: 1286307958,000 B/op
                 Â·gc.count:           12,000 counts
                 Â·gc.time:            10829,000 ms

Iteration   2: 0,358 ops/s
                 Â·gc.alloc.rate:      439,290 MB/sec
                 Â·gc.alloc.rate.norm: 1286307958,000 B/op
                 Â·gc.count:           11,000 counts
                 Â·gc.time:            10784,000 ms

Iteration   3: 0,183 ops/s
                 Â·gc.alloc.rate:      224,502 MB/sec
                 Â·gc.alloc.rate.norm: 1286308060,000 B/op
                 Â·gc.count:           6,000 counts
                 Â·gc.time:            10734,000 ms

Iteration   4: 0,168 ops/s
                 Â·gc.alloc.rate:      206,273 MB/sec
                 Â·gc.alloc.rate.norm: 1286308076,000 B/op
                 Â·gc.count:           7,000 counts
                 Â·gc.time:            11701,000 ms

Iteration   5: 0,246 ops/s
                 Â·gc.alloc.rate:      301,922 MB/sec
                 Â·gc.alloc.rate.norm: 1286308002,667 B/op
                 Â·gc.count:           8,000 counts
                 Â·gc.time:            11899,000 ms


# Run progress: 6,67% complete, ETA 00:29:45
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,311 ops/s
# Warmup Iteration   2: 0,184 ops/s
# Warmup Iteration   3: 0,282 ops/s
# Warmup Iteration   4: 0,386 ops/s
# Warmup Iteration   5: 0,371 ops/s
Iteration   1: 0,195 ops/s
                 Â·gc.alloc.rate:      238,726 MB/sec
                 Â·gc.alloc.rate.norm: 1286308002,667 B/op
                 Â·gc.count:           10,000 counts
                 Â·gc.time:            15125,000 ms

Iteration   2: 0,210 ops/s
                 Â·gc.alloc.rate:      258,023 MB/sec
                 Â·gc.alloc.rate.norm: 1286307992,000 B/op
                 Â·gc.count:           9,000 counts
                 Â·gc.time:            13974,000 ms

Iteration   3: 0,237 ops/s
                 Â·gc.alloc.rate:      290,498 MB/sec
                 Â·gc.alloc.rate.norm: 1286307992,000 B/op
                 Â·gc.count:           8,000 counts
                 Â·gc.time:            12378,000 ms

Iteration   4: 0,235 ops/s
                 Â·gc.alloc.rate:      287,796 MB/sec
                 Â·gc.alloc.rate.norm: 1286307992,000 B/op
                 Â·gc.count:           8,000 counts
                 Â·gc.time:            12498,000 ms

Iteration   5: 0,235 ops/s
                 Â·gc.alloc.rate:      287,822 MB/sec
                 Â·gc.alloc.rate.norm: 1286308002,667 B/op
                 Â·gc.count:           8,000 counts
                 Â·gc.time:            12498,000 ms


# Run progress: 13,33% complete, ETA 00:28:33
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,309 ops/s
# Warmup Iteration   2: 0,184 ops/s
# Warmup Iteration   3: 0,288 ops/s
# Warmup Iteration   4: 0,384 ops/s
# Warmup Iteration   5: 0,370 ops/s
Iteration   1: 0,195 ops/s
                 Â·gc.alloc.rate:      239,170 MB/sec
                 Â·gc.alloc.rate.norm: 1286307992,000 B/op
                 Â·gc.count:           10,000 counts
                 Â·gc.time:            15095,000 ms

Iteration   2: 0,211 ops/s
                 Â·gc.alloc.rate:      258,628 MB/sec
                 Â·gc.alloc.rate.norm: 1286307992,000 B/op
                 Â·gc.count:           9,000 counts
                 Â·gc.time:            13940,000 ms

Iteration   3: 0,236 ops/s
                 Â·gc.alloc.rate:      289,615 MB/sec
                 Â·gc.alloc.rate.norm: 1286307992,000 B/op
                 Â·gc.count:           8,000 counts
                 Â·gc.time:            12418,000 ms

Iteration   4: 0,239 ops/s
                 Â·gc.alloc.rate:      292,728 MB/sec
                 Â·gc.alloc.rate.norm: 1286308002,667 B/op
                 Â·gc.count:           8,000 counts
                 Â·gc.time:            12282,000 ms

Iteration   5: 0,247 ops/s
                 Â·gc.alloc.rate:      303,348 MB/sec
                 Â·gc.alloc.rate.norm: 1286308002,667 B/op
                 Â·gc.count:           8,000 counts
                 Â·gc.time:            11842,000 ms


# Run progress: 20,00% complete, ETA 00:26:37
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,311 ops/s
# Warmup Iteration   2: 0,187 ops/s
# Warmup Iteration   3: 0,276 ops/s
# Warmup Iteration   4: 0,399 ops/s
# Warmup Iteration   5: 0,372 ops/s
Iteration   1: 0,197 ops/s
                 Â·gc.alloc.rate:      241,371 MB/sec
                 Â·gc.alloc.rate.norm: 1286308002,667 B/op
                 Â·gc.count:           10,000 counts
                 Â·gc.time:            14954,000 ms

Iteration   2: 0,211 ops/s
                 Â·gc.alloc.rate:      258,996 MB/sec
                 Â·gc.alloc.rate.norm: 1286308013,333 B/op
                 Â·gc.count:           9,000 counts
                 Â·gc.time:            13919,000 ms

Iteration   3: 0,217 ops/s
                 Â·gc.alloc.rate:      266,127 MB/sec
                 Â·gc.alloc.rate.norm: 1286307992,000 B/op
                 Â·gc.count:           9,000 counts
                 Â·gc.time:            13538,000 ms

Iteration   4: 0,233 ops/s
                 Â·gc.alloc.rate:      286,405 MB/sec
                 Â·gc.alloc.rate.norm: 1286308002,667 B/op
                 Â·gc.count:           8,000 counts
                 Â·gc.time:            12557,000 ms

Iteration   5: 0,242 ops/s
                 Â·gc.alloc.rate:      296,766 MB/sec
                 Â·gc.alloc.rate.norm: 1286308002,667 B/op
                 Â·gc.count:           8,000 counts
                 Â·gc.time:            12109,000 ms


# Run progress: 26,67% complete, ETA 00:24:35
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,312 ops/s
# Warmup Iteration   2: 0,187 ops/s
# Warmup Iteration   3: 0,282 ops/s
# Warmup Iteration   4: 0,377 ops/s
# Warmup Iteration   5: 0,380 ops/s
Iteration   1: 0,199 ops/s
                 Â·gc.alloc.rate:      244,246 MB/sec
                 Â·gc.alloc.rate.norm: 1286308002,667 B/op
                 Â·gc.count:           10,000 counts
                 Â·gc.time:            14777,000 ms

Iteration   2: 0,217 ops/s
                 Â·gc.alloc.rate:      266,482 MB/sec
                 Â·gc.alloc.rate.norm: 1286308002,667 B/op
                 Â·gc.count:           9,000 counts
                 Â·gc.time:            13519,000 ms

Iteration   3: 0,247 ops/s
                 Â·gc.alloc.rate:      303,172 MB/sec
                 Â·gc.alloc.rate.norm: 1286308013,333 B/op
                 Â·gc.count:           8,000 counts
                 Â·gc.time:            11848,000 ms

Iteration   4: 0,246 ops/s
                 Â·gc.alloc.rate:      301,221 MB/sec
                 Â·gc.alloc.rate.norm: 1286307992,000 B/op
                 Â·gc.count:           8,000 counts
                 Â·gc.time:            11926,000 ms

Iteration   5: 0,238 ops/s
                 Â·gc.alloc.rate:      292,030 MB/sec
                 Â·gc.alloc.rate.norm: 1286308002,667 B/op
                 Â·gc.count:           8,000 counts
                 Â·gc.time:            12309,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc":
  0,232 Â±(99.9%) 0,033 ops/s [Average]
  (min, avg, max) = (0,168, 0,232, 0,358), stdev = 0,044
  CI (99.9%): [0,199, 0,265] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate":
  284,504 Â±(99.9%) 40,174 MB/sec [Average]
  (min, avg, max) = (206,273, 284,504, 439,290), stdev = 53,631
  CI (99.9%): [244,330, 324,678] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate.norm":
  1286308001,760 Â±(99.9%) 17,944 B/op [Average]
  (min, avg, max) = (1286307958,000, 1286308001,760, 1286308076,000), stdev = 23,955
  CI (99.9%): [1286307983,816, 1286308019,704] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.count":
  217,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (6,000, 8,680, 12,000), stdev = 1,282
  CI (99.9%): [217,000, 217,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.time":
  319453,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (10734,000, 12778,120, 15125,000), stdev = 1331,946
  CI (99.9%): [319453,000, 319453,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc
# Parameters: (percentageOfHeapToAllocate = P_50)

# Run progress: 33,33% complete, ETA 00:22:21
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,085 ops/s
# Warmup Iteration   2: 0,097 ops/s
# Warmup Iteration   3: 0,065 ops/s
# Warmup Iteration   4: 0,212 ops/s
# Warmup Iteration   5: 0,199 ops/s
Iteration   1: 0,203 ops/s
                 Â·gc.alloc.rate:      498,327 MB/sec
                 Â·gc.alloc.rate.norm: 2572615832,000 B/op
                 Â·gc.count:           13,000 counts
                 Â·gc.time:            14194,000 ms

Iteration   2: 0,096 ops/s
                 Â·gc.alloc.rate:      235,388 MB/sec
                 Â·gc.alloc.rate.norm: 2572615916,000 B/op
                 Â·gc.count:           10,000 counts
                 Â·gc.time:            20460,000 ms

Iteration   3: 0,210 ops/s
                 Â·gc.alloc.rate:      515,570 MB/sec
                 Â·gc.alloc.rate.norm: 2572615832,000 B/op
                 Â·gc.count:           14,000 counts
                 Â·gc.time:            13702,000 ms

Iteration   4: 0,062 ops/s
                 Â·gc.alloc.rate:      152,003 MB/sec
                 Â·gc.alloc.rate.norm: 2572616104,000 B/op
                 Â·gc.count:           6,000 counts
                 Â·gc.time:            15948,000 ms

Iteration   5: 0,213 ops/s
                 Â·gc.alloc.rate:      521,693 MB/sec
                 Â·gc.alloc.rate.norm: 2572615842,667 B/op
                 Â·gc.count:           14,000 counts
                 Â·gc.time:            13536,000 ms


# Run progress: 40,00% complete, ETA 00:20:36
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,084 ops/s
# Warmup Iteration   2: 0,097 ops/s
# Warmup Iteration   3: 0,065 ops/s
# Warmup Iteration   4: 0,064 ops/s
# Warmup Iteration   5: 0,210 ops/s
Iteration   1: 0,199 ops/s
                 Â·gc.alloc.rate:      488,012 MB/sec
                 Â·gc.alloc.rate.norm: 2572615900,000 B/op
                 Â·gc.count:           9,000 counts
                 Â·gc.time:            9671,000 ms

Iteration   2: 0,097 ops/s
                 Â·gc.alloc.rate:      238,767 MB/sec
                 Â·gc.alloc.rate.norm: 2572615900,000 B/op
                 Â·gc.count:           10,000 counts
                 Â·gc.time:            20167,000 ms

Iteration   3: 0,211 ops/s
                 Â·gc.alloc.rate:      518,038 MB/sec
                 Â·gc.alloc.rate.norm: 2572615832,000 B/op
                 Â·gc.count:           14,000 counts
                 Â·gc.time:            13635,000 ms

Iteration   4: 0,200 ops/s
                 Â·gc.alloc.rate:      489,630 MB/sec
                 Â·gc.alloc.rate.norm: 2572615900,000 B/op
                 Â·gc.count:           9,000 counts
                 Â·gc.time:            9640,000 ms

Iteration   5: 0,097 ops/s
                 Â·gc.alloc.rate:      239,110 MB/sec
                 Â·gc.alloc.rate.norm: 2572615916,000 B/op
                 Â·gc.count:           10,000 counts
                 Â·gc.time:            20135,000 ms


# Run progress: 46,67% complete, ETA 00:18:41
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,085 ops/s
# Warmup Iteration   2: 0,096 ops/s
# Warmup Iteration   3: 0,064 ops/s
# Warmup Iteration   4: 0,214 ops/s
# Warmup Iteration   5: 0,211 ops/s
Iteration   1: 0,208 ops/s
                 Â·gc.alloc.rate:      509,156 MB/sec
                 Â·gc.alloc.rate.norm: 2572615832,000 B/op
                 Â·gc.count:           13,000 counts
                 Â·gc.time:            13882,000 ms

Iteration   2: 0,062 ops/s
                 Â·gc.alloc.rate:      151,365 MB/sec
                 Â·gc.alloc.rate.norm: 2572616136,000 B/op
                 Â·gc.count:           6,000 counts
                 Â·gc.time:            16016,000 ms

Iteration   3: 0,214 ops/s
                 Â·gc.alloc.rate:      523,833 MB/sec
                 Â·gc.alloc.rate.norm: 2572615832,000 B/op
                 Â·gc.count:           14,000 counts
                 Â·gc.time:            13476,000 ms

Iteration   4: 0,063 ops/s
                 Â·gc.alloc.rate:      154,859 MB/sec
                 Â·gc.alloc.rate.norm: 2572616136,000 B/op
                 Â·gc.count:           6,000 counts
                 Â·gc.time:            15651,000 ms

Iteration   5: 0,215 ops/s
                 Â·gc.alloc.rate:      526,494 MB/sec
                 Â·gc.alloc.rate.norm: 2572615842,667 B/op
                 Â·gc.count:           14,000 counts
                 Â·gc.time:            13405,000 ms


# Run progress: 53,33% complete, ETA 00:16:33
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,083 ops/s
# Warmup Iteration   2: 0,097 ops/s
# Warmup Iteration   3: 0,065 ops/s
# Warmup Iteration   4: 0,215 ops/s
# Warmup Iteration   5: 0,210 ops/s
Iteration   1: 0,210 ops/s
                 Â·gc.alloc.rate:      514,341 MB/sec
                 Â·gc.alloc.rate.norm: 2572615832,000 B/op
                 Â·gc.count:           13,000 counts
                 Â·gc.time:            13729,000 ms

Iteration   2: 0,062 ops/s
                 Â·gc.alloc.rate:      151,708 MB/sec
                 Â·gc.alloc.rate.norm: 2572616104,000 B/op
                 Â·gc.count:           6,000 counts
                 Â·gc.time:            15979,000 ms

Iteration   3: 0,215 ops/s
                 Â·gc.alloc.rate:      528,501 MB/sec
                 Â·gc.alloc.rate.norm: 2572615832,000 B/op
                 Â·gc.count:           14,000 counts
                 Â·gc.time:            13349,000 ms

Iteration   4: 0,064 ops/s
                 Â·gc.alloc.rate:      156,755 MB/sec
                 Â·gc.alloc.rate.norm: 2572616104,000 B/op
                 Â·gc.count:           6,000 counts
                 Â·gc.time:            15460,000 ms

Iteration   5: 0,213 ops/s
                 Â·gc.alloc.rate:      523,801 MB/sec
                 Â·gc.alloc.rate.norm: 2572615842,667 B/op
                 Â·gc.count:           14,000 counts
                 Â·gc.time:            13477,000 ms


# Run progress: 60,00% complete, ETA 00:14:18
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,084 ops/s
# Warmup Iteration   2: 0,095 ops/s
# Warmup Iteration   3: 0,065 ops/s
# Warmup Iteration   4: 0,210 ops/s
# Warmup Iteration   5: 0,197 ops/s
Iteration   1: 0,201 ops/s
                 Â·gc.alloc.rate:      493,286 MB/sec
                 Â·gc.alloc.rate.norm: 2572615832,000 B/op
                 Â·gc.count:           13,000 counts
                 Â·gc.time:            14346,000 ms

Iteration   2: 0,096 ops/s
                 Â·gc.alloc.rate:      236,080 MB/sec
                 Â·gc.alloc.rate.norm: 2572615900,000 B/op
                 Â·gc.count:           10,000 counts
                 Â·gc.time:            20402,000 ms

Iteration   3: 0,219 ops/s
                 Â·gc.alloc.rate:      536,169 MB/sec
                 Â·gc.alloc.rate.norm: 2572615832,000 B/op
                 Â·gc.count:           14,000 counts
                 Â·gc.time:            13154,000 ms

Iteration   4: 0,063 ops/s
                 Â·gc.alloc.rate:      153,973 MB/sec
                 Â·gc.alloc.rate.norm: 2572616136,000 B/op
                 Â·gc.count:           6,000 counts
                 Â·gc.time:            15743,000 ms

Iteration   5: 0,212 ops/s
                 Â·gc.alloc.rate:      519,417 MB/sec
                 Â·gc.alloc.rate.norm: 2572615842,667 B/op
                 Â·gc.count:           14,000 counts
                 Â·gc.time:            13596,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc":
  0,156 Â±(99.9%) 0,051 ops/s [Average]
  (min, avg, max) = (0,062, 0,156, 0,219), stdev = 0,068
  CI (99.9%): [0,105, 0,207] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate":
  383,051 Â±(99.9%) 124,281 MB/sec [Average]
  (min, avg, max) = (151,365, 383,051, 536,169), stdev = 165,912
  CI (99.9%): [258,770, 507,332] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate.norm":
  2572615920,427 Â±(99.9%) 88,735 B/op [Average]
  (min, avg, max) = (2572615832,000, 2572615920,427, 2572616136,000), stdev = 118,459
  CI (99.9%): [2572615831,691, 2572616009,162] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.count":
  272,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (6,000, 10,880, 14,000), stdev = 3,283
  CI (99.9%): [272,000, 272,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.time":
  372753,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (9640,000, 14910,120, 20460,000), stdev = 2872,187
  CI (99.9%): [372753,000, 372753,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc
# Parameters: (percentageOfHeapToAllocate = P_75)

# Run progress: 66,67% complete, ETA 00:12:03
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,051 ops/s
# Warmup Iteration   2: 0,049 ops/s
# Warmup Iteration   3: <failure>

java.lang.OutOfMemoryError: GC overhead limit exceeded
	at com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.createInstance(BurstHeapMemoryAllocatorBenchmark.java:110)
	at com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.allocate(BurstHeapMemoryAllocatorBenchmark.java:103)
	at com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc(BurstHeapMemoryAllocatorBenchmark.java:94)
	at com.ionutbalosin.jvm.performance.benchmarks.micro.gc.jmh_generated.BurstHeapMemoryAllocatorBenchmark_gc_jmhTest.gc_thrpt_jmhStub(BurstHeapMemoryAllocatorBenchmark_gc_jmhTest.java:142)
	at com.ionutbalosin.jvm.performance.benchmarks.micro.gc.jmh_generated.BurstHeapMemoryAllocatorBenchmark_gc_jmhTest.gc_Throughput(BurstHeapMemoryAllocatorBenchmark_gc_jmhTest.java:83)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)


Benchmark had encountered error, and fail on error was requested

Running BurstHeapMemoryAllocatorBenchmark benchmark ...
java  -jar benchmarks/target/benchmarks.jar .*BurstHeapMemoryAllocatorBenchmark.* -foe true -wi 5 -w 10 -i 5 -r 10 -f 5 -rf csv -rff results/jdk-17/arm64/openjdk-hotspot-vm/BurstHeapMemoryAllocatorBenchmark_parallelGC_2threads.csv -t 2 -prof gc -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseParallelGC"

# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc
# Parameters: (percentageOfHeapToAllocate = P_25)

# Run progress: 0,00% complete, ETA 00:25:00
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,626 ops/s
# Warmup Iteration   2: 0,531 ops/s
# Warmup Iteration   3: 0,895 ops/s
# Warmup Iteration   4: 0,766 ops/s
# Warmup Iteration   5: 0,890 ops/s
Iteration   1: 0,599 ops/s
                 Â·gc.alloc.rate:      342,532 MB/sec
                 Â·gc.alloc.rate.norm: 643154044,444 B/op
                 Â·gc.count:           16,000 counts
                 Â·gc.time:            15872,000 ms

Iteration   2: 0,800 ops/s
                 Â·gc.alloc.rate:      462,962 MB/sec
                 Â·gc.alloc.rate.norm: 643154024,727 B/op
                 Â·gc.count:           18,000 counts
                 Â·gc.time:            14281,000 ms

Iteration   3: 0,841 ops/s
                 Â·gc.alloc.rate:      499,648 MB/sec
                 Â·gc.alloc.rate.norm: 643155007,273 B/op
                 Â·gc.count:           18,000 counts
                 Â·gc.time:            13213,000 ms

Iteration   4: 0,723 ops/s
                 Â·gc.alloc.rate:      357,563 MB/sec
                 Â·gc.alloc.rate.norm: 643154044,444 B/op
                 Â·gc.count:           16,000 counts
                 Â·gc.time:            15194,000 ms

Iteration   5: 0,770 ops/s
                 Â·gc.alloc.rate:      455,106 MB/sec
                 Â·gc.alloc.rate.norm: 643154030,545 B/op
                 Â·gc.count:           18,000 counts
                 Â·gc.time:            14534,000 ms


# Run progress: 6,67% complete, ETA 00:34:58
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,925 ops/s
# Warmup Iteration   2: 0,731 ops/s
# Warmup Iteration   3: 0,619 ops/s
# Warmup Iteration   4: 0,519 ops/s
# Warmup Iteration   5: 0,481 ops/s
Iteration   1: 0,740 ops/s
                 Â·gc.alloc.rate:      449,305 MB/sec
                 Â·gc.alloc.rate.norm: 643154024,727 B/op
                 Â·gc.count:           18,000 counts
                 Â·gc.time:            14724,000 ms

Iteration   2: 0,875 ops/s
                 Â·gc.alloc.rate:      504,637 MB/sec
                 Â·gc.alloc.rate.norm: 643154024,727 B/op
                 Â·gc.count:           18,000 counts
                 Â·gc.time:            13081,000 ms

Iteration   3: 0,590 ops/s
                 Â·gc.alloc.rate:      425,509 MB/sec
                 Â·gc.alloc.rate.norm: 643155409,000 B/op
                 Â·gc.count:           13,000 counts
                 Â·gc.time:            11333,000 ms

Iteration   4: 0,798 ops/s
                 Â·gc.alloc.rate:      377,201 MB/sec
                 Â·gc.alloc.rate.norm: 643154044,444 B/op
                 Â·gc.count:           16,000 counts
                 Â·gc.time:            14392,000 ms

Iteration   5: 0,620 ops/s
                 Â·gc.alloc.rate:      391,421 MB/sec
                 Â·gc.alloc.rate.norm: 643154075,429 B/op
                 Â·gc.count:           11,000 counts
                 Â·gc.time:            10772,000 ms


# Run progress: 13,33% complete, ETA 00:31:47
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,896 ops/s
# Warmup Iteration   2: 0,766 ops/s
# Warmup Iteration   3: 0,679 ops/s
# Warmup Iteration   4: 0,827 ops/s
# Warmup Iteration   5: 0,758 ops/s
Iteration   1: 0,907 ops/s
                 Â·gc.alloc.rate:      529,134 MB/sec
                 Â·gc.alloc.rate.norm: 643154024,727 B/op
                 Â·gc.count:           18,000 counts
                 Â·gc.time:            12462,000 ms

Iteration   2: 0,673 ops/s
                 Â·gc.alloc.rate:      428,317 MB/sec
                 Â·gc.alloc.rate.norm: 643154044,444 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            12643,000 ms

Iteration   3: 1,074 ops/s
                 Â·gc.alloc.rate:      656,835 MB/sec
                 Â·gc.alloc.rate.norm: 643154017,333 B/op
                 Â·gc.count:           19,000 counts
                 Â·gc.time:            10914,000 ms

Iteration   4: 0,894 ops/s
                 Â·gc.alloc.rate:      498,787 MB/sec
                 Â·gc.alloc.rate.norm: 643154842,462 B/op
                 Â·gc.count:           22,000 counts
                 Â·gc.time:            15643,000 ms

Iteration   5: 0,674 ops/s
                 Â·gc.alloc.rate:      406,672 MB/sec
                 Â·gc.alloc.rate.norm: 643154051,556 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            13330,000 ms


# Run progress: 20,00% complete, ETA 00:28:52
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
1,124 ops/s
# Warmup Iteration   2: 0,728 ops/s
# Warmup Iteration   3: 0,653 ops/s
# Warmup Iteration   4: 0,773 ops/s
# Warmup Iteration   5: 0,910 ops/s
Iteration   1: 0,656 ops/s
                 Â·gc.alloc.rate:      346,992 MB/sec
                 Â·gc.alloc.rate.norm: 643154044,444 B/op
                 Â·gc.count:           16,000 counts
                 Â·gc.time:            15666,000 ms

Iteration   2: 0,784 ops/s
                 Â·gc.alloc.rate:      454,564 MB/sec
                 Â·gc.alloc.rate.norm: 643154024,727 B/op
                 Â·gc.count:           18,000 counts
                 Â·gc.time:            14550,000 ms

Iteration   3: 0,887 ops/s
                 Â·gc.alloc.rate:      501,878 MB/sec
                 Â·gc.alloc.rate.norm: 643154024,727 B/op
                 Â·gc.count:           18,000 counts
                 Â·gc.time:            13151,000 ms

Iteration   4: 0,686 ops/s
                 Â·gc.alloc.rate:      406,707 MB/sec
                 Â·gc.alloc.rate.norm: 643155245,333 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            13329,000 ms

Iteration   5: 0,919 ops/s
                 Â·gc.alloc.rate:      566,079 MB/sec
                 Â·gc.alloc.rate.norm: 643154024,727 B/op
                 Â·gc.count:           18,000 counts
                 Â·gc.time:            11627,000 ms


# Run progress: 26,67% complete, ETA 00:26:18
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
1,188 ops/s
# Warmup Iteration   2: 0,714 ops/s
# Warmup Iteration   3: 0,615 ops/s
# Warmup Iteration   4: 0,771 ops/s
# Warmup Iteration   5: 0,889 ops/s
Iteration   1: 0,604 ops/s
                 Â·gc.alloc.rate:      433,440 MB/sec
                 Â·gc.alloc.rate.norm: 643154058,000 B/op
                 Â·gc.count:           13,000 counts
                 Â·gc.time:            11124,000 ms

Iteration   2: 0,757 ops/s
                 Â·gc.alloc.rate:      444,866 MB/sec
                 Â·gc.alloc.rate.norm: 643154024,727 B/op
                 Â·gc.count:           18,000 counts
                 Â·gc.time:            14873,000 ms

Iteration   3: 0,768 ops/s
                 Â·gc.alloc.rate:      373,348 MB/sec
                 Â·gc.alloc.rate.norm: 643155007,273 B/op
                 Â·gc.count:           20,000 counts
                 Â·gc.time:            17778,000 ms

Iteration   4: 0,774 ops/s
                 Â·gc.alloc.rate:      453,562 MB/sec
                 Â·gc.alloc.rate.norm: 643154024,727 B/op
                 Â·gc.count:           18,000 counts
                 Â·gc.time:            14579,000 ms

Iteration   5: 0,913 ops/s
                 Â·gc.alloc.rate:      533,347 MB/sec
                 Â·gc.alloc.rate.norm: 643154024,727 B/op
                 Â·gc.count:           18,000 counts
                 Â·gc.time:            12358,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc":
  0,773 Â±(99.9%) 0,091 ops/s [Average]
  (min, avg, max) = (0,590, 0,773, 1,074), stdev = 0,122
  CI (99.9%): [0,682, 0,864] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate":
  452,016 Â±(99.9%) 55,246 MB/sec [Average]
  (min, avg, max) = (342,532, 452,016, 656,835), stdev = 73,752
  CI (99.9%): [396,770, 507,263] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate.norm":
  643154248,548 Â±(99.9%) 333,586 B/op [Average]
  (min, avg, max) = (643154017,333, 643154248,548, 643155409,000), stdev = 445,328
  CI (99.9%): [643153914,962, 643154582,134] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.count":
  423,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (11,000, 16,920, 22,000), stdev = 2,361
  CI (99.9%): [423,000, 423,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.time":
  341423,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (10772,000, 13656,920, 17778,000), stdev = 1769,219
  CI (99.9%): [341423,000, 341423,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc
# Parameters: (percentageOfHeapToAllocate = P_50)

# Run progress: 33,33% complete, ETA 00:24:02
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,366 ops/s
# Warmup Iteration   2: 0,227 ops/s
# Warmup Iteration   3: 0,232 ops/s
# Warmup Iteration   4: 0,447 ops/s
# Warmup Iteration   5: 0,512 ops/s
Iteration   1: 0,265 ops/s
                 Â·gc.alloc.rate:      367,857 MB/sec
                 Â·gc.alloc.rate.norm: 1286308051,200 B/op
                 Â·gc.count:           14,000 counts
                 Â·gc.time:            16380,000 ms

Iteration   2: 0,483 ops/s
                 Â·gc.alloc.rate:      255,130 MB/sec
                 Â·gc.alloc.rate.norm: 1286308100,000 B/op
                 Â·gc.count:           13,000 counts
                 Â·gc.time:            19037,000 ms

Iteration   3: 0,266 ops/s
                 Â·gc.alloc.rate:      410,678 MB/sec
                 Â·gc.alloc.rate.norm: 1286308051,200 B/op
                 Â·gc.count:           13,000 counts
                 Â·gc.time:            14642,000 ms

Iteration   4: 0,182 ops/s
                 Â·gc.alloc.rate:      258,259 MB/sec
                 Â·gc.alloc.rate.norm: 1286310212,800 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            23456,000 ms

Iteration   5: 0,456 ops/s
                 Â·gc.alloc.rate:      328,363 MB/sec
                 Â·gc.alloc.rate.norm: 1286308100,000 B/op
                 Â·gc.count:           11,000 counts
                 Â·gc.time:            14747,000 ms


# Run progress: 40,00% complete, ETA 00:22:36
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,229 ops/s
# Warmup Iteration   2: 0,544 ops/s
# Warmup Iteration   3: 0,264 ops/s
# Warmup Iteration   4: 0,190 ops/s
# Warmup Iteration   5: 0,472 ops/s
Iteration   1: 0,271 ops/s
                 Â·gc.alloc.rate:      411,283 MB/sec
                 Â·gc.alloc.rate.norm: 1286308051,200 B/op
                 Â·gc.count:           13,000 counts
                 Â·gc.time:            14619,000 ms

Iteration   2: 0,190 ops/s
                 Â·gc.alloc.rate:      232,145 MB/sec
                 Â·gc.alloc.rate.norm: 1286308108,000 B/op
                 Â·gc.count:           13,000 counts
                 Â·gc.time:            20940,000 ms

Iteration   3: 0,279 ops/s
                 Â·gc.alloc.rate:      411,319 MB/sec
                 Â·gc.alloc.rate.norm: 1286309539,429 B/op
                 Â·gc.count:           18,000 counts
                 Â·gc.time:            20485,000 ms

Iteration   4: 0,490 ops/s
                 Â·gc.alloc.rate:      372,157 MB/sec
                 Â·gc.alloc.rate.norm: 1286308051,200 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            16188,000 ms

Iteration   5: 0,285 ops/s
                 Â·gc.alloc.rate:      433,123 MB/sec
                 Â·gc.alloc.rate.norm: 1286308051,200 B/op
                 Â·gc.count:           13,000 counts
                 Â·gc.time:            13868,000 ms


# Run progress: 46,67% complete, ETA 00:20:49
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,267 ops/s
# Warmup Iteration   2: 0,408 ops/s
# Warmup Iteration   3: 0,281 ops/s
# Warmup Iteration   4: 0,230 ops/s
# Warmup Iteration   5: 0,456 ops/s
Iteration   1: 0,207 ops/s
                 Â·gc.alloc.rate:      352,956 MB/sec
                 Â·gc.alloc.rate.norm: 1286308051,200 B/op
                 Â·gc.count:           13,000 counts
                 Â·gc.time:            17084,000 ms

Iteration   2: 0,189 ops/s
                 Â·gc.alloc.rate:      267,456 MB/sec
                 Â·gc.alloc.rate.norm: 1286308051,200 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            22640,000 ms

Iteration   3: 0,332 ops/s
                 Â·gc.alloc.rate:      311,649 MB/sec
                 Â·gc.alloc.rate.norm: 1286308051,200 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            19388,000 ms

Iteration   4: 0,287 ops/s
                 Â·gc.alloc.rate:      432,789 MB/sec
                 Â·gc.alloc.rate.norm: 1286310212,800 B/op
                 Â·gc.count:           13,000 counts
                 Â·gc.time:            13879,000 ms

Iteration   5: 0,185 ops/s
                 Â·gc.alloc.rate:      264,850 MB/sec
                 Â·gc.alloc.rate.norm: 1286308051,200 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            22866,000 ms


# Run progress: 53,33% complete, ETA 00:18:40
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,267 ops/s
# Warmup Iteration   2: 0,452 ops/s
# Warmup Iteration   3: 0,271 ops/s
# Warmup Iteration   4: 0,186 ops/s
# Warmup Iteration   5: 0,474 ops/s
Iteration   1: 0,324 ops/s
                 Â·gc.alloc.rate:      443,952 MB/sec
                 Â·gc.alloc.rate.norm: 1286307995,429 B/op
                 Â·gc.count:           18,000 counts
                 Â·gc.time:            18952,000 ms

Iteration   2: 0,198 ops/s
                 Â·gc.alloc.rate:      240,893 MB/sec
                 Â·gc.alloc.rate.norm: 1286308100,000 B/op
                 Â·gc.count:           13,000 counts
                 Â·gc.time:            20174,000 ms

Iteration   3: 0,300 ops/s
                 Â·gc.alloc.rate:      481,650 MB/sec
                 Â·gc.alloc.rate.norm: 1286308051,200 B/op
                 Â·gc.count:           12,000 counts
                 Â·gc.time:            12445,000 ms

Iteration   4: 0,191 ops/s
                 Â·gc.alloc.rate:      230,741 MB/sec
                 Â·gc.alloc.rate.norm: 1286310802,000 B/op
                 Â·gc.count:           13,000 counts
                 Â·gc.time:            21066,000 ms

Iteration   5: 0,299 ops/s
                 Â·gc.alloc.rate:      493,896 MB/sec
                 Â·gc.alloc.rate.norm: 1286308051,200 B/op
                 Â·gc.count:           12,000 counts
                 Â·gc.time:            12125,000 ms


# Run progress: 60,00% complete, ETA 00:16:18
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,272 ops/s
# Warmup Iteration   2: 0,538 ops/s
# Warmup Iteration   3: 0,287 ops/s
# Warmup Iteration   4: 0,216 ops/s
# Warmup Iteration   5: 0,470 ops/s
Iteration   1: 0,269 ops/s
                 Â·gc.alloc.rate:      437,752 MB/sec
                 Â·gc.alloc.rate.norm: 1286308051,200 B/op
                 Â·gc.count:           13,000 counts
                 Â·gc.time:            13721,000 ms

Iteration   2: 0,196 ops/s
                 Â·gc.alloc.rate:      275,614 MB/sec
                 Â·gc.alloc.rate.norm: 1286308051,200 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            21964,000 ms

Iteration   3: 0,469 ops/s
                 Â·gc.alloc.rate:      360,603 MB/sec
                 Â·gc.alloc.rate.norm: 1286308051,200 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            16717,000 ms

Iteration   4: 0,274 ops/s
                 Â·gc.alloc.rate:      416,848 MB/sec
                 Â·gc.alloc.rate.norm: 1286310212,800 B/op
                 Â·gc.count:           13,000 counts
                 Â·gc.time:            14421,000 ms

Iteration   5: 0,195 ops/s
                 Â·gc.alloc.rate:      275,446 MB/sec
                 Â·gc.alloc.rate.norm: 1286308051,200 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            21977,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc":
  0,283 Â±(99.9%) 0,073 ops/s [Average]
  (min, avg, max) = (0,182, 0,283, 0,490), stdev = 0,097
  CI (99.9%): [0,210, 0,356] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate":
  350,696 Â±(99.9%) 62,941 MB/sec [Average]
  (min, avg, max) = (230,741, 350,696, 493,896), stdev = 84,024
  CI (99.9%): [287,756, 413,637] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate.norm":
  1286308486,050 Â±(99.9%) 667,994 B/op [Average]
  (min, avg, max) = (1286307995,429, 1286308486,050, 1286310802,000), stdev = 891,753
  CI (99.9%): [1286307818,056, 1286309154,045] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.count":
  348,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (11,000, 13,920, 18,000), stdev = 1,681
  CI (99.9%): [348,000, 348,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.time":
  443781,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (12125,000, 17751,240, 23456,000), stdev = 3594,226
  CI (99.9%): [443781,000, 443781,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc
# Parameters: (percentageOfHeapToAllocate = P_75)

# Run progress: 66,67% complete, ETA 00:13:41
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,179 ops/s
# Warmup Iteration   2: <failure>

java.lang.OutOfMemoryError: GC overhead limit exceeded
	at com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.createInstance(BurstHeapMemoryAllocatorBenchmark.java:110)
	at com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.allocate(BurstHeapMemoryAllocatorBenchmark.java:103)
	at com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc(BurstHeapMemoryAllocatorBenchmark.java:94)
	at com.ionutbalosin.jvm.performance.benchmarks.micro.gc.jmh_generated.BurstHeapMemoryAllocatorBenchmark_gc_jmhTest.gc_Throughput(BurstHeapMemoryAllocatorBenchmark_gc_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)


Benchmark had encountered error, and fail on error was requested

Running BurstHeapMemoryAllocatorBenchmark benchmark ...
java  -jar benchmarks/target/benchmarks.jar .*BurstHeapMemoryAllocatorBenchmark.* -foe true -wi 5 -w 10 -i 5 -r 10 -f 5 -rf csv -rff results/jdk-17/arm64/openjdk-hotspot-vm/BurstHeapMemoryAllocatorBenchmark_g1GC_1thread.csv -t 1 -prof gc -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseG1GC"

# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc
# Parameters: (percentageOfHeapToAllocate = P_25)

# Run progress: 0,00% complete, ETA 00:25:00
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
2,183 ops/s
# Warmup Iteration   2: 2,064 ops/s
# Warmup Iteration   3: 2,038 ops/s
# Warmup Iteration   4: 2,070 ops/s
# Warmup Iteration   5: 2,054 ops/s
Iteration   1: 2,021 ops/s
                 Â·gc.alloc.rate:      2587,235 MB/sec
                 Â·gc.alloc.rate.norm: 1342177315,429 B/op
                 Â·gc.count:           104,000 counts
                 Â·gc.time:            6988,000 ms

Iteration   2: 2,081 ops/s
                 Â·gc.alloc.rate:      2663,273 MB/sec
                 Â·gc.alloc.rate.norm: 1342177315,429 B/op
                 Â·gc.count:           94,000 counts
                 Â·gc.time:            6727,000 ms

Iteration   3: 2,057 ops/s
                 Â·gc.alloc.rate:      2633,222 MB/sec
                 Â·gc.alloc.rate.norm: 1342177315,429 B/op
                 Â·gc.count:           107,000 counts
                 Â·gc.time:            6815,000 ms

Iteration   4: 2,031 ops/s
                 Â·gc.alloc.rate:      2599,916 MB/sec
                 Â·gc.alloc.rate.norm: 1342177316,952 B/op
                 Â·gc.count:           103,000 counts
                 Â·gc.time:            6970,000 ms

Iteration   5: 2,087 ops/s
                 Â·gc.alloc.rate:      2671,066 MB/sec
                 Â·gc.alloc.rate.norm: 1342177318,476 B/op
                 Â·gc.count:           106,000 counts
                 Â·gc.time:            6662,000 ms


# Run progress: 6,67% complete, ETA 00:25:08
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
2,189 ops/s
# Warmup Iteration   2: 2,050 ops/s
# Warmup Iteration   3: 2,053 ops/s
# Warmup Iteration   4: 2,082 ops/s
# Warmup Iteration   5: 2,080 ops/s
Iteration   1: 2,087 ops/s
                 Â·gc.alloc.rate:      2670,983 MB/sec
                 Â·gc.alloc.rate.norm: 1342177315,429 B/op
                 Â·gc.count:           103,000 counts
                 Â·gc.time:            6757,000 ms

Iteration   2: 2,016 ops/s
                 Â·gc.alloc.rate:      2581,037 MB/sec
                 Â·gc.alloc.rate.norm: 1342177315,429 B/op
                 Â·gc.count:           119,000 counts
                 Â·gc.time:            7220,000 ms

Iteration   3: 2,079 ops/s
                 Â·gc.alloc.rate:      2661,524 MB/sec
                 Â·gc.alloc.rate.norm: 1342177315,429 B/op
                 Â·gc.count:           99,000 counts
                 Â·gc.time:            6770,000 ms

Iteration   4: 2,057 ops/s
                 Â·gc.alloc.rate:      2633,006 MB/sec
                 Â·gc.alloc.rate.norm: 1342177316,952 B/op
                 Â·gc.count:           100,000 counts
                 Â·gc.time:            6958,000 ms

Iteration   5: 2,114 ops/s
                 Â·gc.alloc.rate:      2705,594 MB/sec
                 Â·gc.alloc.rate.norm: 1342177316,000 B/op
                 Â·gc.count:           94,000 counts
                 Â·gc.time:            7083,000 ms


# Run progress: 13,33% complete, ETA 00:23:22
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
2,194 ops/s
# Warmup Iteration   2: 2,078 ops/s
# Warmup Iteration   3: 2,067 ops/s
# Warmup Iteration   4: 2,093 ops/s
# Warmup Iteration   5: 2,015 ops/s
Iteration   1: 2,173 ops/s
                 Â·gc.alloc.rate:      2781,087 MB/sec
                 Â·gc.alloc.rate.norm: 1342177314,545 B/op
                 Â·gc.count:           89,000 counts
                 Â·gc.time:            6820,000 ms

Iteration   2: 2,052 ops/s
                 Â·gc.alloc.rate:      2626,542 MB/sec
                 Â·gc.alloc.rate.norm: 1342177315,429 B/op
                 Â·gc.count:           111,000 counts
                 Â·gc.time:            6866,000 ms

Iteration   3: 2,076 ops/s
                 Â·gc.alloc.rate:      2656,889 MB/sec
                 Â·gc.alloc.rate.norm: 1342177315,429 B/op
                 Â·gc.count:           99,000 counts
                 Â·gc.time:            6919,000 ms

Iteration   4: 2,046 ops/s
                 Â·gc.alloc.rate:      2618,407 MB/sec
                 Â·gc.alloc.rate.norm: 1342177316,000 B/op
                 Â·gc.count:           114,000 counts
                 Â·gc.time:            7199,000 ms

Iteration   5: 2,156 ops/s
                 Â·gc.alloc.rate:      2759,484 MB/sec
                 Â·gc.alloc.rate.norm: 1342177316,000 B/op
                 Â·gc.count:           88,000 counts
                 Â·gc.time:            6884,000 ms


# Run progress: 20,00% complete, ETA 00:21:24
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
2,196 ops/s
# Warmup Iteration   2: 2,081 ops/s
# Warmup Iteration   3: 2,056 ops/s
# Warmup Iteration   4: 2,080 ops/s
# Warmup Iteration   5: 2,086 ops/s
Iteration   1: 2,020 ops/s
                 Â·gc.alloc.rate:      2585,155 MB/sec
                 Â·gc.alloc.rate.norm: 1342177315,429 B/op
                 Â·gc.count:           104,000 counts
                 Â·gc.time:            6966,000 ms

Iteration   2: 2,039 ops/s
                 Â·gc.alloc.rate:      2610,143 MB/sec
                 Â·gc.alloc.rate.norm: 1342177318,476 B/op
                 Â·gc.count:           129,000 counts
                 Â·gc.time:            7103,000 ms

Iteration   3: 2,100 ops/s
                 Â·gc.alloc.rate:      2687,976 MB/sec
                 Â·gc.alloc.rate.norm: 1342177314,545 B/op
                 Â·gc.count:           102,000 counts
                 Â·gc.time:            7132,000 ms

Iteration   4: 2,063 ops/s
                 Â·gc.alloc.rate:      2640,075 MB/sec
                 Â·gc.alloc.rate.norm: 1342177318,476 B/op
                 Â·gc.count:           102,000 counts
                 Â·gc.time:            6949,000 ms

Iteration   5: 2,088 ops/s
                 Â·gc.alloc.rate:      2672,961 MB/sec
                 Â·gc.alloc.rate.norm: 1342177316,000 B/op
                 Â·gc.count:           107,000 counts
                 Â·gc.time:            7191,000 ms


# Run progress: 26,67% complete, ETA 00:19:41
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
2,193 ops/s
# Warmup Iteration   2: 2,070 ops/s
# Warmup Iteration   3: 2,079 ops/s
# Warmup Iteration   4: 2,082 ops/s
# Warmup Iteration   5: 2,091 ops/s
Iteration   1: 2,053 ops/s
                 Â·gc.alloc.rate:      2627,173 MB/sec
                 Â·gc.alloc.rate.norm: 1342177315,429 B/op
                 Â·gc.count:           102,000 counts
                 Â·gc.time:            6904,000 ms

Iteration   2: 2,053 ops/s
                 Â·gc.alloc.rate:      2627,728 MB/sec
                 Â·gc.alloc.rate.norm: 1342177315,429 B/op
                 Â·gc.count:           103,000 counts
                 Â·gc.time:            6841,000 ms

Iteration   3: 2,082 ops/s
                 Â·gc.alloc.rate:      2665,169 MB/sec
                 Â·gc.alloc.rate.norm: 1342177314,545 B/op
                 Â·gc.count:           104,000 counts
                 Â·gc.time:            7038,000 ms

Iteration   4: 2,068 ops/s
                 Â·gc.alloc.rate:      2647,000 MB/sec
                 Â·gc.alloc.rate.norm: 1342177317,455 B/op
                 Â·gc.count:           108,000 counts
                 Â·gc.time:            7099,000 ms

Iteration   5: 2,067 ops/s
                 Â·gc.alloc.rate:      2645,980 MB/sec
                 Â·gc.alloc.rate.norm: 1342177316,952 B/op
                 Â·gc.count:           102,000 counts
                 Â·gc.time:            6843,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc":
  2,071 Â±(99.9%) 0,028 ops/s [Average]
  (min, avg, max) = (2,016, 2,071, 2,173), stdev = 0,038
  CI (99.9%): [2,042, 2,099] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate":
  2650,345 Â±(99.9%) 36,169 MB/sec [Average]
  (min, avg, max) = (2581,037, 2650,345, 2781,087), stdev = 48,285
  CI (99.9%): [2614,176, 2686,514] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate.norm":
  1342177316,044 Â±(99.9%) 0,880 B/op [Average]
  (min, avg, max) = (1342177314,545, 1342177316,044, 1342177318,476), stdev = 1,175
  CI (99.9%): [1342177315,164, 1342177316,924] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.count":
  2593,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (88,000, 103,720, 129,000), stdev = 8,663
  CI (99.9%): [2593,000, 2593,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.time":
  173704,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (6662,000, 6948,160, 7220,000), stdev = 154,717
  CI (99.9%): [173704,000, 173704,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc
# Parameters: (percentageOfHeapToAllocate = P_50)

# Run progress: 33,33% complete, ETA 00:17:47
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,998 ops/s
# Warmup Iteration   2: 1,026 ops/s
# Warmup Iteration   3: 1,026 ops/s
# Warmup Iteration   4: 0,950 ops/s
# Warmup Iteration   5: 0,953 ops/s
Iteration   1: 0,986 ops/s
                 Â·gc.alloc.rate:      2522,968 MB/sec
                 Â·gc.alloc.rate.norm: 2684354623,200 B/op
                 Â·gc.count:           116,000 counts
                 Â·gc.time:            6889,000 ms

Iteration   2: 0,986 ops/s
                 Â·gc.alloc.rate:      2525,202 MB/sec
                 Â·gc.alloc.rate.norm: 2684354616,800 B/op
                 Â·gc.count:           106,000 counts
                 Â·gc.time:            6792,000 ms

Iteration   3: 0,974 ops/s
                 Â·gc.alloc.rate:      2492,422 MB/sec
                 Â·gc.alloc.rate.norm: 2684354616,800 B/op
                 Â·gc.count:           114,000 counts
                 Â·gc.time:            6916,000 ms

Iteration   4: 0,960 ops/s
                 Â·gc.alloc.rate:      2456,380 MB/sec
                 Â·gc.alloc.rate.norm: 2684354620,000 B/op
                 Â·gc.count:           111,000 counts
                 Â·gc.time:            7129,000 ms

Iteration   5: 0,986 ops/s
                 Â·gc.alloc.rate:      2523,707 MB/sec
                 Â·gc.alloc.rate.norm: 2684354620,000 B/op
                 Â·gc.count:           113,000 counts
                 Â·gc.time:            6866,000 ms


# Run progress: 40,00% complete, ETA 00:16:02
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
1,025 ops/s
# Warmup Iteration   2: 1,021 ops/s
# Warmup Iteration   3: 0,977 ops/s
# Warmup Iteration   4: 1,011 ops/s
# Warmup Iteration   5: 0,965 ops/s
Iteration   1: 0,987 ops/s
                 Â·gc.alloc.rate:      2527,431 MB/sec
                 Â·gc.alloc.rate.norm: 2684354613,091 B/op
                 Â·gc.count:           118,000 counts
                 Â·gc.time:            7373,000 ms

Iteration   2: 1,004 ops/s
                 Â·gc.alloc.rate:      2569,752 MB/sec
                 Â·gc.alloc.rate.norm: 2684354613,091 B/op
                 Â·gc.count:           108,000 counts
                 Â·gc.time:            7217,000 ms

Iteration   3: 0,994 ops/s
                 Â·gc.alloc.rate:      2545,023 MB/sec
                 Â·gc.alloc.rate.norm: 2684354616,800 B/op
                 Â·gc.count:           105,000 counts
                 Â·gc.time:            6704,000 ms

Iteration   4: 0,998 ops/s
                 Â·gc.alloc.rate:      2553,808 MB/sec
                 Â·gc.alloc.rate.norm: 2684354620,000 B/op
                 Â·gc.count:           103,000 counts
                 Â·gc.time:            6658,000 ms

Iteration   5: 0,966 ops/s
                 Â·gc.alloc.rate:      2472,164 MB/sec
                 Â·gc.alloc.rate.norm: 2684354620,000 B/op
                 Â·gc.count:           119,000 counts
                 Â·gc.time:            6984,000 ms


# Run progress: 46,67% complete, ETA 00:14:16
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,972 ops/s
# Warmup Iteration   2: 0,991 ops/s
# Warmup Iteration   3: 1,031 ops/s
# Warmup Iteration   4: 1,019 ops/s
# Warmup Iteration   5: 0,947 ops/s
Iteration   1: 0,990 ops/s
                 Â·gc.alloc.rate:      2535,179 MB/sec
                 Â·gc.alloc.rate.norm: 2684354616,800 B/op
                 Â·gc.count:           97,000 counts
                 Â·gc.time:            6612,000 ms

Iteration   2: 0,977 ops/s
                 Â·gc.alloc.rate:      2501,404 MB/sec
                 Â·gc.alloc.rate.norm: 2684354623,200 B/op
                 Â·gc.count:           106,000 counts
                 Â·gc.time:            6815,000 ms

Iteration   3: 0,998 ops/s
                 Â·gc.alloc.rate:      2554,730 MB/sec
                 Â·gc.alloc.rate.norm: 2684354616,800 B/op
                 Â·gc.count:           98,000 counts
                 Â·gc.time:            6612,000 ms

Iteration   4: 0,968 ops/s
                 Â·gc.alloc.rate:      2477,864 MB/sec
                 Â·gc.alloc.rate.norm: 2684354623,200 B/op
                 Â·gc.count:           104,000 counts
                 Â·gc.time:            6874,000 ms

Iteration   5: 0,986 ops/s
                 Â·gc.alloc.rate:      2524,778 MB/sec
                 Â·gc.alloc.rate.norm: 2684354618,909 B/op
                 Â·gc.count:           113,000 counts
                 Â·gc.time:            7412,000 ms


# Run progress: 53,33% complete, ETA 00:12:29
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,997 ops/s
# Warmup Iteration   2: 1,009 ops/s
# Warmup Iteration   3: 0,976 ops/s
# Warmup Iteration   4: 0,983 ops/s
# Warmup Iteration   5: 0,987 ops/s
Iteration   1: 0,981 ops/s
                 Â·gc.alloc.rate:      2511,632 MB/sec
                 Â·gc.alloc.rate.norm: 2684354616,800 B/op
                 Â·gc.count:           107,000 counts
                 Â·gc.time:            6835,000 ms

Iteration   2: 0,972 ops/s
                 Â·gc.alloc.rate:      2487,645 MB/sec
                 Â·gc.alloc.rate.norm: 2684354623,200 B/op
                 Â·gc.count:           109,000 counts
                 Â·gc.time:            6925,000 ms

Iteration   3: 0,989 ops/s
                 Â·gc.alloc.rate:      2532,535 MB/sec
                 Â·gc.alloc.rate.norm: 2684354618,909 B/op
                 Â·gc.count:           115,000 counts
                 Â·gc.time:            7420,000 ms

Iteration   4: 0,991 ops/s
                 Â·gc.alloc.rate:      2535,669 MB/sec
                 Â·gc.alloc.rate.norm: 2684354620,000 B/op
                 Â·gc.count:           106,000 counts
                 Â·gc.time:            6684,000 ms

Iteration   5: 0,928 ops/s
                 Â·gc.alloc.rate:      2376,820 MB/sec
                 Â·gc.alloc.rate.norm: 2684354620,000 B/op
                 Â·gc.count:           122,000 counts
                 Â·gc.time:            7268,000 ms


# Run progress: 60,00% complete, ETA 00:10:43
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,985 ops/s
# Warmup Iteration   2: 1,026 ops/s
# Warmup Iteration   3: 1,033 ops/s
# Warmup Iteration   4: 0,965 ops/s
# Warmup Iteration   5: 1,009 ops/s
Iteration   1: 0,967 ops/s
                 Â·gc.alloc.rate:      2474,681 MB/sec
                 Â·gc.alloc.rate.norm: 2684354623,200 B/op
                 Â·gc.count:           111,000 counts
                 Â·gc.time:            6903,000 ms

Iteration   2: 0,971 ops/s
                 Â·gc.alloc.rate:      2485,572 MB/sec
                 Â·gc.alloc.rate.norm: 2684354616,800 B/op
                 Â·gc.count:           114,000 counts
                 Â·gc.time:            7007,000 ms

Iteration   3: 0,944 ops/s
                 Â·gc.alloc.rate:      2416,033 MB/sec
                 Â·gc.alloc.rate.norm: 2684354620,000 B/op
                 Â·gc.count:           114,000 counts
                 Â·gc.time:            7121,000 ms

Iteration   4: 0,979 ops/s
                 Â·gc.alloc.rate:      2506,142 MB/sec
                 Â·gc.alloc.rate.norm: 2684354620,000 B/op
                 Â·gc.count:           111,000 counts
                 Â·gc.time:            6862,000 ms

Iteration   5: 0,978 ops/s
                 Â·gc.alloc.rate:      2503,356 MB/sec
                 Â·gc.alloc.rate.norm: 2684354620,000 B/op
                 Â·gc.count:           105,000 counts
                 Â·gc.time:            6786,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc":
  0,978 Â±(99.9%) 0,013 ops/s [Average]
  (min, avg, max) = (0,928, 0,978, 1,004), stdev = 0,017
  CI (99.9%): [0,966, 0,991] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate":
  2504,516 Â±(99.9%) 32,641 MB/sec [Average]
  (min, avg, max) = (2376,820, 2504,516, 2569,752), stdev = 43,574
  CI (99.9%): [2471,875, 2537,157] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate.norm":
  2684354619,104 Â±(99.9%) 2,166 B/op [Average]
  (min, avg, max) = (2684354613,091, 2684354619,104, 2684354623,200), stdev = 2,892
  CI (99.9%): [2684354616,938, 2684354621,270] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.count":
  2745,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (97,000, 109,800, 122,000), stdev = 6,218
  CI (99.9%): [2745,000, 2745,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.time":
  173664,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (6612,000, 6946,560, 7420,000), stdev = 242,186
  CI (99.9%): [173664,000, 173664,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc
# Parameters: (percentageOfHeapToAllocate = P_75)

# Run progress: 66,67% complete, ETA 00:08:58
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,751 ops/s
# Warmup Iteration   2: 0,727 ops/s
# Warmup Iteration   3: 0,729 ops/s
# Warmup Iteration   4: 0,726 ops/s
# Warmup Iteration   5: 0,726 ops/s
Iteration   1: 0,729 ops/s
                 Â·gc.alloc.rate:      2799,140 MB/sec
                 Â·gc.alloc.rate.norm: 4026531907,000 B/op
                 Â·gc.count:           80,000 counts
                 Â·gc.time:            7161,000 ms

Iteration   2: 0,727 ops/s
                 Â·gc.alloc.rate:      2792,539 MB/sec
                 Â·gc.alloc.rate.norm: 4026531907,000 B/op
                 Â·gc.count:           80,000 counts
                 Â·gc.time:            7188,000 ms

Iteration   3: 0,728 ops/s
                 Â·gc.alloc.rate:      2795,085 MB/sec
                 Â·gc.alloc.rate.norm: 4026531907,000 B/op
                 Â·gc.count:           80,000 counts
                 Â·gc.time:            7175,000 ms

Iteration   4: 0,728 ops/s
                 Â·gc.alloc.rate:      2796,953 MB/sec
                 Â·gc.alloc.rate.norm: 4026531911,000 B/op
                 Â·gc.count:           80,000 counts
                 Â·gc.time:            7170,000 ms

Iteration   5: 0,729 ops/s
                 Â·gc.alloc.rate:      2797,982 MB/sec
                 Â·gc.alloc.rate.norm: 4026531911,000 B/op
                 Â·gc.count:           80,000 counts
                 Â·gc.time:            7168,000 ms


# Run progress: 73,33% complete, ETA 00:07:14
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,751 ops/s
# Warmup Iteration   2: 0,727 ops/s
# Warmup Iteration   3: 0,731 ops/s
# Warmup Iteration   4: 0,728 ops/s
# Warmup Iteration   5: 0,729 ops/s
Iteration   1: 0,729 ops/s
                 Â·gc.alloc.rate:      2797,993 MB/sec
                 Â·gc.alloc.rate.norm: 4026531907,000 B/op
                 Â·gc.count:           80,000 counts
                 Â·gc.time:            7164,000 ms

Iteration   2: 0,731 ops/s
                 Â·gc.alloc.rate:      2805,225 MB/sec
                 Â·gc.alloc.rate.norm: 4026531907,000 B/op
                 Â·gc.count:           80,000 counts
                 Â·gc.time:            7143,000 ms

Iteration   3: 0,729 ops/s
                 Â·gc.alloc.rate:      2800,742 MB/sec
                 Â·gc.alloc.rate.norm: 4026531907,000 B/op
                 Â·gc.count:           80,000 counts
                 Â·gc.time:            7162,000 ms

Iteration   4: 0,730 ops/s
                 Â·gc.alloc.rate:      2801,510 MB/sec
                 Â·gc.alloc.rate.norm: 4026531915,000 B/op
                 Â·gc.count:           80,000 counts
                 Â·gc.time:            7154,000 ms

Iteration   5: 0,728 ops/s
                 Â·gc.alloc.rate:      2797,011 MB/sec
                 Â·gc.alloc.rate.norm: 4026531911,000 B/op
                 Â·gc.count:           80,000 counts
                 Â·gc.time:            7174,000 ms


# Run progress: 80,00% complete, ETA 00:05:27
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,749 ops/s
# Warmup Iteration   2: 0,728 ops/s
# Warmup Iteration   3: 0,721 ops/s
# Warmup Iteration   4: 0,705 ops/s
# Warmup Iteration   5: 0,710 ops/s
Iteration   1: 0,712 ops/s
                 Â·gc.alloc.rate:      2734,715 MB/sec
                 Â·gc.alloc.rate.norm: 4026531907,000 B/op
                 Â·gc.count:           80,000 counts
                 Â·gc.time:            7437,000 ms

Iteration   2: 0,708 ops/s
                 Â·gc.alloc.rate:      2718,348 MB/sec
                 Â·gc.alloc.rate.norm: 4026531907,000 B/op
                 Â·gc.count:           80,000 counts
                 Â·gc.time:            7496,000 ms

Iteration   3: 0,711 ops/s
                 Â·gc.alloc.rate:      2729,241 MB/sec
                 Â·gc.alloc.rate.norm: 4026531907,000 B/op
                 Â·gc.count:           80,000 counts
                 Â·gc.time:            7463,000 ms

Iteration   4: 0,708 ops/s
                 Â·gc.alloc.rate:      2716,874 MB/sec
                 Â·gc.alloc.rate.norm: 4026531907,000 B/op
                 Â·gc.count:           80,000 counts
                 Â·gc.time:            7512,000 ms

Iteration   5: 0,713 ops/s
                 Â·gc.alloc.rate:      2736,525 MB/sec
                 Â·gc.alloc.rate.norm: 4026531907,000 B/op
                 Â·gc.count:           80,000 counts
                 Â·gc.time:            7430,000 ms


# Run progress: 86,67% complete, ETA 00:03:40
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,746 ops/s
# Warmup Iteration   2: 0,712 ops/s
# Warmup Iteration   3: 0,708 ops/s
# Warmup Iteration   4: 0,709 ops/s
# Warmup Iteration   5: 0,704 ops/s
Iteration   1: 0,707 ops/s
                 Â·gc.alloc.rate:      2716,630 MB/sec
                 Â·gc.alloc.rate.norm: 4026531907,000 B/op
                 Â·gc.count:           80,000 counts
                 Â·gc.time:            7514,000 ms

Iteration   2: 0,717 ops/s
                 Â·gc.alloc.rate:      2751,543 MB/sec
                 Â·gc.alloc.rate.norm: 4026531907,000 B/op
                 Â·gc.count:           80,000 counts
                 Â·gc.time:            7362,000 ms

Iteration   3: 0,705 ops/s
                 Â·gc.alloc.rate:      2706,610 MB/sec
                 Â·gc.alloc.rate.norm: 4026531907,000 B/op
                 Â·gc.count:           80,000 counts
                 Â·gc.time:            7550,000 ms

Iteration   4: 0,711 ops/s
                 Â·gc.alloc.rate:      2730,241 MB/sec
                 Â·gc.alloc.rate.norm: 4026531907,000 B/op
                 Â·gc.count:           80,000 counts
                 Â·gc.time:            7455,000 ms

Iteration   5: 0,711 ops/s
                 Â·gc.alloc.rate:      2730,401 MB/sec
                 Â·gc.alloc.rate.norm: 4026531907,000 B/op
                 Â·gc.count:           80,000 counts
                 Â·gc.time:            7452,000 ms


# Run progress: 93,33% complete, ETA 00:01:50
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,740 ops/s
# Warmup Iteration   2: 0,712 ops/s
# Warmup Iteration   3: 0,708 ops/s
# Warmup Iteration   4: 0,710 ops/s
# Warmup Iteration   5: 0,708 ops/s
Iteration   1: 0,708 ops/s
                 Â·gc.alloc.rate:      2720,449 MB/sec
                 Â·gc.alloc.rate.norm: 4026531911,000 B/op
                 Â·gc.count:           80,000 counts
                 Â·gc.time:            7499,000 ms

Iteration   2: 0,710 ops/s
                 Â·gc.alloc.rate:      2727,484 MB/sec
                 Â·gc.alloc.rate.norm: 4026531907,000 B/op
                 Â·gc.count:           80,000 counts
                 Â·gc.time:            7467,000 ms

Iteration   3: 0,711 ops/s
                 Â·gc.alloc.rate:      2729,407 MB/sec
                 Â·gc.alloc.rate.norm: 4026531907,000 B/op
                 Â·gc.count:           80,000 counts
                 Â·gc.time:            7460,000 ms

Iteration   4: 0,712 ops/s
                 Â·gc.alloc.rate:      2733,860 MB/sec
                 Â·gc.alloc.rate.norm: 4026531907,000 B/op
                 Â·gc.count:           80,000 counts
                 Â·gc.time:            7438,000 ms

Iteration   5: 0,718 ops/s
                 Â·gc.alloc.rate:      2755,242 MB/sec
                 Â·gc.alloc.rate.norm: 4026531911,000 B/op
                 Â·gc.count:           80,000 counts
                 Â·gc.time:            7350,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc":
  0,718 Â±(99.9%) 0,007 ops/s [Average]
  (min, avg, max) = (0,705, 0,718, 0,731), stdev = 0,009
  CI (99.9%): [0,711, 0,725] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate":
  2756,870 Â±(99.9%) 27,002 MB/sec [Average]
  (min, avg, max) = (2706,610, 2756,870, 2805,225), stdev = 36,047
  CI (99.9%): [2729,868, 2783,872] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate.norm":
  4026531908,120 Â±(99.9%) 1,623 B/op [Average]
  (min, avg, max) = (4026531907,000, 4026531908,120, 4026531915,000), stdev = 2,166
  CI (99.9%): [4026531906,497, 4026531909,743] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.count":
  2000,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (80,000, 80,000, 80,000), stdev = 0,001
  CI (99.9%): [2000,000, 2000,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.time":
  183544,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (7143,000, 7341,760, 7550,000), stdev = 152,356
  CI (99.9%): [183544,000, 183544,000] (assumes normal distribution)


# Run complete. Total time: 00:27:51

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                 (percentageOfHeapToAllocate)   Mode  Cnt           Score    Error   Units
BurstHeapMemoryAllocatorBenchmark.gc                                              P_25  thrpt   25           2,071 Â±  0,028   ops/s
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate                               P_25  thrpt   25        2650,345 Â± 36,169  MB/sec
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate.norm                          P_25  thrpt   25  1342177316,044 Â±  0,880    B/op
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.count                                    P_25  thrpt   25        2593,000           counts
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.time                                     P_25  thrpt   25      173704,000               ms
BurstHeapMemoryAllocatorBenchmark.gc                                              P_50  thrpt   25           0,978 Â±  0,013   ops/s
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate                               P_50  thrpt   25        2504,516 Â± 32,641  MB/sec
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate.norm                          P_50  thrpt   25  2684354619,104 Â±  2,166    B/op
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.count                                    P_50  thrpt   25        2745,000           counts
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.time                                     P_50  thrpt   25      173664,000               ms
BurstHeapMemoryAllocatorBenchmark.gc                                              P_75  thrpt   25           0,718 Â±  0,007   ops/s
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate                               P_75  thrpt   25        2756,870 Â± 27,002  MB/sec
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate.norm                          P_75  thrpt   25  4026531908,120 Â±  1,623    B/op
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.count                                    P_75  thrpt   25        2000,000           counts
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.time                                     P_75  thrpt   25      183544,000               ms

Benchmark result is saved to results/jdk-17/arm64/openjdk-hotspot-vm/BurstHeapMemoryAllocatorBenchmark_g1GC_1thread.csv

Running BurstHeapMemoryAllocatorBenchmark benchmark ...
java  -jar benchmarks/target/benchmarks.jar .*BurstHeapMemoryAllocatorBenchmark.* -foe true -wi 5 -w 10 -i 5 -r 10 -f 5 -rf csv -rff results/jdk-17/arm64/openjdk-hotspot-vm/BurstHeapMemoryAllocatorBenchmark_g1GC_2threads.csv -t 2 -prof gc -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseG1GC"

# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc
# Parameters: (percentageOfHeapToAllocate = P_25)

# Run progress: 0,00% complete, ETA 00:25:00
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
4,750 ops/s
# Warmup Iteration   2: 4,627 ops/s
# Warmup Iteration   3: 4,725 ops/s
# Warmup Iteration   4: 4,563 ops/s
# Warmup Iteration   5: 4,574 ops/s
Iteration   1: 4,546 ops/s
                 Â·gc.alloc.rate:      2912,635 MB/sec
                 Â·gc.alloc.rate.norm: 671088676,766 B/op
                 Â·gc.count:           128,000 counts
                 Â·gc.time:            8130,000 ms

Iteration   2: 4,654 ops/s
                 Â·gc.alloc.rate:      2993,767 MB/sec
                 Â·gc.alloc.rate.norm: 671088676,333 B/op
                 Â·gc.count:           120,000 counts
                 Â·gc.time:            8118,000 ms

Iteration   3: 4,607 ops/s
                 Â·gc.alloc.rate:      2927,738 MB/sec
                 Â·gc.alloc.rate.norm: 671088906,723 B/op
                 Â·gc.count:           133,000 counts
                 Â·gc.time:            8155,000 ms

Iteration   4: 4,557 ops/s
                 Â·gc.alloc.rate:      2975,988 MB/sec
                 Â·gc.alloc.rate.norm: 671088675,918 B/op
                 Â·gc.count:           136,000 counts
                 Â·gc.time:            8379,000 ms

Iteration   5: 4,678 ops/s
                 Â·gc.alloc.rate:      2956,662 MB/sec
                 Â·gc.alloc.rate.norm: 671088675,918 B/op
                 Â·gc.count:           117,000 counts
                 Â·gc.time:            8399,000 ms


# Run progress: 6,67% complete, ETA 00:25:46
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
4,716 ops/s
# Warmup Iteration   2: 4,598 ops/s
# Warmup Iteration   3: 4,458 ops/s
# Warmup Iteration   4: 4,594 ops/s
# Warmup Iteration   5: 4,604 ops/s
Iteration   1: 4,468 ops/s
                 Â·gc.alloc.rate:      2907,189 MB/sec
                 Â·gc.alloc.rate.norm: 671088675,918 B/op
                 Â·gc.count:           135,000 counts
                 Â·gc.time:            8414,000 ms

Iteration   2: 4,514 ops/s
                 Â·gc.alloc.rate:      2892,341 MB/sec
                 Â·gc.alloc.rate.norm: 671088676,766 B/op
                 Â·gc.count:           135,000 counts
                 Â·gc.time:            8162,000 ms

Iteration   3: 4,549 ops/s
                 Â·gc.alloc.rate:      2923,840 MB/sec
                 Â·gc.alloc.rate.norm: 671088676,333 B/op
                 Â·gc.count:           124,000 counts
                 Â·gc.time:            8373,000 ms

Iteration   4: 4,769 ops/s
                 Â·gc.alloc.rate:      3099,258 MB/sec
                 Â·gc.alloc.rate.norm: 671088896,490 B/op
                 Â·gc.count:           117,000 counts
                 Â·gc.time:            8113,000 ms

Iteration   5: 4,742 ops/s
                 Â·gc.alloc.rate:      3022,268 MB/sec
                 Â·gc.alloc.rate.norm: 671088675,520 B/op
                 Â·gc.count:           119,000 counts
                 Â·gc.time:            8311,000 ms


# Run progress: 13,33% complete, ETA 00:23:42
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
4,816 ops/s
# Warmup Iteration   2: 4,781 ops/s
# Warmup Iteration   3: 4,664 ops/s
# Warmup Iteration   4: 4,569 ops/s
# Warmup Iteration   5: 4,616 ops/s
Iteration   1: 4,798 ops/s
                 Â·gc.alloc.rate:      3067,379 MB/sec
                 Â·gc.alloc.rate.norm: 671088675,918 B/op
                 Â·gc.count:           112,000 counts
                 Â·gc.time:            8215,000 ms

Iteration   2: 4,611 ops/s
                 Â·gc.alloc.rate:      2968,348 MB/sec
                 Â·gc.alloc.rate.norm: 671088676,333 B/op
                 Â·gc.count:           126,000 counts
                 Â·gc.time:            8266,000 ms

Iteration   3: 4,619 ops/s
                 Â·gc.alloc.rate:      2921,956 MB/sec
                 Â·gc.alloc.rate.norm: 671088676,766 B/op
                 Â·gc.count:           128,000 counts
                 Â·gc.time:            8242,000 ms

Iteration   4: 4,695 ops/s
                 Â·gc.alloc.rate:      3020,138 MB/sec
                 Â·gc.alloc.rate.norm: 671088891,680 B/op
                 Â·gc.count:           133,000 counts
                 Â·gc.time:            8461,000 ms

Iteration   5: 4,609 ops/s
                 Â·gc.alloc.rate:      3001,370 MB/sec
                 Â·gc.alloc.rate.norm: 671088676,800 B/op
                 Â·gc.count:           118,000 counts
                 Â·gc.time:            8478,000 ms


# Run progress: 20,00% complete, ETA 00:21:43
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
4,790 ops/s
# Warmup Iteration   2: 4,756 ops/s
# Warmup Iteration   3: 4,704 ops/s
# Warmup Iteration   4: 4,780 ops/s
# Warmup Iteration   5: 4,588 ops/s
Iteration   1: 4,709 ops/s
                 Â·gc.alloc.rate:      3022,567 MB/sec
                 Â·gc.alloc.rate.norm: 671088675,918 B/op
                 Â·gc.count:           104,000 counts
                 Â·gc.time:            8120,000 ms

Iteration   2: 4,809 ops/s
                 Â·gc.alloc.rate:      3033,010 MB/sec
                 Â·gc.alloc.rate.norm: 671088675,520 B/op
                 Â·gc.count:           114,000 counts
                 Â·gc.time:            8420,000 ms

Iteration   3: 4,697 ops/s
                 Â·gc.alloc.rate:      3033,441 MB/sec
                 Â·gc.alloc.rate.norm: 671088896,490 B/op
                 Â·gc.count:           130,000 counts
                 Â·gc.time:            8267,000 ms

Iteration   4: 4,684 ops/s
                 Â·gc.alloc.rate:      3043,027 MB/sec
                 Â·gc.alloc.rate.norm: 671088675,918 B/op
                 Â·gc.count:           134,000 counts
                 Â·gc.time:            8257,000 ms

Iteration   5: 4,585 ops/s
                 Â·gc.alloc.rate:      2935,050 MB/sec
                 Â·gc.alloc.rate.norm: 671088678,128 B/op
                 Â·gc.count:           126,000 counts
                 Â·gc.time:            8037,000 ms


# Run progress: 26,67% complete, ETA 00:19:47
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
4,931 ops/s
# Warmup Iteration   2: 4,513 ops/s
# Warmup Iteration   3: 4,649 ops/s
# Warmup Iteration   4: 4,703 ops/s
# Warmup Iteration   5: 4,673 ops/s
Iteration   1: 4,839 ops/s
                 Â·gc.alloc.rate:      3056,858 MB/sec
                 Â·gc.alloc.rate.norm: 671088675,137 B/op
                 Â·gc.count:           111,000 counts
                 Â·gc.time:            8559,000 ms

Iteration   2: 4,761 ops/s
                 Â·gc.alloc.rate:      3072,657 MB/sec
                 Â·gc.alloc.rate.norm: 671088675,137 B/op
                 Â·gc.count:           117,000 counts
                 Â·gc.time:            8309,000 ms

Iteration   3: 4,651 ops/s
                 Â·gc.alloc.rate:      2982,518 MB/sec
                 Â·gc.alloc.rate.norm: 671088675,918 B/op
                 Â·gc.count:           116,000 counts
                 Â·gc.time:            8275,000 ms

Iteration   4: 4,832 ops/s
                 Â·gc.alloc.rate:      3096,602 MB/sec
                 Â·gc.alloc.rate.norm: 671088887,059 B/op
                 Â·gc.count:           110,000 counts
                 Â·gc.time:            8387,000 ms

Iteration   5: 4,689 ops/s
                 Â·gc.alloc.rate:      2996,190 MB/sec
                 Â·gc.alloc.rate.norm: 671088675,918 B/op
                 Â·gc.count:           120,000 counts
                 Â·gc.time:            8225,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc":
  4,667 Â±(99.9%) 0,076 ops/s [Average]
  (min, avg, max) = (4,468, 4,667, 4,839), stdev = 0,101
  CI (99.9%): [4,591, 4,743] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate":
  2994,512 Â±(99.9%) 45,856 MB/sec [Average]
  (min, avg, max) = (2892,341, 2994,512, 3099,258), stdev = 61,216
  CI (99.9%): [2948,656, 3040,368] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate.norm":
  671088720,053 Â±(99.9%) 67,178 B/op [Average]
  (min, avg, max) = (671088675,137, 671088720,053, 671088906,723), stdev = 89,680
  CI (99.9%): [671088652,876, 671088787,231] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.count":
  3063,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (104,000, 122,520, 136,000), stdev = 9,088
  CI (99.9%): [3063,000, 3063,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.time":
  207072,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (8037,000, 8282,880, 8559,000), stdev = 134,391
  CI (99.9%): [207072,000, 207072,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc
# Parameters: (percentageOfHeapToAllocate = P_50)

# Run progress: 33,33% complete, ETA 00:17:55
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
2,088 ops/s
# Warmup Iteration   2: 2,052 ops/s
# Warmup Iteration   3: 2,066 ops/s
# Warmup Iteration   4: 2,154 ops/s
# Warmup Iteration   5: 2,030 ops/s
Iteration   1: 2,084 ops/s
                 Â·gc.alloc.rate:      2685,275 MB/sec
                 Â·gc.alloc.rate.norm: 1342177338,435 B/op
                 Â·gc.count:           157,000 counts
                 Â·gc.time:            8487,000 ms

Iteration   2: 2,063 ops/s
                 Â·gc.alloc.rate:      2652,434 MB/sec
                 Â·gc.alloc.rate.norm: 1342177338,435 B/op
                 Â·gc.count:           162,000 counts
                 Â·gc.time:            8651,000 ms

Iteration   3: 2,066 ops/s
                 Â·gc.alloc.rate:      2656,386 MB/sec
                 Â·gc.alloc.rate.norm: 1342177338,435 B/op
                 Â·gc.count:           165,000 counts
                 Â·gc.time:            8616,000 ms

Iteration   4: 2,090 ops/s
                 Â·gc.alloc.rate:      2691,665 MB/sec
                 Â·gc.alloc.rate.norm: 1342177808,348 B/op
                 Â·gc.count:           146,000 counts
                 Â·gc.time:            8479,000 ms

Iteration   5: 2,059 ops/s
                 Â·gc.alloc.rate:      2646,790 MB/sec
                 Â·gc.alloc.rate.norm: 1342177338,435 B/op
                 Â·gc.count:           170,000 counts
                 Â·gc.time:            8685,000 ms


# Run progress: 40,00% complete, ETA 00:16:17
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
2,102 ops/s
# Warmup Iteration   2: 2,004 ops/s
# Warmup Iteration   3: 2,017 ops/s
# Warmup Iteration   4: 2,159 ops/s
# Warmup Iteration   5: 2,080 ops/s
Iteration   1: 2,051 ops/s
                 Â·gc.alloc.rate:      2638,546 MB/sec
                 Â·gc.alloc.rate.norm: 1342177338,435 B/op
                 Â·gc.count:           173,000 counts
                 Â·gc.time:            8680,000 ms

Iteration   2: 2,050 ops/s
                 Â·gc.alloc.rate:      2638,392 MB/sec
                 Â·gc.alloc.rate.norm: 1342177338,435 B/op
                 Â·gc.count:           174,000 counts
                 Â·gc.time:            8702,000 ms

Iteration   3: 2,058 ops/s
                 Â·gc.alloc.rate:      2645,609 MB/sec
                 Â·gc.alloc.rate.norm: 1342177808,348 B/op
                 Â·gc.count:           173,000 counts
                 Â·gc.time:            8648,000 ms

Iteration   4: 2,092 ops/s
                 Â·gc.alloc.rate:      2693,543 MB/sec
                 Â·gc.alloc.rate.norm: 1342177337,043 B/op
                 Â·gc.count:           156,000 counts
                 Â·gc.time:            8552,000 ms

Iteration   5: 2,027 ops/s
                 Â·gc.alloc.rate:      2609,833 MB/sec
                 Â·gc.alloc.rate.norm: 1342177341,217 B/op
                 Â·gc.count:           170,000 counts
                 Â·gc.time:            8829,000 ms


# Run progress: 46,67% complete, ETA 00:14:34
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
2,072 ops/s
# Warmup Iteration   2: 2,034 ops/s
# Warmup Iteration   3: 2,047 ops/s
# Warmup Iteration   4: 2,072 ops/s
# Warmup Iteration   5: 2,043 ops/s
Iteration   1: 2,070 ops/s
                 Â·gc.alloc.rate:      2665,554 MB/sec
                 Â·gc.alloc.rate.norm: 1342177338,435 B/op
                 Â·gc.count:           163,000 counts
                 Â·gc.time:            8653,000 ms

Iteration   2: 1,991 ops/s
                 Â·gc.alloc.rate:      2566,734 MB/sec
                 Â·gc.alloc.rate.norm: 1342177338,435 B/op
                 Â·gc.count:           170,000 counts
                 Â·gc.time:            8989,000 ms

Iteration   3: 2,047 ops/s
                 Â·gc.alloc.rate:      2634,689 MB/sec
                 Â·gc.alloc.rate.norm: 1342177808,348 B/op
                 Â·gc.count:           171,000 counts
                 Â·gc.time:            8689,000 ms

Iteration   4: 2,008 ops/s
                 Â·gc.alloc.rate:      2598,586 MB/sec
                 Â·gc.alloc.rate.norm: 1342177338,435 B/op
                 Â·gc.count:           173,000 counts
                 Â·gc.time:            8862,000 ms

Iteration   5: 2,044 ops/s
                 Â·gc.alloc.rate:      2632,149 MB/sec
                 Â·gc.alloc.rate.norm: 1342177341,217 B/op
                 Â·gc.count:           167,000 counts
                 Â·gc.time:            8716,000 ms


# Run progress: 53,33% complete, ETA 00:12:52
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
2,052 ops/s
# Warmup Iteration   2: 2,018 ops/s
# Warmup Iteration   3: 2,075 ops/s
# Warmup Iteration   4: 1,988 ops/s
# Warmup Iteration   5: 2,095 ops/s
Iteration   1: 2,026 ops/s
                 Â·gc.alloc.rate:      2613,513 MB/sec
                 Â·gc.alloc.rate.norm: 1342177338,435 B/op
                 Â·gc.count:           176,000 counts
                 Â·gc.time:            8805,000 ms

Iteration   2: 2,013 ops/s
                 Â·gc.alloc.rate:      2594,205 MB/sec
                 Â·gc.alloc.rate.norm: 1342177338,435 B/op
                 Â·gc.count:           175,000 counts
                 Â·gc.time:            8861,000 ms

Iteration   3: 2,020 ops/s
                 Â·gc.alloc.rate:      2604,377 MB/sec
                 Â·gc.alloc.rate.norm: 1342177338,435 B/op
                 Â·gc.count:           173,000 counts
                 Â·gc.time:            8819,000 ms

Iteration   4: 1,952 ops/s
                 Â·gc.alloc.rate:      2538,854 MB/sec
                 Â·gc.alloc.rate.norm: 1342177808,348 B/op
                 Â·gc.count:           175,000 counts
                 Â·gc.time:            9119,000 ms

Iteration   5: 2,039 ops/s
                 Â·gc.alloc.rate:      2626,755 MB/sec
                 Â·gc.alloc.rate.norm: 1342177341,217 B/op
                 Â·gc.count:           175,000 counts
                 Â·gc.time:            8719,000 ms


# Run progress: 60,00% complete, ETA 00:11:07
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
2,115 ops/s
# Warmup Iteration   2: 2,150 ops/s
# Warmup Iteration   3: 2,040 ops/s
# Warmup Iteration   4: 2,067 ops/s
# Warmup Iteration   5: 2,062 ops/s
Iteration   1: 2,043 ops/s
                 Â·gc.alloc.rate:      2631,533 MB/sec
                 Â·gc.alloc.rate.norm: 1342177338,435 B/op
                 Â·gc.count:           166,000 counts
                 Â·gc.time:            8723,000 ms

Iteration   2: 2,014 ops/s
                 Â·gc.alloc.rate:      2597,344 MB/sec
                 Â·gc.alloc.rate.norm: 1342177338,435 B/op
                 Â·gc.count:           169,000 counts
                 Â·gc.time:            8835,000 ms

Iteration   3: 2,038 ops/s
                 Â·gc.alloc.rate:      2623,430 MB/sec
                 Â·gc.alloc.rate.norm: 1342177338,435 B/op
                 Â·gc.count:           173,000 counts
                 Â·gc.time:            8711,000 ms

Iteration   4: 2,017 ops/s
                 Â·gc.alloc.rate:      2601,929 MB/sec
                 Â·gc.alloc.rate.norm: 1342177808,348 B/op
                 Â·gc.count:           175,000 counts
                 Â·gc.time:            8821,000 ms

Iteration   5: 2,079 ops/s
                 Â·gc.alloc.rate:      2673,590 MB/sec
                 Â·gc.alloc.rate.norm: 1342177338,435 B/op
                 Â·gc.count:           161,000 counts
                 Â·gc.time:            8572,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc":
  2,042 Â±(99.9%) 0,024 ops/s [Average]
  (min, avg, max) = (1,952, 2,042, 2,092), stdev = 0,033
  CI (99.9%): [2,017, 2,066] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate":
  2630,469 Â±(99.9%) 28,100 MB/sec [Average]
  (min, avg, max) = (2538,854, 2630,469, 2693,543), stdev = 37,513
  CI (99.9%): [2602,369, 2658,569] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate.norm":
  1342177432,696 Â±(99.9%) 143,600 B/op [Average]
  (min, avg, max) = (1342177337,043, 1342177432,696, 1342177808,348), stdev = 191,702
  CI (99.9%): [1342177289,096, 1342177576,295] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.count":
  4208,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (146,000, 168,320, 176,000), stdev = 7,398
  CI (99.9%): [4208,000, 4208,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.time":
  218223,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (8479,000, 8728,920, 9119,000), stdev = 146,332
  CI (99.9%): [218223,000, 218223,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc
# Parameters: (percentageOfHeapToAllocate = P_75)

# Run progress: 66,67% complete, ETA 00:09:19
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
1,181 ops/s
# Warmup Iteration   2: 1,158 ops/s
# Warmup Iteration   3: 1,168 ops/s
# Warmup Iteration   4: 1,203 ops/s
# Warmup Iteration   5: 1,186 ops/s
Iteration   1: 1,189 ops/s
                 Â·gc.alloc.rate:      2240,440 MB/sec
                 Â·gc.alloc.rate.norm: 2013266011,077 B/op
                 Â·gc.count:           105,000 counts
                 Â·gc.time:            8966,000 ms

Iteration   2: 1,143 ops/s
                 Â·gc.alloc.rate:      2245,702 MB/sec
                 Â·gc.alloc.rate.norm: 2013266011,077 B/op
                 Â·gc.count:           107,000 counts
                 Â·gc.time:            8932,000 ms

Iteration   3: 1,230 ops/s
                 Â·gc.alloc.rate:      2343,986 MB/sec
                 Â·gc.alloc.rate.norm: 2013266005,714 B/op
                 Â·gc.count:           99,000 counts
                 Â·gc.time:            9199,000 ms

Iteration   4: 1,210 ops/s
                 Â·gc.alloc.rate:      2298,330 MB/sec
                 Â·gc.alloc.rate.norm: 2013266777,714 B/op
                 Â·gc.count:           111,000 counts
                 Â·gc.time:            9484,000 ms

Iteration   5: 1,077 ops/s
                 Â·gc.alloc.rate:      2137,239 MB/sec
                 Â·gc.alloc.rate.norm: 2013266016,000 B/op
                 Â·gc.count:           126,000 counts
                 Â·gc.time:            9586,000 ms


# Run progress: 73,33% complete, ETA 00:07:31
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
1,229 ops/s
# Warmup Iteration   2: 1,222 ops/s
# Warmup Iteration   3: 1,165 ops/s
# Warmup Iteration   4: 1,201 ops/s
# Warmup Iteration   5: 1,247 ops/s
Iteration   1: 1,155 ops/s
                 Â·gc.alloc.rate:      2287,587 MB/sec
                 Â·gc.alloc.rate.norm: 2013266005,714 B/op
                 Â·gc.count:           109,000 counts
                 Â·gc.time:            9429,000 ms

Iteration   2: 1,180 ops/s
                 Â·gc.alloc.rate:      2230,769 MB/sec
                 Â·gc.alloc.rate.norm: 2013266011,077 B/op
                 Â·gc.count:           119,000 counts
                 Â·gc.time:            9027,000 ms

Iteration   3: 1,189 ops/s
                 Â·gc.alloc.rate:      2243,466 MB/sec
                 Â·gc.alloc.rate.norm: 2013266011,077 B/op
                 Â·gc.count:           108,000 counts
                 Â·gc.time:            8973,000 ms

Iteration   4: 1,159 ops/s
                 Â·gc.alloc.rate:      2202,892 MB/sec
                 Â·gc.alloc.rate.norm: 2013266842,462 B/op
                 Â·gc.count:           123,000 counts
                 Â·gc.time:            9082,000 ms

Iteration   5: 1,163 ops/s
                 Â·gc.alloc.rate:      2209,753 MB/sec
                 Â·gc.alloc.rate.norm: 2013266006,154 B/op
                 Â·gc.count:           118,000 counts
                 Â·gc.time:            9063,000 ms


# Run progress: 80,00% complete, ETA 00:05:40
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
1,177 ops/s
# Warmup Iteration   2: 1,186 ops/s
# Warmup Iteration   3: 1,196 ops/s
# Warmup Iteration   4: 1,203 ops/s
# Warmup Iteration   5: 1,184 ops/s
Iteration   1: 1,166 ops/s
                 Â·gc.alloc.rate:      2212,180 MB/sec
                 Â·gc.alloc.rate.norm: 2013266011,077 B/op
                 Â·gc.count:           118,000 counts
                 Â·gc.time:            9137,000 ms

Iteration   2: 1,115 ops/s
                 Â·gc.alloc.rate:      2122,250 MB/sec
                 Â·gc.alloc.rate.norm: 2013266011,077 B/op
                 Â·gc.count:           121,000 counts
                 Â·gc.time:            9646,000 ms

Iteration   3: 1,164 ops/s
                 Â·gc.alloc.rate:      2207,517 MB/sec
                 Â·gc.alloc.rate.norm: 2013266842,462 B/op
                 Â·gc.count:           124,000 counts
                 Â·gc.time:            9152,000 ms

Iteration   4: 1,143 ops/s
                 Â·gc.alloc.rate:      2176,369 MB/sec
                 Â·gc.alloc.rate.norm: 2013266011,077 B/op
                 Â·gc.count:           116,000 counts
                 Â·gc.time:            9342,000 ms

Iteration   5: 1,165 ops/s
                 Â·gc.alloc.rate:      2216,745 MB/sec
                 Â·gc.alloc.rate.norm: 2013266011,077 B/op
                 Â·gc.count:           120,000 counts
                 Â·gc.time:            9075,000 ms


# Run progress: 86,67% complete, ETA 00:03:47
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
1,222 ops/s
# Warmup Iteration   2: 1,116 ops/s
# Warmup Iteration   3: 1,178 ops/s
# Warmup Iteration   4: 1,223 ops/s
# Warmup Iteration   5: 1,206 ops/s
Iteration   1: 1,208 ops/s
                 Â·gc.alloc.rate:      2327,083 MB/sec
                 Â·gc.alloc.rate.norm: 2013266005,714 B/op
                 Â·gc.count:           110,000 counts
                 Â·gc.time:            9313,000 ms

Iteration   2: 1,159 ops/s
                 Â·gc.alloc.rate:      2282,220 MB/sec
                 Â·gc.alloc.rate.norm: 2013266005,714 B/op
                 Â·gc.count:           108,000 counts
                 Â·gc.time:            9324,000 ms

Iteration   3: 1,163 ops/s
                 Â·gc.alloc.rate:      2320,594 MB/sec
                 Â·gc.alloc.rate.norm: 2013266005,714 B/op
                 Â·gc.count:           110,000 counts
                 Â·gc.time:            9346,000 ms

Iteration   4: 1,163 ops/s
                 Â·gc.alloc.rate:      2325,815 MB/sec
                 Â·gc.alloc.rate.norm: 2013266777,714 B/op
                 Â·gc.count:           112,000 counts
                 Â·gc.time:            9331,000 ms

Iteration   5: 1,194 ops/s
                 Â·gc.alloc.rate:      2290,791 MB/sec
                 Â·gc.alloc.rate.norm: 2013266010,286 B/op
                 Â·gc.count:           127,000 counts
                 Â·gc.time:            9503,000 ms


# Run progress: 93,33% complete, ETA 00:01:54
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
1,199 ops/s
# Warmup Iteration   2: 1,204 ops/s
# Warmup Iteration   3: 1,191 ops/s
# Warmup Iteration   4: 1,175 ops/s
# Warmup Iteration   5: 1,204 ops/s
Iteration   1: 1,193 ops/s
                 Â·gc.alloc.rate:      2254,394 MB/sec
                 Â·gc.alloc.rate.norm: 2013266011,077 B/op
                 Â·gc.count:           106,000 counts
                 Â·gc.time:            8904,000 ms

Iteration   2: 1,146 ops/s
                 Â·gc.alloc.rate:      2249,456 MB/sec
                 Â·gc.alloc.rate.norm: 2013266005,714 B/op
                 Â·gc.count:           117,000 counts
                 Â·gc.time:            9639,000 ms

Iteration   3: 1,141 ops/s
                 Â·gc.alloc.rate:      2173,450 MB/sec
                 Â·gc.alloc.rate.norm: 2013266011,077 B/op
                 Â·gc.count:           118,000 counts
                 Â·gc.time:            9385,000 ms

Iteration   4: 1,188 ops/s
                 Â·gc.alloc.rate:      2365,649 MB/sec
                 Â·gc.alloc.rate.norm: 2013266777,714 B/op
                 Â·gc.count:           98,000 counts
                 Â·gc.time:            9141,000 ms

Iteration   5: 1,118 ops/s
                 Â·gc.alloc.rate:      2207,823 MB/sec
                 Â·gc.alloc.rate.norm: 2013266011,077 B/op
                 Â·gc.count:           117,000 counts
                 Â·gc.time:            9099,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc":
  1,165 Â±(99.9%) 0,025 ops/s [Average]
  (min, avg, max) = (1,077, 1,165, 1,230), stdev = 0,033
  CI (99.9%): [1,140, 1,190] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate":
  2246,900 Â±(99.9%) 47,354 MB/sec [Average]
  (min, avg, max) = (2122,250, 2246,900, 2365,649), stdev = 63,216
  CI (99.9%): [2199,546, 2294,253] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate.norm":
  2013266168,265 Â±(99.9%) 243,120 B/op [Average]
  (min, avg, max) = (2013266005,714, 2013266168,265, 2013266842,462), stdev = 324,558
  CI (99.9%): [2013265925,145, 2013266411,386] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.count":
  2847,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (98,000, 113,880, 127,000), stdev = 7,881
  CI (99.9%): [2847,000, 2847,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.time":
  231078,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (8904,000, 9243,120, 9646,000), stdev = 223,979
  CI (99.9%): [231078,000, 231078,000] (assumes normal distribution)


# Run complete. Total time: 00:28:42

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                 (percentageOfHeapToAllocate)   Mode  Cnt           Score     Error   Units
BurstHeapMemoryAllocatorBenchmark.gc                                              P_25  thrpt   25           4,667 Â±   0,076   ops/s
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate                               P_25  thrpt   25        2994,512 Â±  45,856  MB/sec
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate.norm                          P_25  thrpt   25   671088720,053 Â±  67,178    B/op
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.count                                    P_25  thrpt   25        3063,000            counts
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.time                                     P_25  thrpt   25      207072,000                ms
BurstHeapMemoryAllocatorBenchmark.gc                                              P_50  thrpt   25           2,042 Â±   0,024   ops/s
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate                               P_50  thrpt   25        2630,469 Â±  28,100  MB/sec
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate.norm                          P_50  thrpt   25  1342177432,696 Â± 143,600    B/op
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.count                                    P_50  thrpt   25        4208,000            counts
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.time                                     P_50  thrpt   25      218223,000                ms
BurstHeapMemoryAllocatorBenchmark.gc                                              P_75  thrpt   25           1,165 Â±   0,025   ops/s
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate                               P_75  thrpt   25        2246,900 Â±  47,354  MB/sec
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate.norm                          P_75  thrpt   25  2013266168,265 Â± 243,120    B/op
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.count                                    P_75  thrpt   25        2847,000            counts
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.time                                     P_75  thrpt   25      231078,000                ms

Benchmark result is saved to results/jdk-17/arm64/openjdk-hotspot-vm/BurstHeapMemoryAllocatorBenchmark_g1GC_2threads.csv

Running BurstHeapMemoryAllocatorBenchmark benchmark ...
java  -jar benchmarks/target/benchmarks.jar .*BurstHeapMemoryAllocatorBenchmark.* -foe true -wi 5 -w 10 -i 5 -r 10 -f 5 -rf csv -rff results/jdk-17/arm64/openjdk-hotspot-vm/BurstHeapMemoryAllocatorBenchmark_shenandoahGC_1thread.csv -t 1 -prof gc -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseShenandoahGC"

# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseShenandoahGC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc
# Parameters: (percentageOfHeapToAllocate = P_25)

# Run progress: 0,00% complete, ETA 00:25:00
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
3,564 ops/s
# Warmup Iteration   2: 4,968 ops/s
# Warmup Iteration   3: 4,738 ops/s
# Warmup Iteration   4: 4,888 ops/s
# Warmup Iteration   5: 4,883 ops/s
Iteration   1: 4,745 ops/s
                 Â·gc.alloc.rate:      6073,812 MB/sec
                 Â·gc.alloc.rate.norm: 1342177304,980 B/op
                 Â·gc.count:           136,000 counts
                 Â·gc.time:            15642,000 ms

Iteration   2: 4,960 ops/s
                 Â·gc.alloc.rate:      6348,741 MB/sec
                 Â·gc.alloc.rate.norm: 1342177304,800 B/op
                 Â·gc.count:           128,000 counts
                 Â·gc.time:            14706,000 ms

Iteration   3: 4,734 ops/s
                 Â·gc.alloc.rate:      6059,022 MB/sec
                 Â·gc.alloc.rate.norm: 1342177304,980 B/op
                 Â·gc.count:           136,000 counts
                 Â·gc.time:            15631,000 ms

Iteration   4: 4,957 ops/s
                 Â·gc.alloc.rate:      6345,148 MB/sec
                 Â·gc.alloc.rate.norm: 1342177304,800 B/op
                 Â·gc.count:           128,000 counts
                 Â·gc.time:            14723,000 ms

Iteration   5: 4,764 ops/s
                 Â·gc.alloc.rate:      6098,434 MB/sec
                 Â·gc.alloc.rate.norm: 1342177304,980 B/op
                 Â·gc.count:           136,000 counts
                 Â·gc.time:            15620,000 ms


# Run progress: 6,67% complete, ETA 00:23:55
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
3,075 ops/s
# Warmup Iteration   2: 3,873 ops/s
# Warmup Iteration   3: 4,782 ops/s
# Warmup Iteration   4: 4,786 ops/s
# Warmup Iteration   5: 4,775 ops/s
Iteration   1: 4,792 ops/s
                 Â·gc.alloc.rate:      6133,520 MB/sec
                 Â·gc.alloc.rate.norm: 1342177305,167 B/op
                 Â·gc.count:           128,000 counts
                 Â·gc.time:            14722,000 ms

Iteration   2: 4,957 ops/s
                 Â·gc.alloc.rate:      6345,308 MB/sec
                 Â·gc.alloc.rate.norm: 1342177304,800 B/op
                 Â·gc.count:           128,000 counts
                 Â·gc.time:            14706,000 ms

Iteration   3: 4,767 ops/s
                 Â·gc.alloc.rate:      6101,718 MB/sec
                 Â·gc.alloc.rate.norm: 1342177304,980 B/op
                 Â·gc.count:           136,000 counts
                 Â·gc.time:            15591,000 ms

Iteration   4: 4,873 ops/s
                 Â·gc.alloc.rate:      6236,983 MB/sec
                 Â·gc.alloc.rate.norm: 1342177304,980 B/op
                 Â·gc.count:           128,000 counts
                 Â·gc.time:            14700,000 ms

Iteration   5: 4,795 ops/s
                 Â·gc.alloc.rate:      6136,856 MB/sec
                 Â·gc.alloc.rate.norm: 1342177304,800 B/op
                 Â·gc.count:           136,000 counts
                 Â·gc.time:            15588,000 ms


# Run progress: 13,33% complete, ETA 00:22:24
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
3,668 ops/s
# Warmup Iteration   2: 4,000 ops/s
# Warmup Iteration   3: 4,945 ops/s
# Warmup Iteration   4: 4,742 ops/s
# Warmup Iteration   5: 4,879 ops/s
Iteration   1: 4,890 ops/s
                 Â·gc.alloc.rate:      6259,420 MB/sec
                 Â·gc.alloc.rate.norm: 1342177304,980 B/op
                 Â·gc.count:           128,000 counts
                 Â·gc.time:            14669,000 ms

Iteration   2: 4,758 ops/s
                 Â·gc.alloc.rate:      6090,585 MB/sec
                 Â·gc.alloc.rate.norm: 1342177304,327 B/op
                 Â·gc.count:           136,000 counts
                 Â·gc.time:            15559,000 ms

Iteration   3: 4,853 ops/s
                 Â·gc.alloc.rate:      6212,279 MB/sec
                 Â·gc.alloc.rate.norm: 1342177304,327 B/op
                 Â·gc.count:           128,000 counts
                 Â·gc.time:            14698,000 ms

Iteration   4: 4,893 ops/s
                 Â·gc.alloc.rate:      6263,141 MB/sec
                 Â·gc.alloc.rate.norm: 1342177304,980 B/op
                 Â·gc.count:           128,000 counts
                 Â·gc.time:            14669,000 ms

Iteration   5: 4,755 ops/s
                 Â·gc.alloc.rate:      6085,922 MB/sec
                 Â·gc.alloc.rate.norm: 1342177304,980 B/op
                 Â·gc.count:           136,000 counts
                 Â·gc.time:            15547,000 ms


# Run progress: 20,00% complete, ETA 00:20:41
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
3,594 ops/s
# Warmup Iteration   2: 4,867 ops/s
# Warmup Iteration   3: 4,792 ops/s
# Warmup Iteration   4: 4,740 ops/s
# Warmup Iteration   5: 4,949 ops/s
Iteration   1: 4,782 ops/s
                 Â·gc.alloc.rate:      6121,169 MB/sec
                 Â·gc.alloc.rate.norm: 1342177305,167 B/op
                 Â·gc.count:           128,000 counts
                 Â·gc.time:            14742,000 ms

Iteration   2: 4,752 ops/s
                 Â·gc.alloc.rate:      6082,269 MB/sec
                 Â·gc.alloc.rate.norm: 1342177304,980 B/op
                 Â·gc.count:           136,000 counts
                 Â·gc.time:            15634,000 ms

Iteration   3: 4,977 ops/s
                 Â·gc.alloc.rate:      6370,268 MB/sec
                 Â·gc.alloc.rate.norm: 1342177304,800 B/op
                 Â·gc.count:           128,000 counts
                 Â·gc.time:            14713,000 ms

Iteration   4: 4,733 ops/s
                 Â·gc.alloc.rate:      6057,932 MB/sec
                 Â·gc.alloc.rate.norm: 1342177304,980 B/op
                 Â·gc.count:           136,000 counts
                 Â·gc.time:            15599,000 ms

Iteration   5: 4,954 ops/s
                 Â·gc.alloc.rate:      6340,445 MB/sec
                 Â·gc.alloc.rate.norm: 1342177304,800 B/op
                 Â·gc.count:           128,000 counts
                 Â·gc.time:            14711,000 ms


# Run progress: 26,67% complete, ETA 00:19:01
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
3,293 ops/s
# Warmup Iteration   2: 4,253 ops/s
# Warmup Iteration   3: 4,764 ops/s
# Warmup Iteration   4: 4,859 ops/s
# Warmup Iteration   5: 4,857 ops/s
Iteration   1: 4,743 ops/s
                 Â·gc.alloc.rate:      6071,301 MB/sec
                 Â·gc.alloc.rate.norm: 1342177304,980 B/op
                 Â·gc.count:           136,000 counts
                 Â·gc.time:            15656,000 ms

Iteration   2: 4,981 ops/s
                 Â·gc.alloc.rate:      6375,175 MB/sec
                 Â·gc.alloc.rate.norm: 1342177304,800 B/op
                 Â·gc.count:           128,000 counts
                 Â·gc.time:            14699,000 ms

Iteration   3: 4,739 ops/s
                 Â·gc.alloc.rate:      6066,355 MB/sec
                 Â·gc.alloc.rate.norm: 1342177304,327 B/op
                 Â·gc.count:           136,000 counts
                 Â·gc.time:            15635,000 ms

Iteration   4: 4,956 ops/s
                 Â·gc.alloc.rate:      6343,956 MB/sec
                 Â·gc.alloc.rate.norm: 1342177304,800 B/op
                 Â·gc.count:           128,000 counts
                 Â·gc.time:            14702,000 ms

Iteration   5: 4,728 ops/s
                 Â·gc.alloc.rate:      6051,954 MB/sec
                 Â·gc.alloc.rate.norm: 1342177304,980 B/op
                 Â·gc.count:           136,000 counts
                 Â·gc.time:            15693,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc":
  4,834 Â±(99.9%) 0,071 ops/s [Average]
  (min, avg, max) = (4,728, 4,834, 4,981), stdev = 0,095
  CI (99.9%): [4,762, 4,905] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate":
  6186,869 Â±(99.9%) 91,094 MB/sec [Average]
  (min, avg, max) = (6051,954, 6186,869, 6375,175), stdev = 121,608
  CI (99.9%): [6095,775, 6277,963] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate.norm":
  1342177304,859 Â±(99.9%) 0,170 B/op [Average]
  (min, avg, max) = (1342177304,327, 1342177304,859, 1342177305,167), stdev = 0,228
  CI (99.9%): [1342177304,688, 1342177305,029] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.count":
  3296,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (128,000, 131,840, 136,000), stdev = 4,079
  CI (99.9%): [3296,000, 3296,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.time":
  378555,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (14669,000, 15142,200, 15693,000), stdev = 465,902
  CI (99.9%): [378555,000, 378555,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseShenandoahGC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc
# Parameters: (percentageOfHeapToAllocate = P_50)

# Run progress: 33,33% complete, ETA 00:17:19
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,823 ops/s
# Warmup Iteration   2: 0,535 ops/s
# Warmup Iteration   3: 0,528 ops/s
# Warmup Iteration   4: 0,547 ops/s
# Warmup Iteration   5: 0,523 ops/s
Iteration   1: 0,577 ops/s
                 Â·gc.alloc.rate:      1477,379 MB/sec
                 Â·gc.alloc.rate.norm: 2684354649,333 B/op
                 Â·gc.count:           54,000 counts
                 Â·gc.time:            10259,000 ms

Iteration   2: 0,653 ops/s
                 Â·gc.alloc.rate:      1670,760 MB/sec
                 Â·gc.alloc.rate.norm: 2684354638,857 B/op
                 Â·gc.count:           63,000 counts
                 Â·gc.time:            10721,000 ms

Iteration   3: 0,653 ops/s
                 Â·gc.alloc.rate:      1672,416 MB/sec
                 Â·gc.alloc.rate.norm: 2684354638,857 B/op
                 Â·gc.count:           63,000 counts
                 Â·gc.time:            10684,000 ms

Iteration   4: 0,663 ops/s
                 Â·gc.alloc.rate:      1697,471 MB/sec
                 Â·gc.alloc.rate.norm: 2684354638,857 B/op
                 Â·gc.count:           63,000 counts
                 Â·gc.time:            10628,000 ms

Iteration   5: 0,682 ops/s
                 Â·gc.alloc.rate:      1746,051 MB/sec
                 Â·gc.alloc.rate.norm: 2684354638,857 B/op
                 Â·gc.count:           63,000 counts
                 Â·gc.time:            10271,000 ms


# Run progress: 40,00% complete, ETA 00:15:43
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,827 ops/s
# Warmup Iteration   2: 0,613 ops/s
# Warmup Iteration   3: 0,690 ops/s
# Warmup Iteration   4: 0,688 ops/s
# Warmup Iteration   5: 0,679 ops/s
Iteration   1: 0,680 ops/s
                 Â·gc.alloc.rate:      1740,443 MB/sec
                 Â·gc.alloc.rate.norm: 2684354638,857 B/op
                 Â·gc.count:           63,000 counts
                 Â·gc.time:            10282,000 ms

Iteration   2: 0,681 ops/s
                 Â·gc.alloc.rate:      1744,328 MB/sec
                 Â·gc.alloc.rate.norm: 2684354638,857 B/op
                 Â·gc.count:           63,000 counts
                 Â·gc.time:            10251,000 ms

Iteration   3: 0,672 ops/s
                 Â·gc.alloc.rate:      1719,658 MB/sec
                 Â·gc.alloc.rate.norm: 2684354638,857 B/op
                 Â·gc.count:           63,000 counts
                 Â·gc.time:            10384,000 ms

Iteration   4: 0,683 ops/s
                 Â·gc.alloc.rate:      1748,370 MB/sec
                 Â·gc.alloc.rate.norm: 2684354638,857 B/op
                 Â·gc.count:           63,000 counts
                 Â·gc.time:            10293,000 ms

Iteration   5: 0,691 ops/s
                 Â·gc.alloc.rate:      1769,010 MB/sec
                 Â·gc.alloc.rate.norm: 2684354638,857 B/op
                 Â·gc.count:           63,000 counts
                 Â·gc.time:            10394,000 ms


# Run progress: 46,67% complete, ETA 00:13:59
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,866 ops/s
# Warmup Iteration   2: 0,532 ops/s
# Warmup Iteration   3: 0,555 ops/s
# Warmup Iteration   4: 0,615 ops/s
# Warmup Iteration   5: 0,693 ops/s
Iteration   1: 0,729 ops/s
                 Â·gc.alloc.rate:      1863,440 MB/sec
                 Â·gc.alloc.rate.norm: 2684354635,000 B/op
                 Â·gc.count:           71,000 counts
                 Â·gc.time:            10991,000 ms

Iteration   2: 0,697 ops/s
                 Â·gc.alloc.rate:      1783,882 MB/sec
                 Â·gc.alloc.rate.norm: 2684354638,857 B/op
                 Â·gc.count:           63,000 counts
                 Â·gc.time:            10238,000 ms

Iteration   3: 0,683 ops/s
                 Â·gc.alloc.rate:      1748,141 MB/sec
                 Â·gc.alloc.rate.norm: 2684354638,857 B/op
                 Â·gc.count:           63,000 counts
                 Â·gc.time:            10303,000 ms

Iteration   4: 0,686 ops/s
                 Â·gc.alloc.rate:      1755,093 MB/sec
                 Â·gc.alloc.rate.norm: 2684354638,857 B/op
                 Â·gc.count:           63,000 counts
                 Â·gc.time:            10251,000 ms

Iteration   5: 0,690 ops/s
                 Â·gc.alloc.rate:      1765,829 MB/sec
                 Â·gc.alloc.rate.norm: 2684354638,857 B/op
                 Â·gc.count:           63,000 counts
                 Â·gc.time:            10231,000 ms


# Run progress: 53,33% complete, ETA 00:12:21
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,789 ops/s
# Warmup Iteration   2: 0,682 ops/s
# Warmup Iteration   3: 0,534 ops/s
# Warmup Iteration   4: 0,646 ops/s
# Warmup Iteration   5: 0,637 ops/s
Iteration   1: 0,667 ops/s
                 Â·gc.alloc.rate:      1706,451 MB/sec
                 Â·gc.alloc.rate.norm: 2684354638,857 B/op
                 Â·gc.count:           63,000 counts
                 Â·gc.time:            10609,000 ms

Iteration   2: 0,689 ops/s
                 Â·gc.alloc.rate:      1764,043 MB/sec
                 Â·gc.alloc.rate.norm: 2684354638,857 B/op
                 Â·gc.count:           63,000 counts
                 Â·gc.time:            10258,000 ms

Iteration   3: 0,682 ops/s
                 Â·gc.alloc.rate:      1745,839 MB/sec
                 Â·gc.alloc.rate.norm: 2684354638,857 B/op
                 Â·gc.count:           63,000 counts
                 Â·gc.time:            10273,000 ms

Iteration   4: 0,685 ops/s
                 Â·gc.alloc.rate:      1753,040 MB/sec
                 Â·gc.alloc.rate.norm: 2684354638,857 B/op
                 Â·gc.count:           63,000 counts
                 Â·gc.time:            10278,000 ms

Iteration   5: 0,680 ops/s
                 Â·gc.alloc.rate:      1741,275 MB/sec
                 Â·gc.alloc.rate.norm: 2684354638,857 B/op
                 Â·gc.count:           63,000 counts
                 Â·gc.time:            10276,000 ms


# Run progress: 60,00% complete, ETA 00:10:38
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,794 ops/s
# Warmup Iteration   2: 0,682 ops/s
# Warmup Iteration   3: 0,528 ops/s
# Warmup Iteration   4: 0,536 ops/s
# Warmup Iteration   5: 0,521 ops/s
Iteration   1: 0,541 ops/s
                 Â·gc.alloc.rate:      1385,231 MB/sec
                 Â·gc.alloc.rate.norm: 2684354649,333 B/op
                 Â·gc.count:           49,000 counts
                 Â·gc.time:            11575,000 ms

Iteration   2: 0,670 ops/s
                 Â·gc.alloc.rate:      1714,190 MB/sec
                 Â·gc.alloc.rate.norm: 2684354638,857 B/op
                 Â·gc.count:           63,000 counts
                 Â·gc.time:            10537,000 ms

Iteration   3: 0,676 ops/s
                 Â·gc.alloc.rate:      1730,117 MB/sec
                 Â·gc.alloc.rate.norm: 2684354638,857 B/op
                 Â·gc.count:           63,000 counts
                 Â·gc.time:            10563,000 ms

Iteration   4: 0,679 ops/s
                 Â·gc.alloc.rate:      1737,752 MB/sec
                 Â·gc.alloc.rate.norm: 2684354638,857 B/op
                 Â·gc.count:           63,000 counts
                 Â·gc.time:            10285,000 ms

Iteration   5: 0,685 ops/s
                 Â·gc.alloc.rate:      1754,559 MB/sec
                 Â·gc.alloc.rate.norm: 2684354638,857 B/op
                 Â·gc.count:           63,000 counts
                 Â·gc.time:            10254,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc":
  0,671 Â±(99.9%) 0,028 ops/s [Average]
  (min, avg, max) = (0,541, 0,671, 0,729), stdev = 0,037
  CI (99.9%): [0,643, 0,699] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate":
  1717,391 Â±(99.9%) 71,001 MB/sec [Average]
  (min, avg, max) = (1385,231, 1717,391, 1863,440), stdev = 94,784
  CI (99.9%): [1646,390, 1788,392] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate.norm":
  2684354639,541 Â±(99.9%) 2,282 B/op [Average]
  (min, avg, max) = (2684354635,000, 2684354639,541, 2684354649,333), stdev = 3,046
  CI (99.9%): [2684354637,259, 2684354641,823] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.count":
  1560,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (49,000, 62,400, 71,000), stdev = 3,719
  CI (99.9%): [1560,000, 1560,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.time":
  261089,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (10231,000, 10443,560, 11575,000), stdev = 308,158
  CI (99.9%): [261089,000, 261089,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseShenandoahGC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc
# Parameters: (percentageOfHeapToAllocate = P_75)

# Run progress: 66,67% complete, ETA 00:08:56
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,880 ops/s
# Warmup Iteration   2: 0,679 ops/s
# Warmup Iteration   3: 0,721 ops/s
# Warmup Iteration   4: 0,707 ops/s
# Warmup Iteration   5: 0,676 ops/s
Iteration   1: 0,673 ops/s
                 Â·gc.alloc.rate:      2585,214 MB/sec
                 Â·gc.alloc.rate.norm: 4026531911,000 B/op
                 Â·gc.count:           82,000 counts
                 Â·gc.time:            16169,000 ms

Iteration   2: 0,710 ops/s
                 Â·gc.alloc.rate:      2727,394 MB/sec
                 Â·gc.alloc.rate.norm: 4026531911,000 B/op
                 Â·gc.count:           80,000 counts
                 Â·gc.time:            15490,000 ms

Iteration   3: 0,680 ops/s
                 Â·gc.alloc.rate:      2611,629 MB/sec
                 Â·gc.alloc.rate.norm: 4026531911,000 B/op
                 Â·gc.count:           79,000 counts
                 Â·gc.time:            15989,000 ms

Iteration   4: 0,750 ops/s
                 Â·gc.alloc.rate:      2879,840 MB/sec
                 Â·gc.alloc.rate.norm: 4026531911,000 B/op
                 Â·gc.count:           75,000 counts
                 Â·gc.time:            14639,000 ms

Iteration   5: 0,647 ops/s
                 Â·gc.alloc.rate:      2483,250 MB/sec
                 Â·gc.alloc.rate.norm: 4026531918,857 B/op
                 Â·gc.count:           72,000 counts
                 Â·gc.time:            14497,000 ms


# Run progress: 73,33% complete, ETA 00:07:12
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,804 ops/s
# Warmup Iteration   2: 0,690 ops/s
# Warmup Iteration   3: 0,693 ops/s
# Warmup Iteration   4: 0,696 ops/s
# Warmup Iteration   5: 0,698 ops/s
Iteration   1: 0,701 ops/s
                 Â·gc.alloc.rate:      2691,517 MB/sec
                 Â·gc.alloc.rate.norm: 4026531911,000 B/op
                 Â·gc.count:           76,000 counts
                 Â·gc.time:            15399,000 ms

Iteration   2: 0,728 ops/s
                 Â·gc.alloc.rate:      2795,526 MB/sec
                 Â·gc.alloc.rate.norm: 4026531911,000 B/op
                 Â·gc.count:           81,000 counts
                 Â·gc.time:            15535,000 ms

Iteration   3: 0,687 ops/s
                 Â·gc.alloc.rate:      2637,840 MB/sec
                 Â·gc.alloc.rate.norm: 4026531918,857 B/op
                 Â·gc.count:           65,000 counts
                 Â·gc.time:            13444,000 ms

Iteration   4: 0,687 ops/s
                 Â·gc.alloc.rate:      2637,706 MB/sec
                 Â·gc.alloc.rate.norm: 4026531918,857 B/op
                 Â·gc.count:           68,000 counts
                 Â·gc.time:            13818,000 ms

Iteration   5: 0,686 ops/s
                 Â·gc.alloc.rate:      2632,508 MB/sec
                 Â·gc.alloc.rate.norm: 4026531918,857 B/op
                 Â·gc.count:           69,000 counts
                 Â·gc.time:            13873,000 ms


# Run progress: 80,00% complete, ETA 00:05:25
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,762 ops/s
# Warmup Iteration   2: 0,820 ops/s
# Warmup Iteration   3: 0,697 ops/s
# Warmup Iteration   4: 0,672 ops/s
# Warmup Iteration   5: 0,718 ops/s
Iteration   1: 0,716 ops/s
                 Â·gc.alloc.rate:      2749,555 MB/sec
                 Â·gc.alloc.rate.norm: 4026531911,000 B/op
                 Â·gc.count:           76,000 counts
                 Â·gc.time:            15332,000 ms

Iteration   2: 0,712 ops/s
                 Â·gc.alloc.rate:      2732,474 MB/sec
                 Â·gc.alloc.rate.norm: 4026531911,000 B/op
                 Â·gc.count:           77,000 counts
                 Â·gc.time:            15264,000 ms

Iteration   3: 0,684 ops/s
                 Â·gc.alloc.rate:      2622,561 MB/sec
                 Â·gc.alloc.rate.norm: 4026531923,429 B/op
                 Â·gc.count:           69,000 counts
                 Â·gc.time:            13807,000 ms

Iteration   4: 0,699 ops/s
                 Â·gc.alloc.rate:      2685,220 MB/sec
                 Â·gc.alloc.rate.norm: 4026531911,000 B/op
                 Â·gc.count:           77,000 counts
                 Â·gc.time:            15392,000 ms

Iteration   5: 0,750 ops/s
                 Â·gc.alloc.rate:      2881,379 MB/sec
                 Â·gc.alloc.rate.norm: 4026531911,000 B/op
                 Â·gc.count:           76,000 counts
                 Â·gc.time:            14717,000 ms


# Run progress: 86,67% complete, ETA 00:03:37
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,798 ops/s
# Warmup Iteration   2: 0,756 ops/s
# Warmup Iteration   3: 0,692 ops/s
# Warmup Iteration   4: 0,765 ops/s
# Warmup Iteration   5: 0,772 ops/s
Iteration   1: 0,813 ops/s
                 Â·gc.alloc.rate:      3123,555 MB/sec
                 Â·gc.alloc.rate.norm: 4026531904,889 B/op
                 Â·gc.count:           76,000 counts
                 Â·gc.time:            15175,000 ms

Iteration   2: 0,684 ops/s
                 Â·gc.alloc.rate:      2626,411 MB/sec
                 Â·gc.alloc.rate.norm: 4026531918,857 B/op
                 Â·gc.count:           71,000 counts
                 Â·gc.time:            13932,000 ms

Iteration   3: 0,692 ops/s
                 Â·gc.alloc.rate:      2655,765 MB/sec
                 Â·gc.alloc.rate.norm: 4026531918,857 B/op
                 Â·gc.count:           74,000 counts
                 Â·gc.time:            13973,000 ms

Iteration   4: 0,678 ops/s
                 Â·gc.alloc.rate:      2602,348 MB/sec
                 Â·gc.alloc.rate.norm: 4026531911,000 B/op
                 Â·gc.count:           79,000 counts
                 Â·gc.time:            16025,000 ms

Iteration   5: 0,676 ops/s
                 Â·gc.alloc.rate:      2596,246 MB/sec
                 Â·gc.alloc.rate.norm: 4026531918,857 B/op
                 Â·gc.count:           70,000 counts
                 Â·gc.time:            13792,000 ms


# Run progress: 93,33% complete, ETA 00:01:49
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,851 ops/s
# Warmup Iteration   2: 0,749 ops/s
# Warmup Iteration   3: 0,690 ops/s
# Warmup Iteration   4: 0,688 ops/s
# Warmup Iteration   5: 0,763 ops/s
Iteration   1: 0,640 ops/s
                 Â·gc.alloc.rate:      2457,510 MB/sec
                 Â·gc.alloc.rate.norm: 4026531918,857 B/op
                 Â·gc.count:           73,000 counts
                 Â·gc.time:            14499,000 ms

Iteration   2: 0,683 ops/s
                 Â·gc.alloc.rate:      2624,289 MB/sec
                 Â·gc.alloc.rate.norm: 4026531918,857 B/op
                 Â·gc.count:           69,000 counts
                 Â·gc.time:            13803,000 ms

Iteration   3: 0,691 ops/s
                 Â·gc.alloc.rate:      2654,352 MB/sec
                 Â·gc.alloc.rate.norm: 4026531918,857 B/op
                 Â·gc.count:           71,000 counts
                 Â·gc.time:            13684,000 ms

Iteration   4: 0,687 ops/s
                 Â·gc.alloc.rate:      2638,277 MB/sec
                 Â·gc.alloc.rate.norm: 4026531918,857 B/op
                 Â·gc.count:           72,000 counts
                 Â·gc.time:            14067,000 ms

Iteration   5: 0,655 ops/s
                 Â·gc.alloc.rate:      2514,485 MB/sec
                 Â·gc.alloc.rate.norm: 4026531918,857 B/op
                 Â·gc.count:           72,000 counts
                 Â·gc.time:            14402,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc":
  0,696 Â±(99.9%) 0,027 ops/s [Average]
  (min, avg, max) = (0,640, 0,696, 0,813), stdev = 0,036
  CI (99.9%): [0,669, 0,723] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate":
  2673,874 Â±(99.9%) 103,709 MB/sec [Average]
  (min, avg, max) = (2457,510, 2673,874, 3123,555), stdev = 138,448
  CI (99.9%): [2570,165, 2777,583] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate.norm":
  4026531915,024 Â±(99.9%) 3,513 B/op [Average]
  (min, avg, max) = (4026531904,889, 4026531915,024, 4026531923,429), stdev = 4,689
  CI (99.9%): [4026531911,511, 4026531918,537] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.count":
  1849,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (65,000, 73,960, 82,000), stdev = 4,439
  CI (99.9%): [1849,000, 1849,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.time":
  366717,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (13444,000, 14668,680, 16169,000), stdev = 840,985
  CI (99.9%): [366717,000, 366717,000] (assumes normal distribution)


# Run complete. Total time: 00:27:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                 (percentageOfHeapToAllocate)   Mode  Cnt           Score     Error   Units
BurstHeapMemoryAllocatorBenchmark.gc                                              P_25  thrpt   25           4,834 Â±   0,071   ops/s
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate                               P_25  thrpt   25        6186,869 Â±  91,094  MB/sec
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate.norm                          P_25  thrpt   25  1342177304,859 Â±   0,170    B/op
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.count                                    P_25  thrpt   25        3296,000            counts
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.time                                     P_25  thrpt   25      378555,000                ms
BurstHeapMemoryAllocatorBenchmark.gc                                              P_50  thrpt   25           0,671 Â±   0,028   ops/s
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate                               P_50  thrpt   25        1717,391 Â±  71,001  MB/sec
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate.norm                          P_50  thrpt   25  2684354639,541 Â±   2,282    B/op
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.count                                    P_50  thrpt   25        1560,000            counts
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.time                                     P_50  thrpt   25      261089,000                ms
BurstHeapMemoryAllocatorBenchmark.gc                                              P_75  thrpt   25           0,696 Â±   0,027   ops/s
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate                               P_75  thrpt   25        2673,874 Â± 103,709  MB/sec
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate.norm                          P_75  thrpt   25  4026531915,024 Â±   3,513    B/op
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.count                                    P_75  thrpt   25        1849,000            counts
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.time                                     P_75  thrpt   25      366717,000                ms

Benchmark result is saved to results/jdk-17/arm64/openjdk-hotspot-vm/BurstHeapMemoryAllocatorBenchmark_shenandoahGC_1thread.csv

Running BurstHeapMemoryAllocatorBenchmark benchmark ...
java  -jar benchmarks/target/benchmarks.jar .*BurstHeapMemoryAllocatorBenchmark.* -foe true -wi 5 -w 10 -i 5 -r 10 -f 5 -rf csv -rff results/jdk-17/arm64/openjdk-hotspot-vm/BurstHeapMemoryAllocatorBenchmark_shenandoahGC_2threads.csv -t 2 -prof gc -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseShenandoahGC"

# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseShenandoahGC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc
# Parameters: (percentageOfHeapToAllocate = P_25)

# Run progress: 0,00% complete, ETA 00:25:00
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
7,235 ops/s
# Warmup Iteration   2: 5,801 ops/s
# Warmup Iteration   3: 5,993 ops/s
# Warmup Iteration   4: 6,667 ops/s
# Warmup Iteration   5: 5,789 ops/s
Iteration   1: 7,773 ops/s
                 Â·gc.alloc.rate:      5026,736 MB/sec
                 Â·gc.alloc.rate.norm: 671088668,049 B/op
                 Â·gc.count:           146,000 counts
                 Â·gc.time:            12217,000 ms

Iteration   2: 6,286 ops/s
                 Â·gc.alloc.rate:      4067,677 MB/sec
                 Â·gc.alloc.rate.norm: 671088670,145 B/op
                 Â·gc.count:           128,000 counts
                 Â·gc.time:            12383,000 ms

Iteration   3: 7,005 ops/s
                 Â·gc.alloc.rate:      4487,847 MB/sec
                 Â·gc.alloc.rate.norm: 671088813,120 B/op
                 Â·gc.count:           122,000 counts
                 Â·gc.time:            12963,000 ms

Iteration   4: 5,914 ops/s
                 Â·gc.alloc.rate:      3831,139 MB/sec
                 Â·gc.alloc.rate.norm: 671088672,000 B/op
                 Â·gc.count:           107,000 counts
                 Â·gc.time:            11507,000 ms

Iteration   5: 6,069 ops/s
                 Â·gc.alloc.rate:      3794,702 MB/sec
                 Â·gc.alloc.rate.norm: 671088672,774 B/op
                 Â·gc.count:           125,000 counts
                 Â·gc.time:            12745,000 ms


# Run progress: 6,67% complete, ETA 00:24:45
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
6,454 ops/s
# Warmup Iteration   2: 6,650 ops/s
# Warmup Iteration   3: 6,568 ops/s
# Warmup Iteration   4: 6,677 ops/s
# Warmup Iteration   5: 6,761 ops/s
Iteration   1: 6,588 ops/s
                 Â·gc.alloc.rate:      4282,187 MB/sec
                 Â·gc.alloc.rate.norm: 671088670,353 B/op
                 Â·gc.count:           122,000 counts
                 Â·gc.time:            12228,000 ms

Iteration   2: 6,600 ops/s
                 Â·gc.alloc.rate:      4134,113 MB/sec
                 Â·gc.alloc.rate.norm: 671088670,353 B/op
                 Â·gc.count:           119,000 counts
                 Â·gc.time:            12191,000 ms

Iteration   3: 6,763 ops/s
                 Â·gc.alloc.rate:      4383,060 MB/sec
                 Â·gc.alloc.rate.norm: 671088669,943 B/op
                 Â·gc.count:           128,000 counts
                 Â·gc.time:            12590,000 ms

Iteration   4: 5,688 ops/s
                 Â·gc.alloc.rate:      3696,962 MB/sec
                 Â·gc.alloc.rate.norm: 671088855,729 B/op
                 Â·gc.count:           97,000 counts
                 Â·gc.time:            11374,000 ms

Iteration   5: 6,171 ops/s
                 Â·gc.alloc.rate:      3895,680 MB/sec
                 Â·gc.alloc.rate.norm: 671088671,742 B/op
                 Â·gc.count:           113,000 counts
                 Â·gc.time:            12130,000 ms


# Run progress: 13,33% complete, ETA 00:23:01
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
6,634 ops/s
# Warmup Iteration   2: 6,145 ops/s
# Warmup Iteration   3: 6,924 ops/s
# Warmup Iteration   4: 6,489 ops/s
# Warmup Iteration   5: 6,081 ops/s
Iteration   1: 6,670 ops/s
                 Â·gc.alloc.rate:      4329,759 MB/sec
                 Â·gc.alloc.rate.norm: 671088670,145 B/op
                 Â·gc.count:           122,000 counts
                 Â·gc.time:            11749,000 ms

Iteration   2: 6,588 ops/s
                 Â·gc.alloc.rate:      4206,786 MB/sec
                 Â·gc.alloc.rate.norm: 671088670,353 B/op
                 Â·gc.count:           123,000 counts
                 Â·gc.time:            12134,000 ms

Iteration   3: 5,338 ops/s
                 Â·gc.alloc.rate:      3489,032 MB/sec
                 Â·gc.alloc.rate.norm: 671088673,123 B/op
                 Â·gc.count:           98,000 counts
                 Â·gc.time:            11494,000 ms

Iteration   4: 7,966 ops/s
                 Â·gc.alloc.rate:      5146,932 MB/sec
                 Â·gc.alloc.rate.norm: 671088799,707 B/op
                 Â·gc.count:           143,000 counts
                 Â·gc.time:            11485,000 ms

Iteration   5: 5,957 ops/s
                 Â·gc.alloc.rate:      3907,309 MB/sec
                 Â·gc.alloc.rate.norm: 671088671,250 B/op
                 Â·gc.count:           107,000 counts
                 Â·gc.time:            11626,000 ms


# Run progress: 20,00% complete, ETA 00:21:17
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
6,462 ops/s
# Warmup Iteration   2: 6,402 ops/s
# Warmup Iteration   3: 8,698 ops/s
# Warmup Iteration   4: 7,906 ops/s
# Warmup Iteration   5: 7,111 ops/s
Iteration   1: 7,424 ops/s
                 Â·gc.alloc.rate:      4765,356 MB/sec
                 Â·gc.alloc.rate.norm: 671088668,675 B/op
                 Â·gc.count:           137,000 counts
                 Â·gc.time:            12115,000 ms

Iteration   2: 7,448 ops/s
                 Â·gc.alloc.rate:      4827,546 MB/sec
                 Â·gc.alloc.rate.norm: 671088669,333 B/op
                 Â·gc.count:           127,000 counts
                 Â·gc.time:            12747,000 ms

Iteration   3: 6,023 ops/s
                 Â·gc.alloc.rate:      3882,083 MB/sec
                 Â·gc.alloc.rate.norm: 671088671,492 B/op
                 Â·gc.count:           110,000 counts
                 Â·gc.time:            11363,000 ms

Iteration   4: 8,501 ops/s
                 Â·gc.alloc.rate:      5430,067 MB/sec
                 Â·gc.alloc.rate.norm: 671088791,448 B/op
                 Â·gc.count:           148,000 counts
                 Â·gc.time:            12706,000 ms

Iteration   5: 6,296 ops/s
                 Â·gc.alloc.rate:      4115,026 MB/sec
                 Â·gc.alloc.rate.norm: 671088670,567 B/op
                 Â·gc.count:           108,000 counts
                 Â·gc.time:            12388,000 ms


# Run progress: 26,67% complete, ETA 00:19:25
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
6,552 ops/s
# Warmup Iteration   2: 6,366 ops/s
# Warmup Iteration   3: 6,415 ops/s
# Warmup Iteration   4: 6,927 ops/s
# Warmup Iteration   5: 6,306 ops/s
Iteration   1: 7,399 ops/s
                 Â·gc.alloc.rate:      4713,265 MB/sec
                 Â·gc.alloc.rate.norm: 671088668,675 B/op
                 Â·gc.count:           136,000 counts
                 Â·gc.time:            12536,000 ms

Iteration   2: 7,944 ops/s
                 Â·gc.alloc.rate:      5130,418 MB/sec
                 Â·gc.alloc.rate.norm: 671088667,902 B/op
                 Â·gc.count:           137,000 counts
                 Â·gc.time:            12083,000 ms

Iteration   3: 6,897 ops/s
                 Â·gc.alloc.rate:      4491,283 MB/sec
                 Â·gc.alloc.rate.norm: 671088669,370 B/op
                 Â·gc.count:           127,000 counts
                 Â·gc.time:            11419,000 ms

Iteration   4: 7,107 ops/s
                 Â·gc.alloc.rate:      4582,157 MB/sec
                 Â·gc.alloc.rate.norm: 671088815,243 B/op
                 Â·gc.count:           130,000 counts
                 Â·gc.time:            11944,000 ms

Iteration   5: 6,566 ops/s
                 Â·gc.alloc.rate:      4264,030 MB/sec
                 Â·gc.alloc.rate.norm: 671088670,353 B/op
                 Â·gc.count:           123,000 counts
                 Â·gc.time:            11446,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc":
  6,759 Â±(99.9%) 0,590 ops/s [Average]
  (min, avg, max) = (5,338, 6,759, 8,501), stdev = 0,788
  CI (99.9%): [6,169, 7,350] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate":
  4355,246 Â±(99.9%) 376,890 MB/sec [Average]
  (min, avg, max) = (3489,032, 4355,246, 5430,067), stdev = 503,137
  CI (99.9%): [3978,356, 4732,136] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate.norm":
  671088699,274 Â±(99.9%) 44,910 B/op [Average]
  (min, avg, max) = (671088667,902, 671088699,274, 671088855,729), stdev = 59,953
  CI (99.9%): [671088654,364, 671088744,184] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.count":
  3083,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (97,000, 123,320, 148,000), stdev = 13,804
  CI (99.9%): [3083,000, 3083,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.time":
  301563,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (11363,000, 12062,520, 12963,000), stdev = 499,029
  CI (99.9%): [301563,000, 301563,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseShenandoahGC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc
# Parameters: (percentageOfHeapToAllocate = P_50)

# Run progress: 33,33% complete, ETA 00:17:40
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
1,387 ops/s
# Warmup Iteration   2: 1,243 ops/s
# Warmup Iteration   3: 1,253 ops/s
# Warmup Iteration   4: 1,452 ops/s
# Warmup Iteration   5: 1,520 ops/s
Iteration   1: 1,855 ops/s
                 Â·gc.alloc.rate:      2376,862 MB/sec
                 Â·gc.alloc.rate.norm: 1342177342,476 B/op
                 Â·gc.count:           81,000 counts
                 Â·gc.time:            12624,000 ms

Iteration   2: 1,760 ops/s
                 Â·gc.alloc.rate:      2349,047 MB/sec
                 Â·gc.alloc.rate.norm: 1342177342,476 B/op
                 Â·gc.count:           84,000 counts
                 Â·gc.time:            15151,000 ms

Iteration   3: 1,894 ops/s
                 Â·gc.alloc.rate:      2367,494 MB/sec
                 Â·gc.alloc.rate.norm: 1342177342,476 B/op
                 Â·gc.count:           82,000 counts
                 Â·gc.time:            13317,000 ms

Iteration   4: 1,724 ops/s
                 Â·gc.alloc.rate:      2288,536 MB/sec
                 Â·gc.alloc.rate.norm: 1342177857,143 B/op
                 Â·gc.count:           84,000 counts
                 Â·gc.time:            14421,000 ms

Iteration   5: 1,771 ops/s
                 Â·gc.alloc.rate:      2307,409 MB/sec
                 Â·gc.alloc.rate.norm: 1342177344,800 B/op
                 Â·gc.count:           79,000 counts
                 Â·gc.time:            13451,000 ms


# Run progress: 40,00% complete, ETA 00:16:18
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
1,117 ops/s
# Warmup Iteration   2: 1,149 ops/s
# Warmup Iteration   3: 1,274 ops/s
# Warmup Iteration   4: 1,507 ops/s
# Warmup Iteration   5: 1,706 ops/s
Iteration   1: 1,856 ops/s
                 Â·gc.alloc.rate:      2318,793 MB/sec
                 Â·gc.alloc.rate.norm: 1342177342,476 B/op
                 Â·gc.count:           82,000 counts
                 Â·gc.time:            13414,000 ms

Iteration   2: 1,543 ops/s
                 Â·gc.alloc.rate:      2050,281 MB/sec
                 Â·gc.alloc.rate.norm: 1342177353,778 B/op
                 Â·gc.count:           75,000 counts
                 Â·gc.time:            12787,000 ms

Iteration   3: 1,487 ops/s
                 Â·gc.alloc.rate:      1870,065 MB/sec
                 Â·gc.alloc.rate.norm: 1342177989,176 B/op
                 Â·gc.count:           77,000 counts
                 Â·gc.time:            12606,000 ms

Iteration   4: 1,510 ops/s
                 Â·gc.alloc.rate:      2019,467 MB/sec
                 Â·gc.alloc.rate.norm: 1342177350,222 B/op
                 Â·gc.count:           77,000 counts
                 Â·gc.time:            12838,000 ms

Iteration   5: 1,421 ops/s
                 Â·gc.alloc.rate:      1783,222 MB/sec
                 Â·gc.alloc.rate.norm: 1342177353,412 B/op
                 Â·gc.count:           77,000 counts
                 Â·gc.time:            12826,000 ms


# Run progress: 46,67% complete, ETA 00:14:48
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
1,487 ops/s
# Warmup Iteration   2: 1,409 ops/s
# Warmup Iteration   3: 1,382 ops/s
# Warmup Iteration   4: 1,612 ops/s
# Warmup Iteration   5: 1,426 ops/s
Iteration   1: 1,685 ops/s
                 Â·gc.alloc.rate:      2197,961 MB/sec
                 Â·gc.alloc.rate.norm: 1342177347,368 B/op
                 Â·gc.count:           74,000 counts
                 Â·gc.time:            11812,000 ms

Iteration   2: 1,793 ops/s
                 Â·gc.alloc.rate:      2299,980 MB/sec
                 Â·gc.alloc.rate.norm: 1342177342,476 B/op
                 Â·gc.count:           79,000 counts
                 Â·gc.time:            13150,000 ms

Iteration   3: 1,498 ops/s
                 Â·gc.alloc.rate:      2018,135 MB/sec
                 Â·gc.alloc.rate.norm: 1342177350,222 B/op
                 Â·gc.count:           75,000 counts
                 Â·gc.time:            13857,000 ms

Iteration   4: 1,768 ops/s
                 Â·gc.alloc.rate:      2322,549 MB/sec
                 Â·gc.alloc.rate.norm: 1342177857,143 B/op
                 Â·gc.count:           84,000 counts
                 Â·gc.time:            14090,000 ms

Iteration   5: 1,928 ops/s
                 Â·gc.alloc.rate:      2362,450 MB/sec
                 Â·gc.alloc.rate.norm: 1342177342,476 B/op
                 Â·gc.count:           82,000 counts
                 Â·gc.time:            13384,000 ms


# Run progress: 53,33% complete, ETA 00:13:06
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
1,552 ops/s
# Warmup Iteration   2: 1,663 ops/s
# Warmup Iteration   3: 1,684 ops/s
# Warmup Iteration   4: 1,743 ops/s
# Warmup Iteration   5: 1,833 ops/s
Iteration   1: 1,884 ops/s
                 Â·gc.alloc.rate:      2392,741 MB/sec
                 Â·gc.alloc.rate.norm: 1342177342,476 B/op
                 Â·gc.count:           80,000 counts
                 Â·gc.time:            13703,000 ms

Iteration   2: 1,524 ops/s
                 Â·gc.alloc.rate:      2027,931 MB/sec
                 Â·gc.alloc.rate.norm: 1342177353,778 B/op
                 Â·gc.count:           75,000 counts
                 Â·gc.time:            12902,000 ms

Iteration   3: 1,849 ops/s
                 Â·gc.alloc.rate:      2334,044 MB/sec
                 Â·gc.alloc.rate.norm: 1342177342,476 B/op
                 Â·gc.count:           80,000 counts
                 Â·gc.time:            13528,000 ms

Iteration   4: 1,538 ops/s
                 Â·gc.alloc.rate:      2000,271 MB/sec
                 Â·gc.alloc.rate.norm: 1342177916,211 B/op
                 Â·gc.count:           78,000 counts
                 Â·gc.time:            14054,000 ms

Iteration   5: 1,808 ops/s
                 Â·gc.alloc.rate:      2312,351 MB/sec
                 Â·gc.alloc.rate.norm: 1342177342,476 B/op
                 Â·gc.count:           82,000 counts
                 Â·gc.time:            13816,000 ms


# Run progress: 60,00% complete, ETA 00:11:20
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
1,448 ops/s
# Warmup Iteration   2: 1,285 ops/s
# Warmup Iteration   3: 1,257 ops/s
# Warmup Iteration   4: 1,263 ops/s
# Warmup Iteration   5: 1,278 ops/s
Iteration   1: 1,287 ops/s
                 Â·gc.alloc.rate:      1710,749 MB/sec
                 Â·gc.alloc.rate.norm: 1342177361,067 B/op
                 Â·gc.count:           59,000 counts
                 Â·gc.time:            11711,000 ms

Iteration   2: 1,819 ops/s
                 Â·gc.alloc.rate:      2309,457 MB/sec
                 Â·gc.alloc.rate.norm: 1342177342,476 B/op
                 Â·gc.count:           82,000 counts
                 Â·gc.time:            13904,000 ms

Iteration   3: 1,698 ops/s
                 Â·gc.alloc.rate:      2262,194 MB/sec
                 Â·gc.alloc.rate.norm: 1342177342,476 B/op
                 Â·gc.count:           84,000 counts
                 Â·gc.time:            14615,000 ms

Iteration   4: 1,621 ops/s
                 Â·gc.alloc.rate:      2020,693 MB/sec
                 Â·gc.alloc.rate.norm: 1342177916,211 B/op
                 Â·gc.count:           78,000 counts
                 Â·gc.time:            13350,000 ms

Iteration   5: 1,696 ops/s
                 Â·gc.alloc.rate:      2202,876 MB/sec
                 Â·gc.alloc.rate.norm: 1342177344,800 B/op
                 Â·gc.count:           78,000 counts
                 Â·gc.time:            13881,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc":
  1,689 Â±(99.9%) 0,128 ops/s [Average]
  (min, avg, max) = (1,287, 1,689, 1,928), stdev = 0,171
  CI (99.9%): [1,561, 1,816] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate":
  2180,222 Â±(99.9%) 149,184 MB/sec [Average]
  (min, avg, max) = (1710,749, 2180,222, 2392,741), stdev = 199,157
  CI (99.9%): [2031,038, 2329,407] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate.norm":
  1342177458,503 Â±(99.9%) 172,359 B/op [Average]
  (min, avg, max) = (1342177342,476, 1342177458,503, 1342177989,176), stdev = 230,095
  CI (99.9%): [1342177286,143, 1342177630,862] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.count":
  1968,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (59,000, 78,720, 84,000), stdev = 5,152
  CI (99.9%): [1968,000, 1968,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.time":
  335192,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (11711,000, 13407,680, 15151,000), stdev = 801,394
  CI (99.9%): [335192,000, 335192,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseShenandoahGC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc
# Parameters: (percentageOfHeapToAllocate = P_75)

# Run progress: 66,67% complete, ETA 00:09:32
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,734 ops/s
# Warmup Iteration   2: 0,518 ops/s
# Warmup Iteration   3: 0,854 ops/s
# Warmup Iteration   4: 0,530 ops/s
# Warmup Iteration   5: 0,631 ops/s
Iteration   1: 0,640 ops/s
                 Â·gc.alloc.rate:      1259,865 MB/sec
                 Â·gc.alloc.rate.norm: 2013266033,600 B/op
                 Â·gc.count:           83,000 counts
                 Â·gc.time:            21833,000 ms

Iteration   2: 0,752 ops/s
                 Â·gc.alloc.rate:      1333,214 MB/sec
                 Â·gc.alloc.rate.norm: 2013266044,444 B/op
                 Â·gc.count:           68,000 counts
                 Â·gc.time:            19404,000 ms

Iteration   3: 0,722 ops/s
                 Â·gc.alloc.rate:      1291,146 MB/sec
                 Â·gc.alloc.rate.norm: 2013266024,727 B/op
                 Â·gc.count:           83,000 counts
                 Â·gc.time:            23966,000 ms

Iteration   4: 0,795 ops/s
                 Â·gc.alloc.rate:      1400,540 MB/sec
                 Â·gc.alloc.rate.norm: 2013267007,273 B/op
                 Â·gc.count:           80,000 counts
                 Â·gc.time:            19492,000 ms

Iteration   5: 0,766 ops/s
                 Â·gc.alloc.rate:      1423,634 MB/sec
                 Â·gc.alloc.rate.norm: 2013266044,444 B/op
                 Â·gc.count:           71,000 counts
                 Â·gc.time:            18038,000 ms


# Run progress: 73,33% complete, ETA 00:07:49
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,821 ops/s
# Warmup Iteration   2: 0,645 ops/s
# Warmup Iteration   3: 0,727 ops/s
# Warmup Iteration   4: 0,502 ops/s
# Warmup Iteration   5: 0,510 ops/s
Iteration   1: 0,835 ops/s
                 Â·gc.alloc.rate:      1268,278 MB/sec
                 Â·gc.alloc.rate.norm: 2013266044,444 B/op
                 Â·gc.count:           73,000 counts
                 Â·gc.time:            20186,000 ms

Iteration   2: 0,423 ops/s
                 Â·gc.alloc.rate:      838,764 MB/sec
                 Â·gc.alloc.rate.norm: 2013266075,429 B/op
                 Â·gc.count:           68,000 counts
                 Â·gc.time:            21960,000 ms

Iteration   3: 0,892 ops/s
                 Â·gc.alloc.rate:      1584,315 MB/sec
                 Â·gc.alloc.rate.norm: 2013266024,727 B/op
                 Â·gc.count:           80,000 counts
                 Â·gc.time:            19921,000 ms

Iteration   4: 0,595 ops/s
                 Â·gc.alloc.rate:      1230,728 MB/sec
                 Â·gc.alloc.rate.norm: 2013267245,333 B/op
                 Â·gc.count:           68,000 counts
                 Â·gc.time:            18994,000 ms

Iteration   5: 0,649 ops/s
                 Â·gc.alloc.rate:      1350,722 MB/sec
                 Â·gc.alloc.rate.norm: 2013266044,444 B/op
                 Â·gc.count:           75,000 counts
                 Â·gc.time:            19995,000 ms


# Run progress: 80,00% complete, ETA 00:05:59
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,742 ops/s
# Warmup Iteration   2: 0,697 ops/s
# Warmup Iteration   3: 0,639 ops/s
# Warmup Iteration   4: 0,563 ops/s
# Warmup Iteration   5: 0,586 ops/s
Iteration   1: 0,675 ops/s
                 Â·gc.alloc.rate:      1243,185 MB/sec
                 Â·gc.alloc.rate.norm: 2013266044,444 B/op
                 Â·gc.count:           61,000 counts
                 Â·gc.time:            18887,000 ms

Iteration   2: 0,719 ops/s
                 Â·gc.alloc.rate:      1336,792 MB/sec
                 Â·gc.alloc.rate.norm: 2013266036,800 B/op
                 Â·gc.count:           76,000 counts
                 Â·gc.time:            22457,000 ms

Iteration   3: 0,872 ops/s
                 Â·gc.alloc.rate:      1530,641 MB/sec
                 Â·gc.alloc.rate.norm: 2013266017,333 B/op
                 Â·gc.count:           87,000 counts
                 Â·gc.time:            22763,000 ms

Iteration   4: 0,614 ops/s
                 Â·gc.alloc.rate:      1214,933 MB/sec
                 Â·gc.alloc.rate.norm: 2013267409,000 B/op
                 Â·gc.count:           58,000 counts
                 Â·gc.time:            17313,000 ms

Iteration   5: 0,513 ops/s
                 Â·gc.alloc.rate:      1048,629 MB/sec
                 Â·gc.alloc.rate.norm: 2013266058,000 B/op
                 Â·gc.count:           62,000 counts
                 Â·gc.time:            20077,000 ms


# Run progress: 86,67% complete, ETA 00:04:03
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,584 ops/s
# Warmup Iteration   2: 0,918 ops/s
# Warmup Iteration   3: 0,717 ops/s
# Warmup Iteration   4: 0,614 ops/s
# Warmup Iteration   5: 0,728 ops/s
Iteration   1: 0,924 ops/s
                 Â·gc.alloc.rate:      1671,477 MB/sec
                 Â·gc.alloc.rate.norm: 2013266024,727 B/op
                 Â·gc.count:           76,000 counts
                 Â·gc.time:            18486,000 ms

Iteration   2: 0,517 ops/s
                 Â·gc.alloc.rate:      1078,124 MB/sec
                 Â·gc.alloc.rate.norm: 2013266058,000 B/op
                 Â·gc.count:           58,000 counts
                 Â·gc.time:            20498,000 ms

Iteration   3: 0,633 ops/s
                 Â·gc.alloc.rate:      1259,561 MB/sec
                 Â·gc.alloc.rate.norm: 2013266033,600 B/op
                 Â·gc.count:           67,000 counts
                 Â·gc.time:            22303,000 ms

Iteration   4: 0,826 ops/s
                 Â·gc.alloc.rate:      1483,598 MB/sec
                 Â·gc.alloc.rate.norm: 2013267245,333 B/op
                 Â·gc.count:           64,000 counts
                 Â·gc.time:            16425,000 ms

Iteration   5: 0,486 ops/s
                 Â·gc.alloc.rate:      952,304 MB/sec
                 Â·gc.alloc.rate.norm: 2013266075,429 B/op
                 Â·gc.count:           49,000 counts
                 Â·gc.time:            21253,000 ms


# Run progress: 93,33% complete, ETA 00:02:03
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,780 ops/s
# Warmup Iteration   2: 0,355 ops/s
# Warmup Iteration   3: 0,769 ops/s
# Warmup Iteration   4: 0,603 ops/s
# Warmup Iteration   5: 0,669 ops/s
Iteration   1: 0,649 ops/s
                 Â·gc.alloc.rate:      1238,957 MB/sec
                 Â·gc.alloc.rate.norm: 2013266058,000 B/op
                 Â·gc.count:           59,000 counts
                 Â·gc.time:            15167,000 ms

Iteration   2: 0,504 ops/s
                 Â·gc.alloc.rate:      1058,322 MB/sec
                 Â·gc.alloc.rate.norm: 2013266044,444 B/op
                 Â·gc.count:           73,000 counts
                 Â·gc.time:            22756,000 ms

Iteration   3: 0,800 ops/s
                 Â·gc.alloc.rate:      1573,532 MB/sec
                 Â·gc.alloc.rate.norm: 2013266048,000 B/op
                 Â·gc.count:           64,000 counts
                 Â·gc.time:            14853,000 ms

Iteration   4: 0,851 ops/s
                 Â·gc.alloc.rate:      1718,738 MB/sec
                 Â·gc.alloc.rate.norm: 2013267007,273 B/op
                 Â·gc.count:           78,000 counts
                 Â·gc.time:            16147,000 ms

Iteration   5: 0,763 ops/s
                 Â·gc.alloc.rate:      1374,012 MB/sec
                 Â·gc.alloc.rate.norm: 2013266044,444 B/op
                 Â·gc.count:           70,000 counts
                 Â·gc.time:            18151,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc":
  0,697 Â±(99.9%) 0,104 ops/s [Average]
  (min, avg, max) = (0,423, 0,697, 0,924), stdev = 0,139
  CI (99.9%): [0,592, 0,801] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate":
  1310,561 Â±(99.9%) 161,587 MB/sec [Average]
  (min, avg, max) = (838,764, 1310,561, 1718,738), stdev = 215,714
  CI (99.9%): [1148,973, 1472,148] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate.norm":
  2013266271,748 Â±(99.9%) 352,458 B/op [Average]
  (min, avg, max) = (2013266017,333, 2013266271,748, 2013267409,000), stdev = 470,521
  CI (99.9%): [2013265919,290, 2013266624,206] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.count":
  1751,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (49,000, 70,040, 87,000), stdev = 9,343
  CI (99.9%): [1751,000, 1751,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.time":
  491325,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (14853,000, 19653,000, 23966,000), stdev = 2462,010
  CI (99.9%): [491325,000, 491325,000] (assumes normal distribution)


# Run complete. Total time: 00:31:05

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                 (percentageOfHeapToAllocate)   Mode  Cnt           Score     Error   Units
BurstHeapMemoryAllocatorBenchmark.gc                                              P_25  thrpt   25           6,759 Â±   0,590   ops/s
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate                               P_25  thrpt   25        4355,246 Â± 376,890  MB/sec
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate.norm                          P_25  thrpt   25   671088699,274 Â±  44,910    B/op
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.count                                    P_25  thrpt   25        3083,000            counts
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.time                                     P_25  thrpt   25      301563,000                ms
BurstHeapMemoryAllocatorBenchmark.gc                                              P_50  thrpt   25           1,689 Â±   0,128   ops/s
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate                               P_50  thrpt   25        2180,222 Â± 149,184  MB/sec
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate.norm                          P_50  thrpt   25  1342177458,503 Â± 172,359    B/op
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.count                                    P_50  thrpt   25        1968,000            counts
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.time                                     P_50  thrpt   25      335192,000                ms
BurstHeapMemoryAllocatorBenchmark.gc                                              P_75  thrpt   25           0,697 Â±   0,104   ops/s
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate                               P_75  thrpt   25        1310,561 Â± 161,587  MB/sec
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate.norm                          P_75  thrpt   25  2013266271,748 Â± 352,458    B/op
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.count                                    P_75  thrpt   25        1751,000            counts
BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.time                                     P_75  thrpt   25      491325,000                ms

Benchmark result is saved to results/jdk-17/arm64/openjdk-hotspot-vm/BurstHeapMemoryAllocatorBenchmark_shenandoahGC_2threads.csv

Running BurstHeapMemoryAllocatorBenchmark benchmark ...
java  -jar benchmarks/target/benchmarks.jar .*BurstHeapMemoryAllocatorBenchmark.* -foe true -wi 5 -w 10 -i 5 -r 10 -f 5 -rf csv -rff results/jdk-17/arm64/openjdk-hotspot-vm/BurstHeapMemoryAllocatorBenchmark_zGC_1thread.csv -t 1 -prof gc -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseZGC"

# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc
# Parameters: (percentageOfHeapToAllocate = P_25)

# Run progress: 0,00% complete, ETA 00:25:00
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
3,942 ops/s
# Warmup Iteration   2: 3,887 ops/s
# Warmup Iteration   3: 6,541 ops/s
# Warmup Iteration   4: 3,814 ops/s
# Warmup Iteration   5: 3,971 ops/s
Iteration   1: 3,670 ops/s
                 Â·gc.alloc.rate:      5637,111 MB/sec
                 Â·gc.alloc.rate.norm: 1610612767,568 B/op
                 Â·gc.count:           128,000 counts
                 Â·gc.time:            8872,000 ms

Iteration   2: 5,671 ops/s
                 Â·gc.alloc.rate:      8710,735 MB/sec
                 Â·gc.alloc.rate.norm: 1610612762,105 B/op
                 Â·gc.count:           195,000 counts
                 Â·gc.time:            6762,000 ms

Iteration   3: 5,675 ops/s
                 Â·gc.alloc.rate:      8716,621 MB/sec
                 Â·gc.alloc.rate.norm: 1610612762,621 B/op
                 Â·gc.count:           157,000 counts
                 Â·gc.time:            5914,000 ms

Iteration   4: 6,746 ops/s
                 Â·gc.alloc.rate:      10361,598 MB/sec
                 Â·gc.alloc.rate.norm: 1610612760,471 B/op
                 Â·gc.count:           247,000 counts
                 Â·gc.time:            5628,000 ms

Iteration   5: 6,039 ops/s
                 Â·gc.alloc.rate:      9276,074 MB/sec
                 Â·gc.alloc.rate.norm: 1610612761,443 B/op
                 Â·gc.count:           184,000 counts
                 Â·gc.time:            6105,000 ms


# Run progress: 6,67% complete, ETA 00:24:32
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
4,665 ops/s
# Warmup Iteration   2: 5,082 ops/s
# Warmup Iteration   3: 4,797 ops/s
# Warmup Iteration   4: 5,592 ops/s
# Warmup Iteration   5: 5,668 ops/s
Iteration   1: 5,392 ops/s
                 Â·gc.alloc.rate:      8281,834 MB/sec
                 Â·gc.alloc.rate.norm: 1610612762,667 B/op
                 Â·gc.count:           180,000 counts
                 Â·gc.time:            6405,000 ms

Iteration   2: 4,916 ops/s
                 Â·gc.alloc.rate:      7551,380 MB/sec
                 Â·gc.alloc.rate.norm: 1610612762,720 B/op
                 Â·gc.count:           160,000 counts
                 Â·gc.time:            7799,000 ms

Iteration   3: 4,223 ops/s
                 Â·gc.alloc.rate:      6486,983 MB/sec
                 Â·gc.alloc.rate.norm: 1610612764,182 B/op
                 Â·gc.count:           144,000 counts
                 Â·gc.time:            8226,000 ms

Iteration   4: 5,174 ops/s
                 Â·gc.alloc.rate:      7947,630 MB/sec
                 Â·gc.alloc.rate.norm: 1610612762,868 B/op
                 Â·gc.count:           173,000 counts
                 Â·gc.time:            7705,000 ms

Iteration   5: 5,459 ops/s
                 Â·gc.alloc.rate:      8385,178 MB/sec
                 Â·gc.alloc.rate.norm: 1610612762,473 B/op
                 Â·gc.count:           195,000 counts
                 Â·gc.time:            7185,000 ms


# Run progress: 13,33% complete, ETA 00:22:39
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
5,185 ops/s
# Warmup Iteration   2: 6,407 ops/s
# Warmup Iteration   3: 5,653 ops/s
# Warmup Iteration   4: 7,757 ops/s
# Warmup Iteration   5: 5,247 ops/s
Iteration   1: 6,853 ops/s
                 Â·gc.alloc.rate:      10525,287 MB/sec
                 Â·gc.alloc.rate.norm: 1610612759,768 B/op
                 Â·gc.count:           204,000 counts
                 Â·gc.time:            4728,000 ms

Iteration   2: 5,747 ops/s
                 Â·gc.alloc.rate:      8827,125 MB/sec
                 Â·gc.alloc.rate.norm: 1610612761,241 B/op
                 Â·gc.count:           189,000 counts
                 Â·gc.time:            6293,000 ms

Iteration   3: 6,081 ops/s
                 Â·gc.alloc.rate:      9339,715 MB/sec
                 Â·gc.alloc.rate.norm: 1610612761,143 B/op
                 Â·gc.count:           220,000 counts
                 Â·gc.time:            5191,000 ms

Iteration   4: 4,813 ops/s
                 Â·gc.alloc.rate:      7391,627 MB/sec
                 Â·gc.alloc.rate.norm: 1610612763,755 B/op
                 Â·gc.count:           168,000 counts
                 Â·gc.time:            8048,000 ms

Iteration   5: 3,920 ops/s
                 Â·gc.alloc.rate:      6021,544 MB/sec
                 Â·gc.alloc.rate.norm: 1610612766,400 B/op
                 Â·gc.count:           132,000 counts
                 Â·gc.time:            8588,000 ms


# Run progress: 20,00% complete, ETA 00:20:57
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
4,469 ops/s
# Warmup Iteration   2: 4,350 ops/s
# Warmup Iteration   3: 5,597 ops/s
# Warmup Iteration   4: 4,984 ops/s
# Warmup Iteration   5: 4,932 ops/s
Iteration   1: 3,836 ops/s
                 Â·gc.alloc.rate:      5891,619 MB/sec
                 Â·gc.alloc.rate.norm: 1610612765,400 B/op
                 Â·gc.count:           136,000 counts
                 Â·gc.time:            8876,000 ms

Iteration   2: 4,452 ops/s
                 Â·gc.alloc.rate:      6837,766 MB/sec
                 Â·gc.alloc.rate.norm: 1610612763,911 B/op
                 Â·gc.count:           148,000 counts
                 Â·gc.time:            8057,000 ms

Iteration   3: 4,049 ops/s
                 Â·gc.alloc.rate:      6219,514 MB/sec
                 Â·gc.alloc.rate.norm: 1610612766,049 B/op
                 Â·gc.count:           141,000 counts
                 Â·gc.time:            8356,000 ms

Iteration   4: 4,570 ops/s
                 Â·gc.alloc.rate:      7019,360 MB/sec
                 Â·gc.alloc.rate.norm: 1610612763,652 B/op
                 Â·gc.count:           159,000 counts
                 Â·gc.time:            7896,000 ms

Iteration   5: 3,962 ops/s
                 Â·gc.alloc.rate:      6086,094 MB/sec
                 Â·gc.alloc.rate.norm: 1610612766,400 B/op
                 Â·gc.count:           140,000 counts
                 Â·gc.time:            8411,000 ms


# Run progress: 26,67% complete, ETA 00:19:10
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
3,801 ops/s
# Warmup Iteration   2: 4,131 ops/s
# Warmup Iteration   3: 4,289 ops/s
# Warmup Iteration   4: 4,133 ops/s
# Warmup Iteration   5: 3,873 ops/s
Iteration   1: 3,573 ops/s
                 Â·gc.alloc.rate:      5488,504 MB/sec
                 Â·gc.alloc.rate.norm: 1610612766,486 B/op
                 Â·gc.count:           136,000 counts
                 Â·gc.time:            9153,000 ms

Iteration   2: 4,168 ops/s
                 Â·gc.alloc.rate:      6402,059 MB/sec
                 Â·gc.alloc.rate.norm: 1610612764,762 B/op
                 Â·gc.count:           139,000 counts
                 Â·gc.time:            8445,000 ms

Iteration   3: 4,282 ops/s
                 Â·gc.alloc.rate:      6576,989 MB/sec
                 Â·gc.alloc.rate.norm: 1610612764,182 B/op
                 Â·gc.count:           148,000 counts
                 Â·gc.time:            8076,000 ms

Iteration   4: 3,917 ops/s
                 Â·gc.alloc.rate:      6016,209 MB/sec
                 Â·gc.alloc.rate.norm: 1610612766,400 B/op
                 Â·gc.count:           132,000 counts
                 Â·gc.time:            8577,000 ms

Iteration   5: 4,475 ops/s
                 Â·gc.alloc.rate:      6873,753 MB/sec
                 Â·gc.alloc.rate.norm: 1610612764,255 B/op
                 Â·gc.count:           152,000 counts
                 Â·gc.time:            8489,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc":
  4,867 Â±(99.9%) 0,721 ops/s [Average]
  (min, avg, max) = (3,573, 4,867, 6,853), stdev = 0,963
  CI (99.9%): [4,146, 5,588] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate":
  7474,892 Â±(99.9%) 1107,441 MB/sec [Average]
  (min, avg, max) = (5488,504, 7474,892, 10525,287), stdev = 1478,403
  CI (99.9%): [6367,451, 8582,334] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate.norm":
  1610612763,717 Â±(99.9%) 1,578 B/op [Average]
  (min, avg, max) = (1610612759,768, 1610612763,717, 1610612767,568), stdev = 2,106
  CI (99.9%): [1610612762,139, 1610612765,294] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.count":
  4107,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (128,000, 164,280, 247,000), stdev = 30,762
  CI (99.9%): [4107,000, 4107,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.time":
  187785,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (4728,000, 7511,400, 9153,000), stdev = 1263,610
  CI (99.9%): [187785,000, 187785,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc
# Parameters: (percentageOfHeapToAllocate = P_50)

# Run progress: 33,33% complete, ETA 00:17:25
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
2,324 ops/s
# Warmup Iteration   2: 2,103 ops/s
# Warmup Iteration   3: 2,357 ops/s
# Warmup Iteration   4: 2,266 ops/s
# Warmup Iteration   5: 2,184 ops/s
Iteration   1: 2,287 ops/s
                 Â·gc.alloc.rate:      7024,563 MB/sec
                 Â·gc.alloc.rate.norm: 3221225513,043 B/op
                 Â·gc.count:           192,000 counts
                 Â·gc.time:            8530,000 ms

Iteration   2: 2,298 ops/s
                 Â·gc.alloc.rate:      7059,300 MB/sec
                 Â·gc.alloc.rate.norm: 3221225510,333 B/op
                 Â·gc.count:           200,000 counts
                 Â·gc.time:            8874,000 ms

Iteration   3: 2,313 ops/s
                 Â·gc.alloc.rate:      7106,463 MB/sec
                 Â·gc.alloc.rate.norm: 3221225510,333 B/op
                 Â·gc.count:           212,000 counts
                 Â·gc.time:            8863,000 ms

Iteration   4: 2,358 ops/s
                 Â·gc.alloc.rate:      7242,917 MB/sec
                 Â·gc.alloc.rate.norm: 3221225513,667 B/op
                 Â·gc.count:           204,000 counts
                 Â·gc.time:            8629,000 ms

Iteration   5: 2,199 ops/s
                 Â·gc.alloc.rate:      6754,669 MB/sec
                 Â·gc.alloc.rate.norm: 3221225513,043 B/op
                 Â·gc.count:           196,000 counts
                 Â·gc.time:            8818,000 ms


# Run progress: 40,00% complete, ETA 00:15:42
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
2,171 ops/s
# Warmup Iteration   2: 2,453 ops/s
# Warmup Iteration   3: 2,194 ops/s
# Warmup Iteration   4: 2,092 ops/s
# Warmup Iteration   5: 2,280 ops/s
Iteration   1: 2,261 ops/s
                 Â·gc.alloc.rate:      6944,965 MB/sec
                 Â·gc.alloc.rate.norm: 3221225513,043 B/op
                 Â·gc.count:           192,000 counts
                 Â·gc.time:            8610,000 ms

Iteration   2: 2,442 ops/s
                 Â·gc.alloc.rate:      7501,281 MB/sec
                 Â·gc.alloc.rate.norm: 3221225511,040 B/op
                 Â·gc.count:           212,000 counts
                 Â·gc.time:            8733,000 ms

Iteration   3: 2,189 ops/s
                 Â·gc.alloc.rate:      6725,137 MB/sec
                 Â·gc.alloc.rate.norm: 3221225514,182 B/op
                 Â·gc.count:           184,000 counts
                 Â·gc.time:            8490,000 ms

Iteration   4: 2,406 ops/s
                 Â·gc.alloc.rate:      7389,609 MB/sec
                 Â·gc.alloc.rate.norm: 3221225511,040 B/op
                 Â·gc.count:           212,000 counts
                 Â·gc.time:            8708,000 ms

Iteration   5: 2,224 ops/s
                 Â·gc.alloc.rate:      6833,242 MB/sec
                 Â·gc.alloc.rate.norm: 3221225513,043 B/op
                 Â·gc.count:           208,000 counts
                 Â·gc.time:            8752,000 ms


# Run progress: 46,67% complete, ETA 00:14:02
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
2,261 ops/s
# Warmup Iteration   2: 2,385 ops/s
# Warmup Iteration   3: 2,121 ops/s
# Warmup Iteration   4: 2,220 ops/s
# Warmup Iteration   5: 2,192 ops/s
Iteration   1: 2,372 ops/s
                 Â·gc.alloc.rate:      7285,414 MB/sec
                 Â·gc.alloc.rate.norm: 3221225509,440 B/op
                 Â·gc.count:           216,000 counts
                 Â·gc.time:            8911,000 ms

Iteration   2: 2,094 ops/s
                 Â·gc.alloc.rate:      6433,823 MB/sec
                 Â·gc.alloc.rate.norm: 3221225515,429 B/op
                 Â·gc.count:           196,000 counts
                 Â·gc.time:            8349,000 ms

Iteration   3: 2,172 ops/s
                 Â·gc.alloc.rate:      6672,268 MB/sec
                 Â·gc.alloc.rate.norm: 3221225516,000 B/op
                 Â·gc.count:           184,000 counts
                 Â·gc.time:            8569,000 ms

Iteration   4: 2,342 ops/s
                 Â·gc.alloc.rate:      7195,035 MB/sec
                 Â·gc.alloc.rate.norm: 3221225512,000 B/op
                 Â·gc.count:           204,000 counts
                 Â·gc.time:            8720,000 ms

Iteration   5: 2,222 ops/s
                 Â·gc.alloc.rate:      6825,926 MB/sec
                 Â·gc.alloc.rate.norm: 3221225513,043 B/op
                 Â·gc.count:           184,000 counts
                 Â·gc.time:            8688,000 ms


# Run progress: 53,33% complete, ETA 00:12:20
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
2,356 ops/s
# Warmup Iteration   2: 2,394 ops/s
# Warmup Iteration   3: 2,021 ops/s
# Warmup Iteration   4: 2,129 ops/s
# Warmup Iteration   5: 2,056 ops/s
Iteration   1: 2,157 ops/s
                 Â·gc.alloc.rate:      6627,121 MB/sec
                 Â·gc.alloc.rate.norm: 3221225512,364 B/op
                 Â·gc.count:           204,000 counts
                 Â·gc.time:            8476,000 ms

Iteration   2: 2,262 ops/s
                 Â·gc.alloc.rate:      6947,285 MB/sec
                 Â·gc.alloc.rate.norm: 3221225513,043 B/op
                 Â·gc.count:           192,000 counts
                 Â·gc.time:            8670,000 ms

Iteration   3: 2,229 ops/s
                 Â·gc.alloc.rate:      6848,517 MB/sec
                 Â·gc.alloc.rate.norm: 3221225511,304 B/op
                 Â·gc.count:           192,000 counts
                 Â·gc.time:            8744,000 ms

Iteration   4: 2,461 ops/s
                 Â·gc.alloc.rate:      7560,065 MB/sec
                 Â·gc.alloc.rate.norm: 3221225511,040 B/op
                 Â·gc.count:           204,000 counts
                 Â·gc.time:            8714,000 ms

Iteration   5: 2,155 ops/s
                 Â·gc.alloc.rate:      6618,964 MB/sec
                 Â·gc.alloc.rate.norm: 3221225516,000 B/op
                 Â·gc.count:           199,000 counts
                 Â·gc.time:            8810,000 ms


# Run progress: 60,00% complete, ETA 00:10:36
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
2,112 ops/s
# Warmup Iteration   2: 2,247 ops/s
# Warmup Iteration   3: 2,260 ops/s
# Warmup Iteration   4: 2,161 ops/s
# Warmup Iteration   5: 2,188 ops/s
Iteration   1: 2,250 ops/s
                 Â·gc.alloc.rate:      6913,169 MB/sec
                 Â·gc.alloc.rate.norm: 3221225511,304 B/op
                 Â·gc.count:           188,000 counts
                 Â·gc.time:            8597,000 ms

Iteration   2: 2,267 ops/s
                 Â·gc.alloc.rate:      6965,544 MB/sec
                 Â·gc.alloc.rate.norm: 3221225513,043 B/op
                 Â·gc.count:           196,000 counts
                 Â·gc.time:            8648,000 ms

Iteration   3: 2,247 ops/s
                 Â·gc.alloc.rate:      6902,648 MB/sec
                 Â·gc.alloc.rate.norm: 3221225511,304 B/op
                 Â·gc.count:           192,000 counts
                 Â·gc.time:            8647,000 ms

Iteration   4: 1,995 ops/s
                 Â·gc.alloc.rate:      6128,053 MB/sec
                 Â·gc.alloc.rate.norm: 3221225517,333 B/op
                 Â·gc.count:           180,000 counts
                 Â·gc.time:            8892,000 ms

Iteration   5: 2,096 ops/s
                 Â·gc.alloc.rate:      6438,244 MB/sec
                 Â·gc.alloc.rate.norm: 3221225515,429 B/op
                 Â·gc.count:           176,000 counts
                 Â·gc.time:            8405,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc":
  2,252 Â±(99.9%) 0,083 ops/s [Average]
  (min, avg, max) = (1,995, 2,252, 2,461), stdev = 0,111
  CI (99.9%): [2,169, 2,335] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate":
  6917,769 Â±(99.9%) 254,509 MB/sec [Average]
  (min, avg, max) = (6128,053, 6917,769, 7560,065), stdev = 339,762
  CI (99.9%): [6663,260, 7172,278] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate.norm":
  3221225512,834 Â±(99.9%) 1,515 B/op [Average]
  (min, avg, max) = (3221225509,440, 3221225512,834, 3221225517,333), stdev = 2,023
  CI (99.9%): [3221225511,319, 3221225514,349] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.count":
  4919,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (176,000, 196,760, 216,000), stdev = 10,822
  CI (99.9%): [4919,000, 4919,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.time":
  216847,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (8349,000, 8673,880, 8911,000), stdev = 149,228
  CI (99.9%): [216847,000, 216847,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc
# Parameters: (percentageOfHeapToAllocate = P_75)

# Run progress: 66,67% complete, ETA 00:08:48
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
<failure>

java.lang.OutOfMemoryError: Java heap space
	at com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.createInstance(BurstHeapMemoryAllocatorBenchmark.java:110)
	at com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.allocate(BurstHeapMemoryAllocatorBenchmark.java:103)
	at com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc(BurstHeapMemoryAllocatorBenchmark.java:94)
	at com.ionutbalosin.jvm.performance.benchmarks.micro.gc.jmh_generated.BurstHeapMemoryAllocatorBenchmark_gc_jmhTest.gc_thrpt_jmhStub(BurstHeapMemoryAllocatorBenchmark_gc_jmhTest.java:142)
	at com.ionutbalosin.jvm.performance.benchmarks.micro.gc.jmh_generated.BurstHeapMemoryAllocatorBenchmark_gc_jmhTest.gc_Throughput(BurstHeapMemoryAllocatorBenchmark_gc_jmhTest.java:83)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)


Benchmark had encountered error, and fail on error was requested

Running BurstHeapMemoryAllocatorBenchmark benchmark ...
java  -jar benchmarks/target/benchmarks.jar .*BurstHeapMemoryAllocatorBenchmark.* -foe true -wi 5 -w 10 -i 5 -r 10 -f 5 -rf csv -rff results/jdk-17/arm64/openjdk-hotspot-vm/BurstHeapMemoryAllocatorBenchmark_zGC_2threads.csv -t 2 -prof gc -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseZGC"

# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc
# Parameters: (percentageOfHeapToAllocate = P_25)

# Run progress: 0,00% complete, ETA 00:25:00
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
12,246 ops/s
# Warmup Iteration   2: 13,047 ops/s
# Warmup Iteration   3: 10,512 ops/s
# Warmup Iteration   4: 11,562 ops/s
# Warmup Iteration   5: 10,773 ops/s
Iteration   1: 11,080 ops/s
                 Â·gc.alloc.rate:      8593,670 MB/sec
                 Â·gc.alloc.rate.norm: 805306395,061 B/op
                 Â·gc.count:           127,000 counts
                 Â·gc.time:            9820,000 ms

Iteration   2: 11,769 ops/s
                 Â·gc.alloc.rate:      9128,885 MB/sec
                 Â·gc.alloc.rate.norm: 805306394,600 B/op
                 Â·gc.count:           120,000 counts
                 Â·gc.time:            9703,000 ms

Iteration   3: 11,878 ops/s
                 Â·gc.alloc.rate:      9205,043 MB/sec
                 Â·gc.alloc.rate.norm: 805306491,636 B/op
                 Â·gc.count:           144,000 counts
                 Â·gc.time:            9469,000 ms

Iteration   4: 11,544 ops/s
                 Â·gc.alloc.rate:      8953,557 MB/sec
                 Â·gc.alloc.rate.norm: 805306394,689 B/op
                 Â·gc.count:           136,000 counts
                 Â·gc.time:            8944,000 ms

Iteration   5: 11,669 ops/s
                 Â·gc.alloc.rate:      9058,410 MB/sec
                 Â·gc.alloc.rate.norm: 805306395,174 B/op
                 Â·gc.count:           129,000 counts
                 Â·gc.time:            9895,000 ms


# Run progress: 6,67% complete, ETA 00:24:28
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
10,033 ops/s
# Warmup Iteration   2: 11,473 ops/s
# Warmup Iteration   3: 11,808 ops/s
# Warmup Iteration   4: 10,206 ops/s
# Warmup Iteration   5: 11,704 ops/s
Iteration   1: 11,642 ops/s
                 Â·gc.alloc.rate:      8890,400 MB/sec
                 Â·gc.alloc.rate.norm: 805306394,872 B/op
                 Â·gc.count:           125,000 counts
                 Â·gc.time:            9800,000 ms

Iteration   2: 11,742 ops/s
                 Â·gc.alloc.rate:      9103,599 MB/sec
                 Â·gc.alloc.rate.norm: 805306394,512 B/op
                 Â·gc.count:           144,000 counts
                 Â·gc.time:            8424,000 ms

Iteration   3: 11,537 ops/s
                 Â·gc.alloc.rate:      8943,562 MB/sec
                 Â·gc.alloc.rate.norm: 805306395,267 B/op
                 Â·gc.count:           123,000 counts
                 Â·gc.time:            9872,000 ms

Iteration   4: 12,523 ops/s
                 Â·gc.alloc.rate:      9699,711 MB/sec
                 Â·gc.alloc.rate.norm: 805306484,185 B/op
                 Â·gc.count:           132,000 counts
                 Â·gc.time:            9687,000 ms

Iteration   5: 11,950 ops/s
                 Â·gc.alloc.rate:      9262,883 MB/sec
                 Â·gc.alloc.rate.norm: 805306394,341 B/op
                 Â·gc.count:           129,000 counts
                 Â·gc.time:            10097,000 ms


# Run progress: 13,33% complete, ETA 00:23:04
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
10,992 ops/s
# Warmup Iteration   2: 10,157 ops/s
# Warmup Iteration   3: 11,686 ops/s
# Warmup Iteration   4: 11,027 ops/s
# Warmup Iteration   5: 11,963 ops/s
Iteration   1: 10,262 ops/s
                 Â·gc.alloc.rate:      7978,758 MB/sec
                 Â·gc.alloc.rate.norm: 805306396,495 B/op
                 Â·gc.count:           108,000 counts
                 Â·gc.time:            9914,000 ms

Iteration   2: 9,055 ops/s
                 Â·gc.alloc.rate:      7062,578 MB/sec
                 Â·gc.alloc.rate.norm: 805306397,113 B/op
                 Â·gc.count:           101,000 counts
                 Â·gc.time:            10728,000 ms

Iteration   3: 10,905 ops/s
                 Â·gc.alloc.rate:      8460,990 MB/sec
                 Â·gc.alloc.rate.norm: 805306395,820 B/op
                 Â·gc.count:           115,000 counts
                 Â·gc.time:            9331,000 ms

Iteration   4: 11,135 ops/s
                 Â·gc.alloc.rate:      8645,274 MB/sec
                 Â·gc.alloc.rate.norm: 805306499,298 B/op
                 Â·gc.count:           116,000 counts
                 Â·gc.time:            9801,000 ms

Iteration   5: 10,466 ops/s
                 Â·gc.alloc.rate:      8130,961 MB/sec
                 Â·gc.alloc.rate.norm: 805306395,514 B/op
                 Â·gc.count:           153,000 counts
                 Â·gc.time:            9367,000 ms


# Run progress: 20,00% complete, ETA 00:21:23
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
9,498 ops/s
# Warmup Iteration   2: 12,273 ops/s
# Warmup Iteration   3: 11,278 ops/s
# Warmup Iteration   4: 10,745 ops/s
# Warmup Iteration   5: 12,228 ops/s
Iteration   1: 10,246 ops/s
                 Â·gc.alloc.rate:      7961,359 MB/sec
                 Â·gc.alloc.rate.norm: 805306395,778 B/op
                 Â·gc.count:           114,000 counts
                 Â·gc.time:            9407,000 ms

Iteration   2: 11,053 ops/s
                 Â·gc.alloc.rate:      8582,914 MB/sec
                 Â·gc.alloc.rate.norm: 805306395,757 B/op
                 Â·gc.count:           120,000 counts
                 Â·gc.time:            10156,000 ms

Iteration   3: 10,853 ops/s
                 Â·gc.alloc.rate:      8466,870 MB/sec
                 Â·gc.alloc.rate.norm: 805306396,071 B/op
                 Â·gc.count:           120,000 counts
                 Â·gc.time:            9875,000 ms

Iteration   4: 12,241 ops/s
                 Â·gc.alloc.rate:      9347,581 MB/sec
                 Â·gc.alloc.rate.norm: 805306488,512 B/op
                 Â·gc.count:           137,000 counts
                 Â·gc.time:            9404,000 ms

Iteration   5: 11,804 ops/s
                 Â·gc.alloc.rate:      9154,600 MB/sec
                 Â·gc.alloc.rate.norm: 805306394,992 B/op
                 Â·gc.count:           123,000 counts
                 Â·gc.time:            9651,000 ms


# Run progress: 26,67% complete, ETA 00:19:39
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
11,764 ops/s
# Warmup Iteration   2: 10,158 ops/s
# Warmup Iteration   3: 11,431 ops/s
# Warmup Iteration   4: 10,547 ops/s
# Warmup Iteration   5: 11,921 ops/s
Iteration   1: 9,617 ops/s
                 Â·gc.alloc.rate:      7493,100 MB/sec
                 Â·gc.alloc.rate.norm: 805306397,520 B/op
                 Â·gc.count:           112,000 counts
                 Â·gc.time:            10078,000 ms

Iteration   2: 11,293 ops/s
                 Â·gc.alloc.rate:      8749,854 MB/sec
                 Â·gc.alloc.rate.norm: 805306394,872 B/op
                 Â·gc.count:           130,000 counts
                 Â·gc.time:            9423,000 ms

Iteration   3: 10,766 ops/s
                 Â·gc.alloc.rate:      8214,565 MB/sec
                 Â·gc.alloc.rate.norm: 805306395,927 B/op
                 Â·gc.count:           114,000 counts
                 Â·gc.time:            9663,000 ms

Iteration   4: 10,811 ops/s
                 Â·gc.alloc.rate:      8390,450 MB/sec
                 Â·gc.alloc.rate.norm: 805306499,257 B/op
                 Â·gc.count:           142,000 counts
                 Â·gc.time:            9272,000 ms

Iteration   5: 11,467 ops/s
                 Â·gc.alloc.rate:      8802,554 MB/sec
                 Â·gc.alloc.rate.norm: 805306395,655 B/op
                 Â·gc.count:           151,000 counts
                 Â·gc.time:            8743,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc":
  11,172 Â±(99.9%) 0,603 ops/s [Average]
  (min, avg, max) = (9,055, 11,172, 12,523), stdev = 0,806
  CI (99.9%): [10,569, 11,776] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate":
  8651,285 Â±(99.9%) 453,190 MB/sec [Average]
  (min, avg, max) = (7062,578, 8651,285, 9699,711), stdev = 604,996
  CI (99.9%): [8198,095, 9104,475] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate.norm":
  805306414,917 Â±(99.9%) 29,762 B/op [Average]
  (min, avg, max) = (805306394,341, 805306414,917, 805306499,298), stdev = 39,732
  CI (99.9%): [805306385,155, 805306444,679] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.count":
  3165,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (101,000, 126,600, 153,000), stdev = 13,420
  CI (99.9%): [3165,000, 3165,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.time":
  240524,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (8424,000, 9620,960, 10728,000), stdev = 476,137
  CI (99.9%): [240524,000, 240524,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc
# Parameters: (percentageOfHeapToAllocate = P_50)

# Run progress: 33,33% complete, ETA 00:17:46
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
2,562 ops/s
# Warmup Iteration   2: 2,383 ops/s
# Warmup Iteration   3: 2,145 ops/s
# Warmup Iteration   4: 2,151 ops/s
# Warmup Iteration   5: 2,675 ops/s
Iteration   1: 2,409 ops/s
                 Â·gc.alloc.rate:      3782,997 MB/sec
                 Â·gc.alloc.rate.norm: 1610612797,429 B/op
                 Â·gc.count:           76,000 counts
                 Â·gc.time:            11289,000 ms

Iteration   2: 2,164 ops/s
                 Â·gc.alloc.rate:      3349,959 MB/sec
                 Â·gc.alloc.rate.norm: 1610612805,000 B/op
                 Â·gc.count:           72,000 counts
                 Â·gc.time:            10523,000 ms

Iteration   3: 1,954 ops/s
                 Â·gc.alloc.rate:      3126,759 MB/sec
                 Â·gc.alloc.rate.norm: 1610612807,304 B/op
                 Â·gc.count:           72,000 counts
                 Â·gc.time:            11700,000 ms

Iteration   4: 2,434 ops/s
                 Â·gc.alloc.rate:      3720,417 MB/sec
                 Â·gc.alloc.rate.norm: 1610613234,370 B/op
                 Â·gc.count:           76,000 counts
                 Â·gc.time:            10572,000 ms

Iteration   5: 2,072 ops/s
                 Â·gc.alloc.rate:      3296,236 MB/sec
                 Â·gc.alloc.rate.norm: 1610612801,667 B/op
                 Â·gc.count:           72,000 counts
                 Â·gc.time:            11578,000 ms


# Run progress: 40,00% complete, ETA 00:16:10
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
2,460 ops/s
# Warmup Iteration   2: 2,745 ops/s
# Warmup Iteration   3: 2,100 ops/s
# Warmup Iteration   4: 2,646 ops/s
# Warmup Iteration   5: 1,802 ops/s
Iteration   1: 2,381 ops/s
                 Â·gc.alloc.rate:      3670,900 MB/sec
                 Â·gc.alloc.rate.norm: 1610612800,923 B/op
                 Â·gc.count:           76,000 counts
                 Â·gc.time:            10403,000 ms

Iteration   2: 2,032 ops/s
                 Â·gc.alloc.rate:      3205,670 MB/sec
                 Â·gc.alloc.rate.norm: 1610612805,000 B/op
                 Â·gc.count:           72,000 counts
                 Â·gc.time:            11363,000 ms

Iteration   3: 2,281 ops/s
                 Â·gc.alloc.rate:      3594,627 MB/sec
                 Â·gc.alloc.rate.norm: 1610612802,880 B/op
                 Â·gc.count:           72,000 counts
                 Â·gc.time:            11054,000 ms

Iteration   4: 2,513 ops/s
                 Â·gc.alloc.rate:      3944,522 MB/sec
                 Â·gc.alloc.rate.norm: 1610613237,333 B/op
                 Â·gc.count:           76,000 counts
                 Â·gc.time:            10414,000 ms

Iteration   5: 2,215 ops/s
                 Â·gc.alloc.rate:      3483,234 MB/sec
                 Â·gc.alloc.rate.norm: 1610612802,880 B/op
                 Â·gc.count:           72,000 counts
                 Â·gc.time:            10649,000 ms


# Run progress: 46,67% complete, ETA 00:14:31
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
2,343 ops/s
# Warmup Iteration   2: 2,325 ops/s
# Warmup Iteration   3: 2,267 ops/s
# Warmup Iteration   4: 1,930 ops/s
# Warmup Iteration   5: 2,456 ops/s
Iteration   1: 1,843 ops/s
                 Â·gc.alloc.rate:      2920,390 MB/sec
                 Â·gc.alloc.rate.norm: 1610612815,600 B/op
                 Â·gc.count:           64,000 counts
                 Â·gc.time:            10435,000 ms

Iteration   2: 2,453 ops/s
                 Â·gc.alloc.rate:      3725,919 MB/sec
                 Â·gc.alloc.rate.norm: 1610612799,111 B/op
                 Â·gc.count:           76,000 counts
                 Â·gc.time:            10554,000 ms

Iteration   3: 2,376 ops/s
                 Â·gc.alloc.rate:      3813,318 MB/sec
                 Â·gc.alloc.rate.norm: 1610612800,923 B/op
                 Â·gc.count:           72,000 counts
                 Â·gc.time:            10827,000 ms

Iteration   4: 1,852 ops/s
                 Â·gc.alloc.rate:      2954,040 MB/sec
                 Â·gc.alloc.rate.norm: 1610613344,000 B/op
                 Â·gc.count:           68,000 counts
                 Â·gc.time:            11045,000 ms

Iteration   5: 2,424 ops/s
                 Â·gc.alloc.rate:      3796,742 MB/sec
                 Â·gc.alloc.rate.norm: 1610612799,111 B/op
                 Â·gc.count:           72,000 counts
                 Â·gc.time:            10828,000 ms


# Run progress: 53,33% complete, ETA 00:12:46
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
2,046 ops/s
# Warmup Iteration   2: 1,788 ops/s
# Warmup Iteration   3: 2,235 ops/s
# Warmup Iteration   4: 2,422 ops/s
# Warmup Iteration   5: 2,221 ops/s
Iteration   1: 1,980 ops/s
                 Â·gc.alloc.rate:      3173,882 MB/sec
                 Â·gc.alloc.rate.norm: 1610612807,304 B/op
                 Â·gc.count:           72,000 counts
                 Â·gc.time:            11507,000 ms

Iteration   2: 2,379 ops/s
                 Â·gc.alloc.rate:      3629,432 MB/sec
                 Â·gc.alloc.rate.norm: 1610612799,111 B/op
                 Â·gc.count:           76,000 counts
                 Â·gc.time:            10838,000 ms

Iteration   3: 2,521 ops/s
                 Â·gc.alloc.rate:      3942,785 MB/sec
                 Â·gc.alloc.rate.norm: 1610613217,143 B/op
                 Â·gc.count:           76,000 counts
                 Â·gc.time:            10867,000 ms

Iteration   4: 1,706 ops/s
                 Â·gc.alloc.rate:      2772,355 MB/sec
                 Â·gc.alloc.rate.norm: 1610612814,737 B/op
                 Â·gc.count:           64,000 counts
                 Â·gc.time:            10909,000 ms

Iteration   5: 1,963 ops/s
                 Â·gc.alloc.rate:      3058,486 MB/sec
                 Â·gc.alloc.rate.norm: 1610612809,818 B/op
                 Â·gc.count:           72,000 counts
                 Â·gc.time:            10619,000 ms


# Run progress: 60,00% complete, ETA 00:10:59
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
2,366 ops/s
# Warmup Iteration   2: 2,548 ops/s
# Warmup Iteration   3: 3,044 ops/s
# Warmup Iteration   4: 2,378 ops/s
# Warmup Iteration   5: 2,117 ops/s
Iteration   1: 1,983 ops/s
                 Â·gc.alloc.rate:      3164,196 MB/sec
                 Â·gc.alloc.rate.norm: 1610612807,304 B/op
                 Â·gc.count:           72,000 counts
                 Â·gc.time:            11575,000 ms

Iteration   2: 1,979 ops/s
                 Â·gc.alloc.rate:      3080,765 MB/sec
                 Â·gc.alloc.rate.norm: 1610612809,818 B/op
                 Â·gc.count:           68,000 counts
                 Â·gc.time:            10374,000 ms

Iteration   3: 2,494 ops/s
                 Â·gc.alloc.rate:      3981,230 MB/sec
                 Â·gc.alloc.rate.norm: 1610612799,111 B/op
                 Â·gc.count:           72,000 counts
                 Â·gc.time:            10763,000 ms

Iteration   4: 2,430 ops/s
                 Â·gc.alloc.rate:      3889,505 MB/sec
                 Â·gc.alloc.rate.norm: 1610613237,333 B/op
                 Â·gc.count:           72,000 counts
                 Â·gc.time:            10614,000 ms

Iteration   5: 1,965 ops/s
                 Â·gc.alloc.rate:      3214,706 MB/sec
                 Â·gc.alloc.rate.norm: 1610612813,455 B/op
                 Â·gc.count:           64,000 counts
                 Â·gc.time:            10416,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc":
  2,192 Â±(99.9%) 0,188 ops/s [Average]
  (min, avg, max) = (1,706, 2,192, 2,521), stdev = 0,251
  CI (99.9%): [2,004, 2,380] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate":
  3451,723 Â±(99.9%) 276,267 MB/sec [Average]
  (min, avg, max) = (2772,355, 3451,723, 3981,230), stdev = 368,809
  CI (99.9%): [3175,456, 3727,990] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.alloc.rate.norm":
  1610612894,747 Â±(99.9%) 138,275 B/op [Average]
  (min, avg, max) = (1610612797,429, 1610612894,747, 1610613344,000), stdev = 184,594
  CI (99.9%): [1610612756,471, 1610613033,022] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.count":
  1796,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (64,000, 71,840, 76,000), stdev = 3,738
  CI (99.9%): [1796,000, 1796,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc:Â·gc.time":
  271716,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (10374,000, 10868,640, 11700,000), stdev = 415,705
  CI (99.9%): [271716,000, 271716,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc
# Parameters: (percentageOfHeapToAllocate = P_75)

# Run progress: 66,67% complete, ETA 00:09:10
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
<failure>

java.lang.OutOfMemoryError: Java heap space
	at com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.createInstance(BurstHeapMemoryAllocatorBenchmark.java:110)
	at com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.allocate(BurstHeapMemoryAllocatorBenchmark.java:103)
	at com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc(BurstHeapMemoryAllocatorBenchmark.java:94)
	at com.ionutbalosin.jvm.performance.benchmarks.micro.gc.jmh_generated.BurstHeapMemoryAllocatorBenchmark_gc_jmhTest.gc_thrpt_jmhStub(BurstHeapMemoryAllocatorBenchmark_gc_jmhTest.java:142)
	at com.ionutbalosin.jvm.performance.benchmarks.micro.gc.jmh_generated.BurstHeapMemoryAllocatorBenchmark_gc_jmhTest.gc_Throughput(BurstHeapMemoryAllocatorBenchmark_gc_jmhTest.java:83)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)

java.lang.OutOfMemoryError: Java heap space
	at com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.createInstance(BurstHeapMemoryAllocatorBenchmark.java:110)
	at com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.allocate(BurstHeapMemoryAllocatorBenchmark.java:103)
	at com.ionutbalosin.jvm.performance.benchmarks.micro.gc.BurstHeapMemoryAllocatorBenchmark.gc(BurstHeapMemoryAllocatorBenchmark.java:94)
	at com.ionutbalosin.jvm.performance.benchmarks.micro.gc.jmh_generated.BurstHeapMemoryAllocatorBenchmark_gc_jmhTest.gc_Throughput(BurstHeapMemoryAllocatorBenchmark_gc_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)


Benchmark had encountered error, and fail on error was requested

Running CanonicalizeInductionVariableBenchmark benchmark ...
java  -jar benchmarks/target/benchmarks.jar .*CanonicalizeInductionVariableBenchmark.* -foe true -wi 5 -w 10 -i 5 -r 10 -f 5 -rf csv -rff results/jdk-17/arm64/openjdk-hotspot-vm/CanonicalizeInductionVariableBenchmark.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.CanonicalizeInductionVariableBenchmark.baseline

# Run progress: 0,00% complete, ETA 00:16:40
# Fork: 1 of 5
# Warmup Iteration   1: 0,564 ns/op
# Warmup Iteration   2: 0,558 ns/op
# Warmup Iteration   3: 0,557 ns/op
# Warmup Iteration   4: 0,559 ns/op
# Warmup Iteration   5: 0,559 ns/op
Iteration   1: 0,559 ns/op
Iteration   2: 0,559 ns/op
Iteration   3: 0,559 ns/op
Iteration   4: 0,559 ns/op
Iteration   5: 0,559 ns/op

# Run progress: 10,00% complete, ETA 00:15:04
# Fork: 2 of 5
# Warmup Iteration   1: 0,559 ns/op
# Warmup Iteration   2: 0,558 ns/op
# Warmup Iteration   3: 0,558 ns/op
# Warmup Iteration   4: 0,558 ns/op
# Warmup Iteration   5: 0,558 ns/op
Iteration   1: 0,558 ns/op
Iteration   2: 0,558 ns/op
Iteration   3: 0,558 ns/op
Iteration   4: 0,558 ns/op
Iteration   5: 0,558 ns/op

# Run progress: 20,00% complete, ETA 00:13:43
# Fork: 3 of 5
# Warmup Iteration   1: 0,559 ns/op
# Warmup Iteration   2: 0,558 ns/op
# Warmup Iteration   3: 0,558 ns/op
# Warmup Iteration   4: 0,558 ns/op
# Warmup Iteration   5: 0,558 ns/op
Iteration   1: 0,559 ns/op
Iteration   2: 0,559 ns/op
Iteration   3: 0,559 ns/op
Iteration   4: 0,559 ns/op
Iteration   5: 0,557 ns/op

# Run progress: 30,00% complete, ETA 00:12:06
# Fork: 4 of 5
# Warmup Iteration   1: 0,559 ns/op
# Warmup Iteration   2: 0,559 ns/op
# Warmup Iteration   3: 0,561 ns/op
# Warmup Iteration   4: 0,560 ns/op
# Warmup Iteration   5: 0,555 ns/op
Iteration   1: 0,554 ns/op
Iteration   2: 0,555 ns/op
Iteration   3: 0,554 ns/op
Iteration   4: 0,555 ns/op
Iteration   5: 0,555 ns/op

# Run progress: 40,00% complete, ETA 00:10:25
# Fork: 5 of 5
# Warmup Iteration   1: 0,555 ns/op
# Warmup Iteration   2: 0,555 ns/op
# Warmup Iteration   3: 0,555 ns/op
# Warmup Iteration   4: 0,555 ns/op
# Warmup Iteration   5: 0,554 ns/op
Iteration   1: 0,556 ns/op
Iteration   2: 0,554 ns/op
Iteration   3: 0,555 ns/op
Iteration   4: 0,555 ns/op
Iteration   5: 0,555 ns/op


Result "com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.CanonicalizeInductionVariableBenchmark.baseline":
  0,557 Â±(99.9%) 0,002 ns/op [Average]
  (min, avg, max) = (0,554, 0,557, 0,559), stdev = 0,002
  CI (99.9%): [0,556, 0,559] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.CanonicalizeInductionVariableBenchmark.canonicalize

# Run progress: 50,00% complete, ETA 00:08:42
# Fork: 1 of 5
# Warmup Iteration   1: 1922257,749 ns/op
# Warmup Iteration   2: 1961650,708 ns/op
# Warmup Iteration   3: 1961710,122 ns/op
# Warmup Iteration   4: 1964135,053 ns/op
# Warmup Iteration   5: 1961563,272 ns/op
Iteration   1: 1962758,034 ns/op
Iteration   2: 1961622,035 ns/op
Iteration   3: 1963869,725 ns/op
Iteration   4: 1961964,412 ns/op
Iteration   5: 1964129,777 ns/op

# Run progress: 60,00% complete, ETA 00:06:58
# Fork: 2 of 5
# Warmup Iteration   1: 1931729,158 ns/op
# Warmup Iteration   2: 1968182,156 ns/op
# Warmup Iteration   3: 1975550,066 ns/op
# Warmup Iteration   4: 1967731,883 ns/op
# Warmup Iteration   5: 1963004,390 ns/op
Iteration   1: 1962948,401 ns/op
Iteration   2: 1962864,669 ns/op
Iteration   3: 1961583,211 ns/op
Iteration   4: 1961900,891 ns/op
Iteration   5: 1961638,224 ns/op

# Run progress: 70,00% complete, ETA 00:05:13
# Fork: 3 of 5
# Warmup Iteration   1: 1884313,269 ns/op
# Warmup Iteration   2: 1962204,444 ns/op
# Warmup Iteration   3: 1961631,061 ns/op
# Warmup Iteration   4: 1961563,999 ns/op
# Warmup Iteration   5: 1961608,059 ns/op
Iteration   1: 1961789,379 ns/op
Iteration   2: 1962034,837 ns/op
Iteration   3: 1962875,343 ns/op
Iteration   4: 1961819,412 ns/op
Iteration   5: 1961754,264 ns/op

# Run progress: 80,00% complete, ETA 00:03:28
# Fork: 4 of 5
# Warmup Iteration   1: 1922159,287 ns/op
# Warmup Iteration   2: 1960396,813 ns/op
# Warmup Iteration   3: 1962827,743 ns/op
# Warmup Iteration   4: 1961670,138 ns/op
# Warmup Iteration   5: 1961750,874 ns/op
Iteration   1: 1961517,435 ns/op
Iteration   2: 1961539,053 ns/op
Iteration   3: 1961521,589 ns/op
Iteration   4: 1962735,893 ns/op
Iteration   5: 1961671,984 ns/op

# Run progress: 90,00% complete, ETA 00:01:44
# Fork: 5 of 5
# Warmup Iteration   1: 1922372,302 ns/op
# Warmup Iteration   2: 1960359,595 ns/op
# Warmup Iteration   3: 1969981,394 ns/op
# Warmup Iteration   4: 1978493,495 ns/op
# Warmup Iteration   5: 1979814,333 ns/op
Iteration   1: 1979819,310 ns/op
Iteration   2: 1979889,100 ns/op
Iteration   3: 1979803,680 ns/op
Iteration   4: 1979122,273 ns/op
Iteration   5: 1979332,782 ns/op


Result "com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.CanonicalizeInductionVariableBenchmark.canonicalize":
  1965700,228 Â±(99.9%) 5338,046 ns/op [Average]
  (min, avg, max) = (1961517,435, 1965700,228, 1979889,100), stdev = 7126,138
  CI (99.9%): [1960362,183, 1971038,274] (assumes normal distribution)


# Run complete. Total time: 00:17:19

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                            Mode  Cnt        Score      Error  Units
CanonicalizeInductionVariableBenchmark.baseline      avgt   25        0,557 Â±    0,002  ns/op
CanonicalizeInductionVariableBenchmark.canonicalize  avgt   25  1965700,228 Â± 5338,046  ns/op

Benchmark result is saved to results/jdk-17/arm64/openjdk-hotspot-vm/CanonicalizeInductionVariableBenchmark.csv

Running CodeCacheBusterBenchmark benchmark ...
java  -jar benchmarks/target/benchmarks.jar .*CodeCacheBusterBenchmark.* -foe true -wi 5 -w 10 -i 5 -r 10 -f 5 -rf csv -rff results/jdk-17/arm64/openjdk-hotspot-vm/CodeCacheBusterBenchmark.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.CodeCacheBusterBenchmark.code_cache_buster

# Run progress: 0,00% complete, ETA 00:08:20
# Fork: 1 of 5
# Warmup Iteration   1: 195,863 us/op
# Warmup Iteration   2: 171,961 us/op
# Warmup Iteration   3: 167,828 us/op
# Warmup Iteration   4: 167,231 us/op
# Warmup Iteration   5: 168,178 us/op
Iteration   1: 167,537 us/op
Iteration   2: 167,938 us/op
Iteration   3: 167,108 us/op
Iteration   4: 168,197 us/op
Iteration   5: 166,917 us/op

# Run progress: 20,00% complete, ETA 00:06:52
# Fork: 2 of 5
# Warmup Iteration   1: 195,369 us/op
# Warmup Iteration   2: 171,422 us/op
# Warmup Iteration   3: 167,911 us/op
# Warmup Iteration   4: 167,909 us/op
# Warmup Iteration   5: 167,460 us/op
Iteration   1: 166,893 us/op
Iteration   2: 167,123 us/op
Iteration   3: 167,425 us/op
Iteration   4: 167,613 us/op
Iteration   5: 167,023 us/op

# Run progress: 40,00% complete, ETA 00:05:07
# Fork: 3 of 5
# Warmup Iteration   1: 198,606 us/op
# Warmup Iteration   2: 171,676 us/op
# Warmup Iteration   3: 167,533 us/op
# Warmup Iteration   4: 166,812 us/op
# Warmup Iteration   5: 167,059 us/op
Iteration   1: 167,009 us/op
Iteration   2: 166,442 us/op
Iteration   3: 167,652 us/op
Iteration   4: 167,042 us/op
Iteration   5: 168,482 us/op

# Run progress: 60,00% complete, ETA 00:03:25
# Fork: 4 of 5
# Warmup Iteration   1: 198,410 us/op
# Warmup Iteration   2: 172,750 us/op
# Warmup Iteration   3: 167,438 us/op
# Warmup Iteration   4: 165,837 us/op
# Warmup Iteration   5: 164,901 us/op
Iteration   1: 167,003 us/op
Iteration   2: 166,257 us/op
Iteration   3: 166,895 us/op
Iteration   4: 167,239 us/op
Iteration   5: 165,485 us/op

# Run progress: 80,00% complete, ETA 00:01:42
# Fork: 5 of 5
# Warmup Iteration   1: 194,018 us/op
# Warmup Iteration   2: 170,141 us/op
# Warmup Iteration   3: 167,809 us/op
# Warmup Iteration   4: 166,573 us/op
# Warmup Iteration   5: 166,856 us/op
Iteration   1: 168,569 us/op
Iteration   2: 166,626 us/op
Iteration   3: 166,946 us/op
Iteration   4: 166,483 us/op
Iteration   5: 166,763 us/op


Result "com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.CodeCacheBusterBenchmark.code_cache_buster":
  167,147 Â±(99.9%) 0,517 us/op [Average]
  (min, avg, max) = (165,485, 167,147, 168,569), stdev = 0,690
  CI (99.9%): [166,629, 167,664] (assumes normal distribution)


# Run complete. Total time: 00:08:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                   Mode  Cnt    Score   Error  Units
CodeCacheBusterBenchmark.code_cache_buster  avgt   25  167,147 Â± 0,517  us/op

Benchmark result is saved to results/jdk-17/arm64/openjdk-hotspot-vm/CodeCacheBusterBenchmark.csv

Running DeadLocalAllocationStoreBenchmark benchmark ...
java  -jar benchmarks/target/benchmarks.jar .*DeadLocalAllocationStoreBenchmark.* -foe true -wi 5 -w 10 -i 5 -r 10 -f 5 -rf csv -rff results/jdk-17/arm64/openjdk-hotspot-vm/DeadLocalAllocationStoreBenchmark.csv -prof gc -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.DeadLocalAllocationStoreBenchmark.array_baseline
# Parameters: (size = 64)

# Run progress: 0,00% complete, ETA 01:06:40
# Fork: 1 of 5
# Warmup Iteration   1: â 10â»â¶ ms/op
# Warmup Iteration   2: â 10â»â¶ ms/op
# Warmup Iteration   3: â 10â»â¶ ms/op
# Warmup Iteration   4: â 10â»â¶ ms/op
# Warmup Iteration   5: â 10â»â¶ ms/op
Iteration   1: â 10â»â¶ ms/op
                 Â·gc.alloc.rate:      25157,069 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           102,000 counts
                 Â·gc.time:            104,000 ms

Iteration   2: â 10â»â¶ ms/op
                 Â·gc.alloc.rate:      25185,987 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           103,000 counts
                 Â·gc.time:            105,000 ms

Iteration   3: â 10â»â¶ ms/op
                 Â·gc.alloc.rate:      25190,065 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           103,000 counts
                 Â·gc.time:            106,000 ms

Iteration   4: â 10â»â¶ ms/op
                 Â·gc.alloc.rate:      25140,848 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           102,000 counts
                 Â·gc.time:            102,000 ms

Iteration   5: â 10â»â¶ ms/op
                 Â·gc.alloc.rate:      25175,154 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           103,000 counts
                 Â·gc.time:            105,000 ms


# Run progress: 2,50% complete, ETA 01:06:00
# Fork: 2 of 5
# Warmup Iteration   1: â 10â»â¶ ms/op
# Warmup Iteration   2: â 10â»â¶ ms/op
# Warmup Iteration   3: â 10â»â¶ ms/op
# Warmup Iteration   4: â 10â»â¶ ms/op
# Warmup Iteration   5: â 10â»â¶ ms/op
Iteration   1: â 10â»â¶ ms/op
                 Â·gc.alloc.rate:      25082,867 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           102,000 counts
                 Â·gc.time:            104,000 ms

Iteration   2: â 10â»â¶ ms/op
                 Â·gc.alloc.rate:      25083,340 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           102,000 counts
                 Â·gc.time:            105,000 ms

Iteration   3: â 10â»â¶ ms/op
                 Â·gc.alloc.rate:      25192,716 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           103,000 counts
                 Â·gc.time:            106,000 ms

Iteration   4: â 10â»â¶ ms/op
                 Â·gc.alloc.rate:      24984,277 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           102,000 counts
                 Â·gc.time:            105,000 ms

Iteration   5: â 10â»â¶ ms/op
                 Â·gc.alloc.rate:      24862,026 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           102,000 counts
                 Â·gc.time:            107,000 ms


# Run progress: 5,00% complete, ETA 01:03:57
# Fork: 3 of 5
# Warmup Iteration   1: â 10â»â¶ ms/op
# Warmup Iteration   2: â 10â»â¶ ms/op
# Warmup Iteration   3: â 10â»â¶ ms/op
# Warmup Iteration   4: â 10â»â¶ ms/op
# Warmup Iteration   5: â 10â»â¶ ms/op
Iteration   1: â 10â»â¶ ms/op
                 Â·gc.alloc.rate:      24831,344 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           101,000 counts
                 Â·gc.time:            101,000 ms

Iteration   2: â 10â»â¶ ms/op
                 Â·gc.alloc.rate:      24930,394 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           102,000 counts
                 Â·gc.time:            105,000 ms

Iteration   3: â 10â»â¶ ms/op
                 Â·gc.alloc.rate:      24883,166 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           102,000 counts
                 Â·gc.time:            102,000 ms

Iteration   4: â 10â»â¶ ms/op
                 Â·gc.alloc.rate:      24913,341 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           102,000 counts
                 Â·gc.time:            103,000 ms

Iteration   5: â 10â»â¶ ms/op
                 Â·gc.alloc.rate:      24835,730 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           101,000 counts
                 Â·gc.time:            102,000 ms


# Run progress: 7,50% complete, ETA 01:03:11
# Fork: 4 of 5
# Warmup Iteration   1: â 10â»â¶ ms/op
# Warmup Iteration   2: â 10â»â¶ ms/op
# Warmup Iteration   3: â 10â»â¶ ms/op
# Warmup Iteration   4: â 10â»â¶ ms/op
# Warmup Iteration   5: â 10â»â¶ ms/op
Iteration   1: â 10â»â¶ ms/op
                 Â·gc.alloc.rate:      24876,583 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           102,000 counts
                 Â·gc.time:            104,000 ms

Iteration   2: â 10â»â¶ ms/op
                 Â·gc.alloc.rate:      24838,139 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           101,000 counts
                 Â·gc.time:            100,000 ms

Iteration   3: â 10â»â¶ ms/op
                 Â·gc.alloc.rate:      24760,526 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           101,000 counts
                 Â·gc.time:            103,000 ms

Iteration   4: â 10â»â¶ ms/op
                 Â·gc.alloc.rate:      24783,751 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           101,000 counts
                 Â·gc.time:            101,000 ms

Iteration   5: â 10â»â¶ ms/op
                 Â·gc.alloc.rate:      24784,831 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           102,000 counts
                 Â·gc.time:            101,000 ms


# Run progress: 10,00% complete, ETA 01:01:55
# Fork: 5 of 5
# Warmup Iteration   1: â 10â»â¶ ms/op
# Warmup Iteration   2: â 10â»â¶ ms/op
# Warmup Iteration   3: â 10â»â¶ ms/op
# Warmup Iteration   4: â 10â»â¶ ms/op
# Warmup Iteration   5: â 10â»â¶ ms/op
Iteration   1: â 10â»â¶ ms/op
                 Â·gc.alloc.rate:      25004,169 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           102,000 counts
                 Â·gc.time:            99,000 ms

Iteration   2: â 10â»â¶ ms/op
                 Â·gc.alloc.rate:      24989,266 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           102,000 counts
                 Â·gc.time:            98,000 ms

Iteration   3: â 10â»â¶ ms/op
                 Â·gc.alloc.rate:      25015,521 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           102,000 counts
                 Â·gc.time:            97,000 ms

Iteration   4: â 10â»â¶ ms/op
                 Â·gc.alloc.rate:      24988,483 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           102,000 counts
                 Â·gc.time:            98,000 ms

Iteration   5: â 10â»â¶ ms/op
                 Â·gc.alloc.rate:      24992,594 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           102,000 counts
                 Â·gc.time:            99,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.DeadLocalAllocationStoreBenchmark.array_baseline":
  â 10â»â¶ ms/op

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.DeadLocalAllocationStoreBenchmark.array_baseline:Â·gc.alloc.rate":
  24979,287 Â±(99.9%) 105,853 MB/sec [Average]
  (min, avg, max) = (24760,526, 24979,287, 25192,716), stdev = 141,311
  CI (99.9%): [24873,434, 25085,141] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.DeadLocalAllocationStoreBenchmark.array_baseline:Â·gc.alloc.rate.norm":
  80,000 Â±(99.9%) 0,001 B/op [Average]
  (min, avg, max) = (80,000, 80,000, 80,000), stdev = 0,001
  CI (99.9%): [80,000, 80,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.DeadLocalAllocationStoreBenchmark.array_baseline:Â·gc.count":
  2549,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (101,000, 101,960, 103,000), stdev = 0,611
  CI (99.9%): [2549,000, 2549,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.DeadLocalAllocationStoreBenchmark.array_baseline:Â·gc.time":
  2562,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (97,000, 102,480, 107,000), stdev = 2,830
  CI (99.9%): [2562,000, 2562,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.DeadLocalAllocationStoreBenchmark.array_dse
# Parameters: (size = 64)

# Run progress: 12,50% complete, ETA 01:00:19
# Fork: 1 of 5
# Warmup Iteration   1: â 10â»âµ ms/op
# Warmup Iteration   2: â 10â»âµ ms/op
# Warmup Iteration   3: â 10â»âµ ms/op
# Warmup Iteration   4: â 10â»âµ ms/op
# Warmup Iteration   5: â 10â»âµ ms/op
Iteration   1: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      22793,654 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           93,000 counts
                 Â·gc.time:            102,000 ms

Iteration   2: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      22781,318 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           93,000 counts
                 Â·gc.time:            99,000 ms

Iteration   3: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      22787,400 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           93,000 counts
                 Â·gc.time:            99,000 ms

Iteration   4: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      22795,296 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           93,000 counts
                 Â·gc.time:            101,000 ms

Iteration   5: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      22835,953 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           93,000 counts
                 Â·gc.time:            101,000 ms


# Run progress: 15,00% complete, ETA 00:58:47
# Fork: 2 of 5
# Warmup Iteration   1: â 10â»âµ ms/op
# Warmup Iteration   2: â 10â»âµ ms/op
# Warmup Iteration   3: â 10â»âµ ms/op
# Warmup Iteration   4: â 10â»âµ ms/op
# Warmup Iteration   5: â 10â»âµ ms/op
Iteration   1: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      22628,825 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           92,000 counts
                 Â·gc.time:            90,000 ms

Iteration   2: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      22608,786 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           93,000 counts
                 Â·gc.time:            96,000 ms

Iteration   3: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      22626,583 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           92,000 counts
                 Â·gc.time:            91,000 ms

Iteration   4: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      22657,719 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           92,000 counts
                 Â·gc.time:            92,000 ms

Iteration   5: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      22653,065 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           93,000 counts
                 Â·gc.time:            92,000 ms


# Run progress: 17,50% complete, ETA 00:57:11
# Fork: 3 of 5
# Warmup Iteration   1: â 10â»âµ ms/op
# Warmup Iteration   2: â 10â»âµ ms/op
# Warmup Iteration   3: â 10â»âµ ms/op
# Warmup Iteration   4: â 10â»âµ ms/op
# Warmup Iteration   5: â 10â»âµ ms/op
Iteration   1: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      22517,093 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           92,000 counts
                 Â·gc.time:            95,000 ms

Iteration   2: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      22558,689 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           92,000 counts
                 Â·gc.time:            97,000 ms

Iteration   3: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      22520,896 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           92,000 counts
                 Â·gc.time:            95,000 ms

Iteration   4: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      22541,124 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           92,000 counts
                 Â·gc.time:            95,000 ms

Iteration   5: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      22537,740 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           92,000 counts
                 Â·gc.time:            93,000 ms


# Run progress: 20,00% complete, ETA 00:55:27
# Fork: 4 of 5
# Warmup Iteration   1: â 10â»âµ ms/op
# Warmup Iteration   2: â 10â»âµ ms/op
# Warmup Iteration   3: â 10â»âµ ms/op
# Warmup Iteration   4: â 10â»âµ ms/op
# Warmup Iteration   5: â 10â»âµ ms/op
Iteration   1: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      22631,818 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           92,000 counts
                 Â·gc.time:            89,000 ms

Iteration   2: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      22578,347 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           93,000 counts
                 Â·gc.time:            92,000 ms

Iteration   3: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      22670,429 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           92,000 counts
                 Â·gc.time:            87,000 ms

Iteration   4: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      22667,363 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           93,000 counts
                 Â·gc.time:            88,000 ms

Iteration   5: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      22663,984 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           92,000 counts
                 Â·gc.time:            86,000 ms


# Run progress: 22,50% complete, ETA 00:53:31
# Fork: 5 of 5
# Warmup Iteration   1: â 10â»âµ ms/op
# Warmup Iteration   2: â 10â»âµ ms/op
# Warmup Iteration   3: â 10â»âµ ms/op
# Warmup Iteration   4: â 10â»âµ ms/op
# Warmup Iteration   5: â 10â»âµ ms/op
Iteration   1: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      22783,076 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           93,000 counts
                 Â·gc.time:            93,000 ms

Iteration   2: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      22714,638 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           92,000 counts
                 Â·gc.time:            88,000 ms

Iteration   3: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      22724,530 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           93,000 counts
                 Â·gc.time:            91,000 ms

Iteration   4: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      22769,855 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           93,000 counts
                 Â·gc.time:            91,000 ms

Iteration   5: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      22678,617 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           93,000 counts
                 Â·gc.time:            89,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.DeadLocalAllocationStoreBenchmark.array_dse":
  â 10â»âµ ms/op

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.DeadLocalAllocationStoreBenchmark.array_dse:Â·gc.alloc.rate":
  22669,072 Â±(99.9%) 72,085 MB/sec [Average]
  (min, avg, max) = (22517,093, 22669,072, 22835,953), stdev = 96,231
  CI (99.9%): [22596,987, 22741,157] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.DeadLocalAllocationStoreBenchmark.array_dse:Â·gc.alloc.rate.norm":
  80,000 Â±(99.9%) 0,001 B/op [Average]
  (min, avg, max) = (80,000, 80,000, 80,000), stdev = 0,001
  CI (99.9%): [80,000, 80,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.DeadLocalAllocationStoreBenchmark.array_dse:Â·gc.count":
  2313,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (92,000, 92,520, 93,000), stdev = 0,510
  CI (99.9%): [2313,000, 2313,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.DeadLocalAllocationStoreBenchmark.array_dse:Â·gc.time":
  2332,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (86,000, 93,280, 102,000), stdev = 4,596
  CI (99.9%): [2332,000, 2332,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.DeadLocalAllocationStoreBenchmark.array_dse_inter_procedural
# Parameters: (size = 64)

# Run progress: 25,00% complete, ETA 00:51:53
# Fork: 1 of 5
# Warmup Iteration   1: â 10â»âµ ms/op
# Warmup Iteration   2: â 10â»âµ ms/op
# Warmup Iteration   3: â 10â»âµ ms/op
# Warmup Iteration   4: â 10â»âµ ms/op
# Warmup Iteration   5: â 10â»âµ ms/op
Iteration   1: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      12995,925 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           53,000 counts
                 Â·gc.time:            71,000 ms

Iteration   2: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      12972,803 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           53,000 counts
                 Â·gc.time:            70,000 ms

Iteration   3: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      12948,600 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           53,000 counts
                 Â·gc.time:            70,000 ms

Iteration   4: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      12941,699 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           53,000 counts
                 Â·gc.time:            70,000 ms

Iteration   5: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      12950,112 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           53,000 counts
                 Â·gc.time:            70,000 ms


# Run progress: 27,50% complete, ETA 00:50:04
# Fork: 2 of 5
# Warmup Iteration   1: â 10â»âµ ms/op
# Warmup Iteration   2: â 10â»âµ ms/op
# Warmup Iteration   3: â 10â»âµ ms/op
# Warmup Iteration   4: â 10â»âµ ms/op
# Warmup Iteration   5: â 10â»âµ ms/op
Iteration   1: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      12868,075 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           53,000 counts
                 Â·gc.time:            56,000 ms

Iteration   2: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      12860,726 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           52,000 counts
                 Â·gc.time:            55,000 ms

Iteration   3: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      12880,551 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           53,000 counts
                 Â·gc.time:            57,000 ms

Iteration   4: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      12873,138 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           52,000 counts
                 Â·gc.time:            56,000 ms

Iteration   5: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      12880,674 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           53,000 counts
                 Â·gc.time:            57,000 ms


# Run progress: 30,00% complete, ETA 00:48:25
# Fork: 3 of 5
# Warmup Iteration   1: â 10â»âµ ms/op
# Warmup Iteration   2: â 10â»âµ ms/op
# Warmup Iteration   3: â 10â»âµ ms/op
# Warmup Iteration   4: â 10â»âµ ms/op
# Warmup Iteration   5: â 10â»âµ ms/op
Iteration   1: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      12853,250 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           53,000 counts
                 Â·gc.time:            55,000 ms

Iteration   2: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      12874,696 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           52,000 counts
                 Â·gc.time:            56,000 ms

Iteration   3: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      12865,054 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           53,000 counts
                 Â·gc.time:            56,000 ms

Iteration   4: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      12878,890 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           53,000 counts
                 Â·gc.time:            56,000 ms

Iteration   5: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      12869,776 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           52,000 counts
                 Â·gc.time:            56,000 ms


# Run progress: 32,50% complete, ETA 00:46:39
# Fork: 4 of 5
# Warmup Iteration   1: â 10â»âµ ms/op
# Warmup Iteration   2: â 10â»âµ ms/op
# Warmup Iteration   3: â 10â»âµ ms/op
# Warmup Iteration   4: â 10â»âµ ms/op
# Warmup Iteration   5: â 10â»âµ ms/op
Iteration   1: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      12860,811 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           52,000 counts
                 Â·gc.time:            55,000 ms

Iteration   2: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      12868,873 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           53,000 counts
                 Â·gc.time:            58,000 ms

Iteration   3: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      12877,733 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           53,000 counts
                 Â·gc.time:            55,000 ms

Iteration   4: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      12883,205 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           52,000 counts
                 Â·gc.time:            56,000 ms

Iteration   5: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      12869,118 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           53,000 counts
                 Â·gc.time:            56,000 ms


# Run progress: 35,00% complete, ETA 00:44:54
# Fork: 5 of 5
# Warmup Iteration   1: â 10â»âµ ms/op
# Warmup Iteration   2: â 10â»âµ ms/op
# Warmup Iteration   3: â 10â»âµ ms/op
# Warmup Iteration   4: â 10â»âµ ms/op
# Warmup Iteration   5: â 10â»âµ ms/op
Iteration   1: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      12714,653 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           52,000 counts
                 Â·gc.time:            57,000 ms

Iteration   2: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      12717,177 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           52,000 counts
                 Â·gc.time:            57,000 ms

Iteration   3: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      12698,989 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           52,000 counts
                 Â·gc.time:            54,000 ms

Iteration   4: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      12709,436 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           52,000 counts
                 Â·gc.time:            56,000 ms

Iteration   5: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      12711,969 MB/sec
                 Â·gc.alloc.rate.norm: 80,000 B/op
                 Â·gc.count:           52,000 counts
                 Â·gc.time:            55,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.DeadLocalAllocationStoreBenchmark.array_dse_inter_procedural":
  â 10â»âµ ms/op

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.DeadLocalAllocationStoreBenchmark.array_dse_inter_procedural:Â·gc.alloc.rate":
  12857,037 Â±(99.9%) 62,766 MB/sec [Average]
  (min, avg, max) = (12698,989, 12857,037, 12995,925), stdev = 83,790
  CI (99.9%): [12794,272, 12919,803] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.DeadLocalAllocationStoreBenchmark.array_dse_inter_procedural:Â·gc.alloc.rate.norm":
  80,000 Â±(99.9%) 0,001 B/op [Average]
  (min, avg, max) = (80,000, 80,000, 80,000), stdev = 0,001
  CI (99.9%): [80,000, 80,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.DeadLocalAllocationStoreBenchmark.array_dse_inter_procedural:Â·gc.count":
  1314,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (52,000, 52,560, 53,000), stdev = 0,507
  CI (99.9%): [1314,000, 1314,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.DeadLocalAllocationStoreBenchmark.array_dse_inter_procedural:Â·gc.time":
  1470,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (54,000, 58,800, 71,000), stdev = 5,881
  CI (99.9%): [1470,000, 1470,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.DeadLocalAllocationStoreBenchmark.obj_alloc_baseline
# Parameters: (size = 64)

# Run progress: 37,50% complete, ETA 00:43:09
# Fork: 1 of 5
# Warmup Iteration   1: â 10â»âµ ms/op
# Warmup Iteration   2: â 10â»âµ ms/op
# Warmup Iteration   3: â 10â»âµ ms/op
# Warmup Iteration   4: â 10â»âµ ms/op
# Warmup Iteration   5: â 10â»âµ ms/op
Iteration   1: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      1599,914 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           6,000 counts
                 Â·gc.time:            7,000 ms

Iteration   2: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      1620,215 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           7,000 counts
                 Â·gc.time:            9,000 ms

Iteration   3: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      1598,090 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           7,000 counts
                 Â·gc.time:            9,000 ms

Iteration   4: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      1600,866 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           6,000 counts
                 Â·gc.time:            7,000 ms

Iteration   5: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      1620,924 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           7,000 counts
                 Â·gc.time:            9,000 ms


# Run progress: 40,00% complete, ETA 00:41:24
# Fork: 2 of 5
# Warmup Iteration   1: â 10â»âµ ms/op
# Warmup Iteration   2: â 10â»âµ ms/op
# Warmup Iteration   3: â 10â»âµ ms/op
# Warmup Iteration   4: â 10â»âµ ms/op
# Warmup Iteration   5: â 10â»âµ ms/op
Iteration   1: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      1659,207 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           7,000 counts
                 Â·gc.time:            9,000 ms

Iteration   2: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      1689,713 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           7,000 counts
                 Â·gc.time:            8,000 ms

Iteration   3: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      1855,302 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           8,000 counts
                 Â·gc.time:            11,000 ms

Iteration   4: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      1692,273 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           6,000 counts
                 Â·gc.time:            7,000 ms

Iteration   5: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      1633,206 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           7,000 counts
                 Â·gc.time:            9,000 ms


# Run progress: 42,50% complete, ETA 00:39:39
# Fork: 3 of 5
# Warmup Iteration   1: â 10â»âµ ms/op
# Warmup Iteration   2: â 10â»âµ ms/op
# Warmup Iteration   3: â 10â»âµ ms/op
# Warmup Iteration   4: â 10â»âµ ms/op
# Warmup Iteration   5: â 10â»âµ ms/op
Iteration   1: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      1594,721 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           7,000 counts
                 Â·gc.time:            9,000 ms

Iteration   2: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      1595,309 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           6,000 counts
                 Â·gc.time:            8,000 ms

Iteration   3: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      1590,324 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           7,000 counts
                 Â·gc.time:            10,000 ms

Iteration   4: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      1572,655 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           6,000 counts
                 Â·gc.time:            7,000 ms

Iteration   5: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      1577,161 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           6,000 counts
                 Â·gc.time:            8,000 ms


# Run progress: 45,00% complete, ETA 00:37:52
# Fork: 4 of 5
# Warmup Iteration   1: â 10â»âµ ms/op
# Warmup Iteration   2: â 10â»âµ ms/op
# Warmup Iteration   3: â 10â»âµ ms/op
# Warmup Iteration   4: â 10â»âµ ms/op
# Warmup Iteration   5: â 10â»âµ ms/op
Iteration   1: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      1624,767 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           6,000 counts
                 Â·gc.time:            8,000 ms

Iteration   2: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      1589,709 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           7,000 counts
                 Â·gc.time:            10,000 ms

Iteration   3: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      1654,367 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           7,000 counts
                 Â·gc.time:            8,000 ms

Iteration   4: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      1592,475 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           6,000 counts
                 Â·gc.time:            7,000 ms

Iteration   5: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      1609,169 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           7,000 counts
                 Â·gc.time:            9,000 ms


# Run progress: 47,50% complete, ETA 00:36:11
# Fork: 5 of 5
# Warmup Iteration   1: â 10â»âµ ms/op
# Warmup Iteration   2: â 10â»âµ ms/op
# Warmup Iteration   3: â 10â»âµ ms/op
# Warmup Iteration   4: â 10â»âµ ms/op
# Warmup Iteration   5: â 10â»âµ ms/op
Iteration   1: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      1600,452 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           7,000 counts
                 Â·gc.time:            9,000 ms

Iteration   2: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      1593,727 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           6,000 counts
                 Â·gc.time:            8,000 ms

Iteration   3: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      1592,587 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           7,000 counts
                 Â·gc.time:            10,000 ms

Iteration   4: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      1622,587 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           6,000 counts
                 Â·gc.time:            8,000 ms

Iteration   5: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      1610,709 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           7,000 counts
                 Â·gc.time:            9,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.DeadLocalAllocationStoreBenchmark.obj_alloc_baseline":
  â 10â»âµ ms/op

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.DeadLocalAllocationStoreBenchmark.obj_alloc_baseline:Â·gc.alloc.rate":
  1623,617 Â±(99.9%) 43,033 MB/sec [Average]
  (min, avg, max) = (1572,655, 1623,617, 1855,302), stdev = 57,447
  CI (99.9%): [1580,585, 1666,650] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.DeadLocalAllocationStoreBenchmark.obj_alloc_baseline:Â·gc.alloc.rate.norm":
  16,000 Â±(99.9%) 0,001 B/op [Average]
  (min, avg, max) = (16,000, 16,000, 16,000), stdev = 0,001
  CI (99.9%): [16,000, 16,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.DeadLocalAllocationStoreBenchmark.obj_alloc_baseline:Â·gc.count":
  166,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (6,000, 6,640, 8,000), stdev = 0,569
  CI (99.9%): [166,000, 166,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.DeadLocalAllocationStoreBenchmark.obj_alloc_baseline:Â·gc.time":
  213,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (7,000, 8,520, 11,000), stdev = 1,085
  CI (99.9%): [213,000, 213,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.DeadLocalAllocationStoreBenchmark.obj_dse
# Parameters: (size = 64)

# Run progress: 50,00% complete, ETA 00:34:25
# Fork: 1 of 5
# Warmup Iteration   1: â 10â»âµ ms/op
# Warmup Iteration   2: â 10â»âµ ms/op
# Warmup Iteration   3: â 10â»âµ ms/op
# Warmup Iteration   4: â 10â»âµ ms/op
# Warmup Iteration   5: â 10â»âµ ms/op
Iteration   1: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      1573,896 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           7,000 counts
                 Â·gc.time:            9,000 ms

Iteration   2: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      1577,333 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           6,000 counts
                 Â·gc.time:            8,000 ms

Iteration   3: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      1583,412 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           6,000 counts
                 Â·gc.time:            8,000 ms

Iteration   4: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      1582,701 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           7,000 counts
                 Â·gc.time:            9,000 ms

Iteration   5: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      1702,100 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           7,000 counts
                 Â·gc.time:            9,000 ms


# Run progress: 52,50% complete, ETA 00:32:43
# Fork: 2 of 5
# Warmup Iteration   1: â 10â»âµ ms/op
# Warmup Iteration   2: â 10â»âµ ms/op
# Warmup Iteration   3: â 10â»âµ ms/op
# Warmup Iteration   4: â 10â»âµ ms/op
# Warmup Iteration   5: â 10â»âµ ms/op
Iteration   1: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      1793,142 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           7,000 counts
                 Â·gc.time:            9,000 ms

Iteration   2: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      1705,963 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           7,000 counts
                 Â·gc.time:            11,000 ms

Iteration   3: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      1618,401 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           7,000 counts
                 Â·gc.time:            10,000 ms

Iteration   4: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      1398,461 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           5,000 counts
                 Â·gc.time:            8,000 ms

Iteration   5: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      1313,624 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           6,000 counts
                 Â·gc.time:            8,000 ms


# Run progress: 55,00% complete, ETA 00:31:02
# Fork: 3 of 5
# Warmup Iteration   1: â 10â»âµ ms/op
# Warmup Iteration   2: â 10â»âµ ms/op
# Warmup Iteration   3: â 10â»âµ ms/op
# Warmup Iteration   4: â 10â»âµ ms/op
# Warmup Iteration   5: â 10â»âµ ms/op
Iteration   1: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      1311,056 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           5,000 counts
                 Â·gc.time:            7,000 ms

Iteration   2: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      1305,648 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           6,000 counts
                 Â·gc.time:            9,000 ms

Iteration   3: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      1307,987 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           5,000 counts
                 Â·gc.time:            8,000 ms

Iteration   4: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      1306,721 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           5,000 counts
                 Â·gc.time:            8,000 ms

Iteration   5: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      1347,918 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           6,000 counts
                 Â·gc.time:            9,000 ms


# Run progress: 57,50% complete, ETA 00:29:20
# Fork: 4 of 5
# Warmup Iteration   1: â 10â»âµ ms/op
# Warmup Iteration   2: â 10â»âµ ms/op
# Warmup Iteration   3: â 10â»âµ ms/op
# Warmup Iteration   4: â 10â»âµ ms/op
# Warmup Iteration   5: â 10â»âµ ms/op
Iteration   1: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      1308,492 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           5,000 counts
                 Â·gc.time:            7,000 ms

Iteration   2: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      1303,139 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           5,000 counts
                 Â·gc.time:            8,000 ms

Iteration   3: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      1408,462 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           6,000 counts
                 Â·gc.time:            8,000 ms

Iteration   4: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      1311,514 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           6,000 counts
                 Â·gc.time:            10,000 ms

Iteration   5: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      1312,128 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           5,000 counts
                 Â·gc.time:            8,000 ms


# Run progress: 60,00% complete, ETA 00:27:37
# Fork: 5 of 5
# Warmup Iteration   1: â 10â»âµ ms/op
# Warmup Iteration   2: â 10â»âµ ms/op
# Warmup Iteration   3: â 10â»âµ ms/op
# Warmup Iteration   4: â 10â»âµ ms/op
# Warmup Iteration   5: â 10â»âµ ms/op
Iteration   1: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      1343,096 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           6,000 counts
                 Â·gc.time:            9,000 ms

Iteration   2: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      1313,002 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           5,000 counts
                 Â·gc.time:            7,000 ms

Iteration   3: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      1723,026 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           7,000 counts
                 Â·gc.time:            10,000 ms

Iteration   4: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      1668,743 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           7,000 counts
                 Â·gc.time:            9,000 ms

Iteration   5: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      1728,990 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           7,000 counts
                 Â·gc.time:            9,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.DeadLocalAllocationStoreBenchmark.obj_dse":
  â 10â»âµ ms/op

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.DeadLocalAllocationStoreBenchmark.obj_dse:Â·gc.alloc.rate":
  1473,958 Â±(99.9%) 132,618 MB/sec [Average]
  (min, avg, max) = (1303,139, 1473,958, 1793,142), stdev = 177,041
  CI (99.9%): [1341,340, 1606,576] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.DeadLocalAllocationStoreBenchmark.obj_dse:Â·gc.alloc.rate.norm":
  16,000 Â±(99.9%) 0,001 B/op [Average]
  (min, avg, max) = (16,000, 16,000, 16,000), stdev = 0,001
  CI (99.9%): [16,000, 16,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.DeadLocalAllocationStoreBenchmark.obj_dse:Â·gc.count":
  151,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (5,000, 6,040, 7,000), stdev = 0,841
  CI (99.9%): [151,000, 151,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.DeadLocalAllocationStoreBenchmark.obj_dse:Â·gc.time":
  215,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (7,000, 8,600, 11,000), stdev = 1,000
  CI (99.9%): [215,000, 215,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.DeadLocalAllocationStoreBenchmark.obj_dse_inter_procedural
# Parameters: (size = 64)

# Run progress: 62,50% complete, ETA 00:25:53
# Fork: 1 of 5
# Warmup Iteration   1: â 10â»âµ ms/op
# Warmup Iteration   2: â 10â»âµ ms/op
# Warmup Iteration   3: â 10â»âµ ms/op
# Warmup Iteration   4: â 10â»âµ ms/op
# Warmup Iteration   5: â 10â»âµ ms/op
Iteration   1: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      691,382 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           2,000 counts
                 Â·gc.time:            3,000 ms

Iteration   2: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      690,988 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           3,000 counts
                 Â·gc.time:            4,000 ms

Iteration   3: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      691,658 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           3,000 counts
                 Â·gc.time:            3,000 ms

Iteration   4: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      693,192 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           3,000 counts
                 Â·gc.time:            4,000 ms

Iteration   5: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      691,076 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           3,000 counts
                 Â·gc.time:            4,000 ms


# Run progress: 65,00% complete, ETA 00:24:10
# Fork: 2 of 5
# Warmup Iteration   1: â 10â»âµ ms/op
# Warmup Iteration   2: â 10â»âµ ms/op
# Warmup Iteration   3: â 10â»âµ ms/op
# Warmup Iteration   4: â 10â»âµ ms/op
# Warmup Iteration   5: â 10â»âµ ms/op
Iteration   1: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      690,899 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           2,000 counts
                 Â·gc.time:            2,000 ms

Iteration   2: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      693,058 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           3,000 counts
                 Â·gc.time:            5,000 ms

Iteration   3: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      693,393 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           3,000 counts
                 Â·gc.time:            3,000 ms

Iteration   4: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      693,411 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           3,000 counts
                 Â·gc.time:            4,000 ms

Iteration   5: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      693,148 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           3,000 counts
                 Â·gc.time:            5,000 ms


# Run progress: 67,50% complete, ETA 00:22:26
# Fork: 3 of 5
# Warmup Iteration   1: â 10â»âµ ms/op
# Warmup Iteration   2: â 10â»âµ ms/op
# Warmup Iteration   3: â 10â»âµ ms/op
# Warmup Iteration   4: â 10â»âµ ms/op
# Warmup Iteration   5: â 10â»âµ ms/op
Iteration   1: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      691,226 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           2,000 counts
                 Â·gc.time:            2,000 ms

Iteration   2: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      691,033 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           3,000 counts
                 Â·gc.time:            4,000 ms

Iteration   3: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      691,014 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           3,000 counts
                 Â·gc.time:            4,000 ms

Iteration   4: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      693,031 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           3,000 counts
                 Â·gc.time:            3,000 ms

Iteration   5: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      691,196 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           3,000 counts
                 Â·gc.time:            4,000 ms


# Run progress: 70,00% complete, ETA 00:20:41
# Fork: 4 of 5
# Warmup Iteration   1: â 10â»âµ ms/op
# Warmup Iteration   2: â 10â»âµ ms/op
# Warmup Iteration   3: â 10â»âµ ms/op
# Warmup Iteration   4: â 10â»âµ ms/op
# Warmup Iteration   5: â 10â»âµ ms/op
Iteration   1: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      690,959 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           2,000 counts
                 Â·gc.time:            3,000 ms

Iteration   2: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      690,445 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           3,000 counts
                 Â·gc.time:            3,000 ms

Iteration   3: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      690,907 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           3,000 counts
                 Â·gc.time:            4,000 ms

Iteration   4: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      692,942 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           3,000 counts
                 Â·gc.time:            4,000 ms

Iteration   5: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      693,093 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           3,000 counts
                 Â·gc.time:            3,000 ms


# Run progress: 72,50% complete, ETA 00:18:57
# Fork: 5 of 5
# Warmup Iteration   1: â 10â»âµ ms/op
# Warmup Iteration   2: â 10â»âµ ms/op
# Warmup Iteration   3: â 10â»âµ ms/op
# Warmup Iteration   4: â 10â»âµ ms/op
# Warmup Iteration   5: â 10â»âµ ms/op
Iteration   1: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      690,939 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           2,000 counts
                 Â·gc.time:            3,000 ms

Iteration   2: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      690,602 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           3,000 counts
                 Â·gc.time:            4,000 ms

Iteration   3: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      690,823 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           3,000 counts
                 Â·gc.time:            5,000 ms

Iteration   4: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      690,816 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           3,000 counts
                 Â·gc.time:            3,000 ms

Iteration   5: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      690,469 MB/sec
                 Â·gc.alloc.rate.norm: 16,000 B/op
                 Â·gc.count:           3,000 counts
                 Â·gc.time:            4,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.DeadLocalAllocationStoreBenchmark.obj_dse_inter_procedural":
  â 10â»âµ ms/op

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.DeadLocalAllocationStoreBenchmark.obj_dse_inter_procedural:Â·gc.alloc.rate":
  691,668 Â±(99.9%) 0,807 MB/sec [Average]
  (min, avg, max) = (690,445, 691,668, 693,411), stdev = 1,077
  CI (99.9%): [690,861, 692,475] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.DeadLocalAllocationStoreBenchmark.obj_dse_inter_procedural:Â·gc.alloc.rate.norm":
  16,000 Â±(99.9%) 0,001 B/op [Average]
  (min, avg, max) = (16,000, 16,000, 16,000), stdev = 0,001
  CI (99.9%): [16,000, 16,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.DeadLocalAllocationStoreBenchmark.obj_dse_inter_procedural:Â·gc.count":
  70,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,408
  CI (99.9%): [70,000, 70,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.DeadLocalAllocationStoreBenchmark.obj_dse_inter_procedural:Â·gc.time":
  90,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (2,000, 3,600, 5,000), stdev = 0,816
  CI (99.9%): [90,000, 90,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.DeadLocalAllocationStoreBenchmark.wrapper_obj_baseline
# Parameters: (size = 64)

# Run progress: 75,00% complete, ETA 00:17:14
# Fork: 1 of 5
# Warmup Iteration   1: â 10â»âµ ms/op
# Warmup Iteration   2: â 10â»âµ ms/op
# Warmup Iteration   3: â 10â»âµ ms/op
# Warmup Iteration   4: â 10â»âµ ms/op
# Warmup Iteration   5: â 10â»âµ ms/op
Iteration   1: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      13126,935 MB/sec
                 Â·gc.alloc.rate.norm: 176,000 B/op
                 Â·gc.count:           53,000 counts
                 Â·gc.time:            59,000 ms

Iteration   2: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      13053,472 MB/sec
                 Â·gc.alloc.rate.norm: 176,000 B/op
                 Â·gc.count:           54,000 counts
                 Â·gc.time:            61,000 ms

Iteration   3: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      13028,137 MB/sec
                 Â·gc.alloc.rate.norm: 176,000 B/op
                 Â·gc.count:           53,000 counts
                 Â·gc.time:            61,000 ms

Iteration   4: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      13027,019 MB/sec
                 Â·gc.alloc.rate.norm: 176,000 B/op
                 Â·gc.count:           53,000 counts
                 Â·gc.time:            58,000 ms

Iteration   5: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      12996,481 MB/sec
                 Â·gc.alloc.rate.norm: 176,000 B/op
                 Â·gc.count:           53,000 counts
                 Â·gc.time:            59,000 ms


# Run progress: 77,50% complete, ETA 00:15:30
# Fork: 2 of 5
# Warmup Iteration   1: â 10â»âµ ms/op
# Warmup Iteration   2: â 10â»âµ ms/op
# Warmup Iteration   3: â 10â»âµ ms/op
# Warmup Iteration   4: â 10â»âµ ms/op
# Warmup Iteration   5: â 10â»âµ ms/op
Iteration   1: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      13118,792 MB/sec
                 Â·gc.alloc.rate.norm: 176,000 B/op
                 Â·gc.count:           54,000 counts
                 Â·gc.time:            58,000 ms

Iteration   2: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      13154,261 MB/sec
                 Â·gc.alloc.rate.norm: 176,000 B/op
                 Â·gc.count:           54,000 counts
                 Â·gc.time:            59,000 ms

Iteration   3: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      13141,143 MB/sec
                 Â·gc.alloc.rate.norm: 176,000 B/op
                 Â·gc.count:           53,000 counts
                 Â·gc.time:            56,000 ms

Iteration   4: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      13138,602 MB/sec
                 Â·gc.alloc.rate.norm: 176,000 B/op
                 Â·gc.count:           54,000 counts
                 Â·gc.time:            57,000 ms

Iteration   5: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      13148,316 MB/sec
                 Â·gc.alloc.rate.norm: 176,000 B/op
                 Â·gc.count:           54,000 counts
                 Â·gc.time:            59,000 ms


# Run progress: 80,00% complete, ETA 00:13:47
# Fork: 3 of 5
# Warmup Iteration   1: â 10â»âµ ms/op
# Warmup Iteration   2: â 10â»âµ ms/op
# Warmup Iteration   3: â 10â»âµ ms/op
# Warmup Iteration   4: â 10â»âµ ms/op
# Warmup Iteration   5: â 10â»âµ ms/op
Iteration   1: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      13224,187 MB/sec
                 Â·gc.alloc.rate.norm: 176,000 B/op
                 Â·gc.count:           54,000 counts
                 Â·gc.time:            63,000 ms

Iteration   2: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      13213,592 MB/sec
                 Â·gc.alloc.rate.norm: 176,000 B/op
                 Â·gc.count:           54,000 counts
                 Â·gc.time:            58,000 ms

Iteration   3: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      13153,103 MB/sec
                 Â·gc.alloc.rate.norm: 176,000 B/op
                 Â·gc.count:           53,000 counts
                 Â·gc.time:            56,000 ms

Iteration   4: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      13129,028 MB/sec
                 Â·gc.alloc.rate.norm: 176,000 B/op
                 Â·gc.count:           54,000 counts
                 Â·gc.time:            68,000 ms

Iteration   5: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      13157,570 MB/sec
                 Â·gc.alloc.rate.norm: 176,000 B/op
                 Â·gc.count:           54,000 counts
                 Â·gc.time:            56,000 ms


# Run progress: 82,50% complete, ETA 00:12:03
# Fork: 4 of 5
# Warmup Iteration   1: â 10â»âµ ms/op
# Warmup Iteration   2: â 10â»âµ ms/op
# Warmup Iteration   3: â 10â»âµ ms/op
# Warmup Iteration   4: â 10â»âµ ms/op
# Warmup Iteration   5: â 10â»âµ ms/op
Iteration   1: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      13189,492 MB/sec
                 Â·gc.alloc.rate.norm: 176,000 B/op
                 Â·gc.count:           54,000 counts
                 Â·gc.time:            59,000 ms

Iteration   2: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      13180,725 MB/sec
                 Â·gc.alloc.rate.norm: 176,000 B/op
                 Â·gc.count:           54,000 counts
                 Â·gc.time:            56,000 ms

Iteration   3: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      13186,044 MB/sec
                 Â·gc.alloc.rate.norm: 176,000 B/op
                 Â·gc.count:           53,000 counts
                 Â·gc.time:            57,000 ms

Iteration   4: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      13161,235 MB/sec
                 Â·gc.alloc.rate.norm: 176,000 B/op
                 Â·gc.count:           54,000 counts
                 Â·gc.time:            63,000 ms

Iteration   5: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      13196,095 MB/sec
                 Â·gc.alloc.rate.norm: 176,000 B/op
                 Â·gc.count:           54,000 counts
                 Â·gc.time:            64,000 ms


# Run progress: 85,00% complete, ETA 00:10:20
# Fork: 5 of 5
# Warmup Iteration   1: â 10â»âµ ms/op
# Warmup Iteration   2: â 10â»âµ ms/op
# Warmup Iteration   3: â 10â»âµ ms/op
# Warmup Iteration   4: â 10â»âµ ms/op
# Warmup Iteration   5: â 10â»âµ ms/op
Iteration   1: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      13239,372 MB/sec
                 Â·gc.alloc.rate.norm: 176,000 B/op
                 Â·gc.count:           54,000 counts
                 Â·gc.time:            73,000 ms

Iteration   2: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      13237,500 MB/sec
                 Â·gc.alloc.rate.norm: 176,000 B/op
                 Â·gc.count:           54,000 counts
                 Â·gc.time:            72,000 ms

Iteration   3: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      13236,602 MB/sec
                 Â·gc.alloc.rate.norm: 176,000 B/op
                 Â·gc.count:           54,000 counts
                 Â·gc.time:            70,000 ms

Iteration   4: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      13229,017 MB/sec
                 Â·gc.alloc.rate.norm: 176,000 B/op
                 Â·gc.count:           54,000 counts
                 Â·gc.time:            72,000 ms

Iteration   5: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      13233,052 MB/sec
                 Â·gc.alloc.rate.norm: 176,000 B/op
                 Â·gc.count:           54,000 counts
                 Â·gc.time:            71,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.DeadLocalAllocationStoreBenchmark.wrapper_obj_baseline":
  â 10â»âµ ms/op

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.DeadLocalAllocationStoreBenchmark.wrapper_obj_baseline:Â·gc.alloc.rate":
  13155,991 Â±(99.9%) 52,098 MB/sec [Average]
  (min, avg, max) = (12996,481, 13155,991, 13239,372), stdev = 69,550
  CI (99.9%): [13103,893, 13208,089] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.DeadLocalAllocationStoreBenchmark.wrapper_obj_baseline:Â·gc.alloc.rate.norm":
  176,000 Â±(99.9%) 0,001 B/op [Average]
  (min, avg, max) = (176,000, 176,000, 176,000), stdev = 0,001
  CI (99.9%): [176,000, 176,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.DeadLocalAllocationStoreBenchmark.wrapper_obj_baseline:Â·gc.count":
  1343,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (53,000, 53,720, 54,000), stdev = 0,458
  CI (99.9%): [1343,000, 1343,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.DeadLocalAllocationStoreBenchmark.wrapper_obj_baseline:Â·gc.time":
  1545,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (56,000, 61,800, 73,000), stdev = 5,759
  CI (99.9%): [1545,000, 1545,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.DeadLocalAllocationStoreBenchmark.wrapper_obj_dse_inter_procedural
# Parameters: (size = 64)

# Run progress: 87,50% complete, ETA 00:08:37
# Fork: 1 of 5
# Warmup Iteration   1: â 10â»âµ ms/op
# Warmup Iteration   2: â 10â»âµ ms/op
# Warmup Iteration   3: â 10â»âµ ms/op
# Warmup Iteration   4: â 10â»âµ ms/op
# Warmup Iteration   5: â 10â»âµ ms/op
Iteration   1: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      12101,203 MB/sec
                 Â·gc.alloc.rate.norm: 304,000 B/op
                 Â·gc.count:           50,000 counts
                 Â·gc.time:            67,000 ms

Iteration   2: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      12100,081 MB/sec
                 Â·gc.alloc.rate.norm: 304,000 B/op
                 Â·gc.count:           49,000 counts
                 Â·gc.time:            66,000 ms

Iteration   3: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      12096,819 MB/sec
                 Â·gc.alloc.rate.norm: 304,000 B/op
                 Â·gc.count:           50,000 counts
                 Â·gc.time:            67,000 ms

Iteration   4: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      12111,033 MB/sec
                 Â·gc.alloc.rate.norm: 304,000 B/op
                 Â·gc.count:           49,000 counts
                 Â·gc.time:            67,000 ms

Iteration   5: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      12094,765 MB/sec
                 Â·gc.alloc.rate.norm: 304,000 B/op
                 Â·gc.count:           49,000 counts
                 Â·gc.time:            66,000 ms


# Run progress: 90,00% complete, ETA 00:06:54
# Fork: 2 of 5
# Warmup Iteration   1: â 10â»âµ ms/op
# Warmup Iteration   2: â 10â»âµ ms/op
# Warmup Iteration   3: â 10â»âµ ms/op
# Warmup Iteration   4: â 10â»âµ ms/op
# Warmup Iteration   5: â 10â»âµ ms/op
Iteration   1: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      11072,993 MB/sec
                 Â·gc.alloc.rate.norm: 304,000 B/op
                 Â·gc.count:           45,000 counts
                 Â·gc.time:            60,000 ms

Iteration   2: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      11073,078 MB/sec
                 Â·gc.alloc.rate.norm: 304,000 B/op
                 Â·gc.count:           45,000 counts
                 Â·gc.time:            62,000 ms

Iteration   3: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      11063,550 MB/sec
                 Â·gc.alloc.rate.norm: 304,000 B/op
                 Â·gc.count:           45,000 counts
                 Â·gc.time:            60,000 ms

Iteration   4: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      11006,133 MB/sec
                 Â·gc.alloc.rate.norm: 304,000 B/op
                 Â·gc.count:           45,000 counts
                 Â·gc.time:            59,000 ms

Iteration   5: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      10986,036 MB/sec
                 Â·gc.alloc.rate.norm: 304,000 B/op
                 Â·gc.count:           45,000 counts
                 Â·gc.time:            49,000 ms


# Run progress: 92,50% complete, ETA 00:05:10
# Fork: 3 of 5
# Warmup Iteration   1: â 10â»âµ ms/op
# Warmup Iteration   2: â 10â»âµ ms/op
# Warmup Iteration   3: â 10â»âµ ms/op
# Warmup Iteration   4: â 10â»âµ ms/op
# Warmup Iteration   5: â 10â»âµ ms/op
Iteration   1: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      12029,331 MB/sec
                 Â·gc.alloc.rate.norm: 304,000 B/op
                 Â·gc.count:           49,000 counts
                 Â·gc.time:            53,000 ms

Iteration   2: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      12023,840 MB/sec
                 Â·gc.alloc.rate.norm: 304,000 B/op
                 Â·gc.count:           49,000 counts
                 Â·gc.time:            52,000 ms

Iteration   3: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      12034,158 MB/sec
                 Â·gc.alloc.rate.norm: 304,000 B/op
                 Â·gc.count:           49,000 counts
                 Â·gc.time:            51,000 ms

Iteration   4: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      12033,632 MB/sec
                 Â·gc.alloc.rate.norm: 304,000 B/op
                 Â·gc.count:           50,000 counts
                 Â·gc.time:            54,000 ms

Iteration   5: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      12038,074 MB/sec
                 Â·gc.alloc.rate.norm: 304,000 B/op
                 Â·gc.count:           49,000 counts
                 Â·gc.time:            53,000 ms


# Run progress: 95,00% complete, ETA 00:03:27
# Fork: 4 of 5
# Warmup Iteration   1: â 10â»âµ ms/op
# Warmup Iteration   2: â 10â»âµ ms/op
# Warmup Iteration   3: â 10â»âµ ms/op
# Warmup Iteration   4: â 10â»âµ ms/op
# Warmup Iteration   5: â 10â»âµ ms/op
Iteration   1: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      12032,873 MB/sec
                 Â·gc.alloc.rate.norm: 304,000 B/op
                 Â·gc.count:           49,000 counts
                 Â·gc.time:            53,000 ms

Iteration   2: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      12034,365 MB/sec
                 Â·gc.alloc.rate.norm: 304,000 B/op
                 Â·gc.count:           49,000 counts
                 Â·gc.time:            52,000 ms

Iteration   3: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      12032,604 MB/sec
                 Â·gc.alloc.rate.norm: 304,000 B/op
                 Â·gc.count:           49,000 counts
                 Â·gc.time:            53,000 ms

Iteration   4: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      12039,768 MB/sec
                 Â·gc.alloc.rate.norm: 304,000 B/op
                 Â·gc.count:           50,000 counts
                 Â·gc.time:            53,000 ms

Iteration   5: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      12054,565 MB/sec
                 Â·gc.alloc.rate.norm: 304,000 B/op
                 Â·gc.count:           49,000 counts
                 Â·gc.time:            53,000 ms


# Run progress: 97,50% complete, ETA 00:01:43
# Fork: 5 of 5
# Warmup Iteration   1: â 10â»âµ ms/op
# Warmup Iteration   2: â 10â»âµ ms/op
# Warmup Iteration   3: â 10â»âµ ms/op
# Warmup Iteration   4: â 10â»âµ ms/op
# Warmup Iteration   5: â 10â»âµ ms/op
Iteration   1: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      12021,049 MB/sec
                 Â·gc.alloc.rate.norm: 304,000 B/op
                 Â·gc.count:           49,000 counts
                 Â·gc.time:            53,000 ms

Iteration   2: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      12023,230 MB/sec
                 Â·gc.alloc.rate.norm: 304,000 B/op
                 Â·gc.count:           49,000 counts
                 Â·gc.time:            53,000 ms

Iteration   3: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      12016,824 MB/sec
                 Â·gc.alloc.rate.norm: 304,000 B/op
                 Â·gc.count:           49,000 counts
                 Â·gc.time:            51,000 ms

Iteration   4: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      12039,018 MB/sec
                 Â·gc.alloc.rate.norm: 304,000 B/op
                 Â·gc.count:           49,000 counts
                 Â·gc.time:            52,000 ms

Iteration   5: â 10â»âµ ms/op
                 Â·gc.alloc.rate:      12033,198 MB/sec
                 Â·gc.alloc.rate.norm: 304,000 B/op
                 Â·gc.count:           50,000 counts
                 Â·gc.time:            55,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.DeadLocalAllocationStoreBenchmark.wrapper_obj_dse_inter_procedural":
  â 10â»âµ ms/op

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.DeadLocalAllocationStoreBenchmark.wrapper_obj_dse_inter_procedural:Â·gc.alloc.rate":
  11847,689 Â±(99.9%) 309,582 MB/sec [Average]
  (min, avg, max) = (10986,036, 11847,689, 12111,033), stdev = 413,284
  CI (99.9%): [11538,106, 12157,271] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.DeadLocalAllocationStoreBenchmark.wrapper_obj_dse_inter_procedural:Â·gc.alloc.rate.norm":
  304,000 Â±(99.9%) 0,001 B/op [Average]
  (min, avg, max) = (304,000, 304,000, 304,000), stdev = 0,001
  CI (99.9%): [304,000, 304,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.DeadLocalAllocationStoreBenchmark.wrapper_obj_dse_inter_procedural:Â·gc.count":
  1210,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (45,000, 48,400, 50,000), stdev = 1,780
  CI (99.9%): [1210,000, 1210,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.DeadLocalAllocationStoreBenchmark.wrapper_obj_dse_inter_procedural:Â·gc.time":
  1414,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (49,000, 56,560, 67,000), stdev = 5,973
  CI (99.9%): [1414,000, 1414,000] (assumes normal distribution)


# Run complete. Total time: 01:09:07

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                                               (size)  Mode  Cnt      Score     Error   Units
DeadLocalAllocationStoreBenchmark.array_baseline                                            64  avgt   25     â 10â»â¶             ms/op
DeadLocalAllocationStoreBenchmark.array_baseline:Â·gc.alloc.rate                             64  avgt   25  24979,287 Â± 105,853  MB/sec
DeadLocalAllocationStoreBenchmark.array_baseline:Â·gc.alloc.rate.norm                        64  avgt   25     80,000 Â±   0,001    B/op
DeadLocalAllocationStoreBenchmark.array_baseline:Â·gc.count                                  64  avgt   25   2549,000            counts
DeadLocalAllocationStoreBenchmark.array_baseline:Â·gc.time                                   64  avgt   25   2562,000                ms
DeadLocalAllocationStoreBenchmark.array_dse                                                 64  avgt   25     â 10â»âµ             ms/op
DeadLocalAllocationStoreBenchmark.array_dse:Â·gc.alloc.rate                                  64  avgt   25  22669,072 Â±  72,085  MB/sec
DeadLocalAllocationStoreBenchmark.array_dse:Â·gc.alloc.rate.norm                             64  avgt   25     80,000 Â±   0,001    B/op
DeadLocalAllocationStoreBenchmark.array_dse:Â·gc.count                                       64  avgt   25   2313,000            counts
DeadLocalAllocationStoreBenchmark.array_dse:Â·gc.time                                        64  avgt   25   2332,000                ms
DeadLocalAllocationStoreBenchmark.array_dse_inter_procedural                                64  avgt   25     â 10â»âµ             ms/op
DeadLocalAllocationStoreBenchmark.array_dse_inter_procedural:Â·gc.alloc.rate                 64  avgt   25  12857,037 Â±  62,766  MB/sec
DeadLocalAllocationStoreBenchmark.array_dse_inter_procedural:Â·gc.alloc.rate.norm            64  avgt   25     80,000 Â±   0,001    B/op
DeadLocalAllocationStoreBenchmark.array_dse_inter_procedural:Â·gc.count                      64  avgt   25   1314,000            counts
DeadLocalAllocationStoreBenchmark.array_dse_inter_procedural:Â·gc.time                       64  avgt   25   1470,000                ms
DeadLocalAllocationStoreBenchmark.obj_alloc_baseline                                        64  avgt   25     â 10â»âµ             ms/op
DeadLocalAllocationStoreBenchmark.obj_alloc_baseline:Â·gc.alloc.rate                         64  avgt   25   1623,617 Â±  43,033  MB/sec
DeadLocalAllocationStoreBenchmark.obj_alloc_baseline:Â·gc.alloc.rate.norm                    64  avgt   25     16,000 Â±   0,001    B/op
DeadLocalAllocationStoreBenchmark.obj_alloc_baseline:Â·gc.count                              64  avgt   25    166,000            counts
DeadLocalAllocationStoreBenchmark.obj_alloc_baseline:Â·gc.time                               64  avgt   25    213,000                ms
DeadLocalAllocationStoreBenchmark.obj_dse                                                   64  avgt   25     â 10â»âµ             ms/op
DeadLocalAllocationStoreBenchmark.obj_dse:Â·gc.alloc.rate                                    64  avgt   25   1473,958 Â± 132,618  MB/sec
DeadLocalAllocationStoreBenchmark.obj_dse:Â·gc.alloc.rate.norm                               64  avgt   25     16,000 Â±   0,001    B/op
DeadLocalAllocationStoreBenchmark.obj_dse:Â·gc.count                                         64  avgt   25    151,000            counts
DeadLocalAllocationStoreBenchmark.obj_dse:Â·gc.time                                          64  avgt   25    215,000                ms
DeadLocalAllocationStoreBenchmark.obj_dse_inter_procedural                                  64  avgt   25     â 10â»âµ             ms/op
DeadLocalAllocationStoreBenchmark.obj_dse_inter_procedural:Â·gc.alloc.rate                   64  avgt   25    691,668 Â±   0,807  MB/sec
DeadLocalAllocationStoreBenchmark.obj_dse_inter_procedural:Â·gc.alloc.rate.norm              64  avgt   25     16,000 Â±   0,001    B/op
DeadLocalAllocationStoreBenchmark.obj_dse_inter_procedural:Â·gc.count                        64  avgt   25     70,000            counts
DeadLocalAllocationStoreBenchmark.obj_dse_inter_procedural:Â·gc.time                         64  avgt   25     90,000                ms
DeadLocalAllocationStoreBenchmark.wrapper_obj_baseline                                      64  avgt   25     â 10â»âµ             ms/op
DeadLocalAllocationStoreBenchmark.wrapper_obj_baseline:Â·gc.alloc.rate                       64  avgt   25  13155,991 Â±  52,098  MB/sec
DeadLocalAllocationStoreBenchmark.wrapper_obj_baseline:Â·gc.alloc.rate.norm                  64  avgt   25    176,000 Â±   0,001    B/op
DeadLocalAllocationStoreBenchmark.wrapper_obj_baseline:Â·gc.count                            64  avgt   25   1343,000            counts
DeadLocalAllocationStoreBenchmark.wrapper_obj_baseline:Â·gc.time                             64  avgt   25   1545,000                ms
DeadLocalAllocationStoreBenchmark.wrapper_obj_dse_inter_procedural                          64  avgt   25     â 10â»âµ             ms/op
DeadLocalAllocationStoreBenchmark.wrapper_obj_dse_inter_procedural:Â·gc.alloc.rate           64  avgt   25  11847,689 Â± 309,582  MB/sec
DeadLocalAllocationStoreBenchmark.wrapper_obj_dse_inter_procedural:Â·gc.alloc.rate.norm      64  avgt   25    304,000 Â±   0,001    B/op
DeadLocalAllocationStoreBenchmark.wrapper_obj_dse_inter_procedural:Â·gc.count                64  avgt   25   1210,000            counts
DeadLocalAllocationStoreBenchmark.wrapper_obj_dse_inter_procedural:Â·gc.time                 64  avgt   25   1414,000                ms

Benchmark result is saved to results/jdk-17/arm64/openjdk-hotspot-vm/DeadLocalAllocationStoreBenchmark.csv

Running DeadMethodCallStoreBenchmark benchmark ...
java  -jar benchmarks/target/benchmarks.jar .*DeadMethodCallStoreBenchmark.* -foe true -wi 5 -w 10 -i 5 -r 10 -f 5 -rf csv -rff results/jdk-17/arm64/openjdk-hotspot-vm/DeadMethodCallStoreBenchmark.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.DeadMethodCallStoreBenchmark.method_call_baseline

# Run progress: 0,00% complete, ETA 00:16:40
# Fork: 1 of 5
# Warmup Iteration   1: 396,865 ns/op
# Warmup Iteration   2: 396,808 ns/op
# Warmup Iteration   3: 396,724 ns/op
# Warmup Iteration   4: 396,788 ns/op
# Warmup Iteration   5: 396,781 ns/op
Iteration   1: 396,800 ns/op
Iteration   2: 396,686 ns/op
Iteration   3: 396,518 ns/op
Iteration   4: 396,696 ns/op
Iteration   5: 397,875 ns/op

# Run progress: 10,00% complete, ETA 00:15:48
# Fork: 2 of 5
# Warmup Iteration   1: 397,037 ns/op
# Warmup Iteration   2: 397,001 ns/op
# Warmup Iteration   3: 396,670 ns/op
# Warmup Iteration   4: 396,857 ns/op
# Warmup Iteration   5: 399,657 ns/op
Iteration   1: 396,744 ns/op
Iteration   2: 396,726 ns/op
Iteration   3: 396,778 ns/op
Iteration   4: 396,739 ns/op
Iteration   5: 396,263 ns/op

# Run progress: 20,00% complete, ETA 00:13:45
# Fork: 3 of 5
# Warmup Iteration   1: 397,022 ns/op
# Warmup Iteration   2: 395,482 ns/op
# Warmup Iteration   3: 396,655 ns/op
# Warmup Iteration   4: 396,732 ns/op
# Warmup Iteration   5: 396,844 ns/op
Iteration   1: 395,854 ns/op
Iteration   2: 395,439 ns/op
Iteration   3: 395,401 ns/op
Iteration   4: 396,619 ns/op
Iteration   5: 396,706 ns/op

# Run progress: 30,00% complete, ETA 00:12:02
# Fork: 4 of 5
# Warmup Iteration   1: 396,998 ns/op
# Warmup Iteration   2: 396,716 ns/op
# Warmup Iteration   3: 396,680 ns/op
# Warmup Iteration   4: 396,619 ns/op
# Warmup Iteration   5: 396,880 ns/op
Iteration   1: 395,490 ns/op
Iteration   2: 396,556 ns/op
Iteration   3: 396,717 ns/op
Iteration   4: 396,724 ns/op
Iteration   5: 396,725 ns/op

# Run progress: 40,00% complete, ETA 00:10:18
# Fork: 5 of 5
# Warmup Iteration   1: 396,928 ns/op
# Warmup Iteration   2: 396,739 ns/op
# Warmup Iteration   3: 396,753 ns/op
# Warmup Iteration   4: 396,760 ns/op
# Warmup Iteration   5: 396,785 ns/op
Iteration   1: 396,805 ns/op
Iteration   2: 396,696 ns/op
Iteration   3: 396,753 ns/op
Iteration   4: 396,684 ns/op
Iteration   5: 396,646 ns/op


Result "com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.DeadMethodCallStoreBenchmark.method_call_baseline":
  396,546 Â±(99.9%) 0,391 ns/op [Average]
  (min, avg, max) = (395,401, 396,546, 397,875), stdev = 0,522
  CI (99.9%): [396,155, 396,936] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.DeadMethodCallStoreBenchmark.method_call_dse

# Run progress: 50,00% complete, ETA 00:08:34
# Fork: 1 of 5
# Warmup Iteration   1: 497,040 ns/op
# Warmup Iteration   2: 497,038 ns/op
# Warmup Iteration   3: 491,624 ns/op
# Warmup Iteration   4: 491,590 ns/op
# Warmup Iteration   5: 490,192 ns/op
Iteration   1: 490,021 ns/op
Iteration   2: 491,584 ns/op
Iteration   3: 491,727 ns/op
Iteration   4: 491,648 ns/op
Iteration   5: 491,660 ns/op

# Run progress: 60,00% complete, ETA 00:06:51
# Fork: 2 of 5
# Warmup Iteration   1: 496,999 ns/op
# Warmup Iteration   2: 496,985 ns/op
# Warmup Iteration   3: 491,860 ns/op
# Warmup Iteration   4: 491,712 ns/op
# Warmup Iteration   5: 491,630 ns/op
Iteration   1: 491,469 ns/op
Iteration   2: 491,345 ns/op
Iteration   3: 491,697 ns/op
Iteration   4: 491,612 ns/op
Iteration   5: 491,923 ns/op

# Run progress: 70,00% complete, ETA 00:05:08
# Fork: 3 of 5
# Warmup Iteration   1: 497,057 ns/op
# Warmup Iteration   2: 495,513 ns/op
# Warmup Iteration   3: 490,064 ns/op
# Warmup Iteration   4: 491,347 ns/op
# Warmup Iteration   5: 490,267 ns/op
Iteration   1: 491,329 ns/op
Iteration   2: 491,683 ns/op
Iteration   3: 490,047 ns/op
Iteration   4: 491,607 ns/op
Iteration   5: 490,240 ns/op

# Run progress: 80,00% complete, ETA 00:03:25
# Fork: 4 of 5
# Warmup Iteration   1: 497,074 ns/op
# Warmup Iteration   2: 496,928 ns/op
# Warmup Iteration   3: 491,669 ns/op
# Warmup Iteration   4: 491,685 ns/op
# Warmup Iteration   5: 491,685 ns/op
Iteration   1: 491,704 ns/op
Iteration   2: 491,703 ns/op
Iteration   3: 491,691 ns/op
Iteration   4: 491,668 ns/op
Iteration   5: 491,715 ns/op

# Run progress: 90,00% complete, ETA 00:01:42
# Fork: 5 of 5
# Warmup Iteration   1: 497,113 ns/op
# Warmup Iteration   2: 497,070 ns/op
# Warmup Iteration   3: 491,691 ns/op
# Warmup Iteration   4: 491,723 ns/op
# Warmup Iteration   5: 491,654 ns/op
Iteration   1: 491,713 ns/op
Iteration   2: 491,670 ns/op
Iteration   3: 491,660 ns/op
Iteration   4: 491,623 ns/op
Iteration   5: 491,576 ns/op


Result "com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.DeadMethodCallStoreBenchmark.method_call_dse":
  491,453 Â±(99.9%) 0,392 ns/op [Average]
  (min, avg, max) = (490,021, 491,453, 491,923), stdev = 0,524
  CI (99.9%): [491,060, 491,845] (assumes normal distribution)


# Run complete. Total time: 00:17:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                          Mode  Cnt    Score   Error  Units
DeadMethodCallStoreBenchmark.method_call_baseline  avgt   25  396,546 Â± 0,391  ns/op
DeadMethodCallStoreBenchmark.method_call_dse       avgt   25  491,453 Â± 0,392  ns/op

Benchmark result is saved to results/jdk-17/arm64/openjdk-hotspot-vm/DeadMethodCallStoreBenchmark.csv

Running EnumValueLookupBenchmark benchmark ...
java  -jar benchmarks/target/benchmarks.jar .*EnumValueLookupBenchmark.* -foe true -wi 5 -w 10 -i 5 -r 10 -f 5 -rf csv -rff results/jdk-17/arm64/openjdk-hotspot-vm/EnumValueLookupBenchmark.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.EnumValueLookupBenchmark.cached_enum_values

# Run progress: 0,00% complete, ETA 00:16:40
# Fork: 1 of 5
# Warmup Iteration   1: 16,265 ns/op
# Warmup Iteration   2: 16,276 ns/op
# Warmup Iteration   3: 16,267 ns/op
# Warmup Iteration   4: 16,215 ns/op
# Warmup Iteration   5: 16,254 ns/op
Iteration   1: 16,266 ns/op
Iteration   2: 16,304 ns/op
Iteration   3: 16,263 ns/op
Iteration   4: 16,263 ns/op
Iteration   5: 16,258 ns/op

# Run progress: 10,00% complete, ETA 00:15:49
# Fork: 2 of 5
# Warmup Iteration   1: 16,329 ns/op
# Warmup Iteration   2: 16,274 ns/op
# Warmup Iteration   3: 16,264 ns/op
# Warmup Iteration   4: 16,265 ns/op
# Warmup Iteration   5: 16,142 ns/op
Iteration   1: 16,111 ns/op
Iteration   2: 16,113 ns/op
Iteration   3: 16,108 ns/op
Iteration   4: 16,120 ns/op
Iteration   5: 16,108 ns/op

# Run progress: 20,00% complete, ETA 00:14:03
# Fork: 3 of 5
# Warmup Iteration   1: 16,119 ns/op
# Warmup Iteration   2: 16,116 ns/op
# Warmup Iteration   3: 16,118 ns/op
# Warmup Iteration   4: 16,130 ns/op
# Warmup Iteration   5: 16,109 ns/op
Iteration   1: 16,123 ns/op
Iteration   2: 16,111 ns/op
Iteration   3: 16,120 ns/op
Iteration   4: 16,107 ns/op
Iteration   5: 16,119 ns/op

# Run progress: 30,00% complete, ETA 00:12:17
# Fork: 4 of 5
# Warmup Iteration   1: 16,125 ns/op
# Warmup Iteration   2: 16,121 ns/op
# Warmup Iteration   3: 16,122 ns/op
# Warmup Iteration   4: 16,115 ns/op
# Warmup Iteration   5: 16,123 ns/op
Iteration   1: 16,134 ns/op
Iteration   2: 16,114 ns/op
Iteration   3: 16,113 ns/op
Iteration   4: 16,114 ns/op
Iteration   5: 16,112 ns/op

# Run progress: 40,00% complete, ETA 00:10:32
# Fork: 5 of 5
# Warmup Iteration   1: 16,138 ns/op
# Warmup Iteration   2: 16,111 ns/op
# Warmup Iteration   3: 16,114 ns/op
# Warmup Iteration   4: 16,107 ns/op
# Warmup Iteration   5: 16,112 ns/op
Iteration   1: 16,112 ns/op
Iteration   2: 16,125 ns/op
Iteration   3: 16,113 ns/op
Iteration   4: 16,109 ns/op
Iteration   5: 16,114 ns/op


Result "com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.EnumValueLookupBenchmark.cached_enum_values":
  16,146 Â±(99.9%) 0,048 ns/op [Average]
  (min, avg, max) = (16,107, 16,146, 16,304), stdev = 0,064
  CI (99.9%): [16,098, 16,194] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.EnumValueLookupBenchmark.enum_values

# Run progress: 50,00% complete, ETA 00:08:47
# Fork: 1 of 5
# Warmup Iteration   1: 23,791 ns/op
# Warmup Iteration   2: 23,789 ns/op
# Warmup Iteration   3: 23,602 ns/op
# Warmup Iteration   4: 23,569 ns/op
# Warmup Iteration   5: 23,564 ns/op
Iteration   1: 23,562 ns/op
Iteration   2: 23,556 ns/op
Iteration   3: 23,543 ns/op
Iteration   4: 23,566 ns/op
Iteration   5: 23,582 ns/op

# Run progress: 60,00% complete, ETA 00:07:01
# Fork: 2 of 5
# Warmup Iteration   1: 23,808 ns/op
# Warmup Iteration   2: 23,717 ns/op
# Warmup Iteration   3: 23,421 ns/op
# Warmup Iteration   4: 23,433 ns/op
# Warmup Iteration   5: 23,443 ns/op
Iteration   1: 23,450 ns/op
Iteration   2: 23,464 ns/op
Iteration   3: 23,416 ns/op
Iteration   4: 23,457 ns/op
Iteration   5: 23,485 ns/op

# Run progress: 70,00% complete, ETA 00:05:14
# Fork: 3 of 5
# Warmup Iteration   1: 23,878 ns/op
# Warmup Iteration   2: 23,891 ns/op
# Warmup Iteration   3: 23,588 ns/op
# Warmup Iteration   4: 23,572 ns/op
# Warmup Iteration   5: 23,592 ns/op
Iteration   1: 23,604 ns/op
Iteration   2: 23,588 ns/op
Iteration   3: 23,573 ns/op
Iteration   4: 23,593 ns/op
Iteration   5: 23,574 ns/op

# Run progress: 80,00% complete, ETA 00:03:30
# Fork: 4 of 5
# Warmup Iteration   1: 23,807 ns/op
# Warmup Iteration   2: 23,849 ns/op
# Warmup Iteration   3: 23,597 ns/op
# Warmup Iteration   4: 23,549 ns/op
# Warmup Iteration   5: 23,556 ns/op
Iteration   1: 23,576 ns/op
Iteration   2: 23,560 ns/op
Iteration   3: 23,584 ns/op
Iteration   4: 23,560 ns/op
Iteration   5: 23,567 ns/op

# Run progress: 90,00% complete, ETA 00:01:44
# Fork: 5 of 5
# Warmup Iteration   1: 23,878 ns/op
# Warmup Iteration   2: 23,867 ns/op
# Warmup Iteration   3: 23,580 ns/op
# Warmup Iteration   4: 23,604 ns/op
# Warmup Iteration   5: 23,582 ns/op
Iteration   1: 23,596 ns/op
Iteration   2: 23,565 ns/op
Iteration   3: 23,592 ns/op
Iteration   4: 23,597 ns/op
Iteration   5: 23,579 ns/op


Result "com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.EnumValueLookupBenchmark.enum_values":
  23,552 Â±(99.9%) 0,039 ns/op [Average]
  (min, avg, max) = (23,416, 23,552, 23,604), stdev = 0,053
  CI (99.9%): [23,512, 23,591] (assumes normal distribution)


# Run complete. Total time: 00:17:23

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                    Mode  Cnt   Score   Error  Units
EnumValueLookupBenchmark.cached_enum_values  avgt   25  16,146 Â± 0,048  ns/op
EnumValueLookupBenchmark.enum_values         avgt   25  23,552 Â± 0,039  ns/op

Benchmark result is saved to results/jdk-17/arm64/openjdk-hotspot-vm/EnumValueLookupBenchmark.csv

Running FactorialBenchmark benchmark ...
java  -jar benchmarks/target/benchmarks.jar .*FactorialBenchmark.* -foe true -wi 5 -w 10 -i 5 -r 10 -f 5 -rf csv -rff results/jdk-17/arm64/openjdk-hotspot-vm/FactorialBenchmark.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.macro.factorial.FactorialBenchmark.array_multiply
# Parameters: (n = 1000)

# Run progress: 0,00% complete, ETA 00:50:00
# Fork: 1 of 5
# Warmup Iteration   1: 3750,415 us/op
# Warmup Iteration   2: 3750,011 us/op
# Warmup Iteration   3: 3749,764 us/op
# Warmup Iteration   4: 3749,955 us/op
# Warmup Iteration   5: 3752,374 us/op
Iteration   1: 3749,717 us/op
Iteration   2: 3749,609 us/op
Iteration   3: 3752,297 us/op
Iteration   4: 3749,795 us/op
Iteration   5: 3749,963 us/op

# Run progress: 3,33% complete, ETA 00:50:59
# Fork: 2 of 5
# Warmup Iteration   1: 3753,761 us/op
# Warmup Iteration   2: 3750,743 us/op
# Warmup Iteration   3: 3750,477 us/op
# Warmup Iteration   4: 3750,132 us/op
# Warmup Iteration   5: 3749,821 us/op
Iteration   1: 3750,658 us/op
Iteration   2: 3752,543 us/op
Iteration   3: 3749,975 us/op
Iteration   4: 3750,625 us/op
Iteration   5: 3750,405 us/op

# Run progress: 6,67% complete, ETA 00:48:36
# Fork: 3 of 5
# Warmup Iteration   1: 3751,148 us/op
# Warmup Iteration   2: 3751,909 us/op
# Warmup Iteration   3: 3751,359 us/op
# Warmup Iteration   4: 3749,891 us/op
# Warmup Iteration   5: 3749,858 us/op
Iteration   1: 3749,556 us/op
Iteration   2: 3749,479 us/op
Iteration   3: 3752,061 us/op
Iteration   4: 3749,680 us/op
Iteration   5: 3749,573 us/op

# Run progress: 10,00% complete, ETA 00:46:42
# Fork: 4 of 5
# Warmup Iteration   1: 3750,998 us/op
# Warmup Iteration   2: 3750,720 us/op
# Warmup Iteration   3: 3750,062 us/op
# Warmup Iteration   4: 3755,944 us/op
# Warmup Iteration   5: 3749,501 us/op
Iteration   1: 3749,512 us/op
Iteration   2: 3749,745 us/op
Iteration   3: 3749,765 us/op
Iteration   4: 3750,762 us/op
Iteration   5: 3752,346 us/op

# Run progress: 13,33% complete, ETA 00:44:49
# Fork: 5 of 5
# Warmup Iteration   1: 3753,438 us/op
# Warmup Iteration   2: 3750,427 us/op
# Warmup Iteration   3: 3750,270 us/op
# Warmup Iteration   4: 3752,782 us/op
# Warmup Iteration   5: 3749,890 us/op
Iteration   1: 3752,703 us/op
Iteration   2: 3750,421 us/op
Iteration   3: 3749,906 us/op
Iteration   4: 3750,186 us/op
Iteration   5: 3749,788 us/op


Result "com.ionutbalosin.jvm.performance.benchmarks.macro.factorial.FactorialBenchmark.array_multiply":
  3750,443 Â±(99.9%) 0,796 us/op [Average]
  (min, avg, max) = (3749,479, 3750,443, 3752,703), stdev = 1,063
  CI (99.9%): [3749,647, 3751,239] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.macro.factorial.FactorialBenchmark.array_multiply
# Parameters: (n = 5000)

# Run progress: 16,67% complete, ETA 00:42:57
# Fork: 1 of 5
# Warmup Iteration   1: 121886,704 us/op
# Warmup Iteration   2: 121960,144 us/op
# Warmup Iteration   3: 121830,247 us/op
# Warmup Iteration   4: 121834,583 us/op
# Warmup Iteration   5: 121821,672 us/op
Iteration   1: 121817,333 us/op
Iteration   2: 121906,520 us/op
Iteration   3: 121831,910 us/op
Iteration   4: 121830,275 us/op
Iteration   5: 121823,888 us/op

# Run progress: 20,00% complete, ETA 00:41:28
# Fork: 2 of 5
# Warmup Iteration   1: 121878,534 us/op
# Warmup Iteration   2: 121832,649 us/op
# Warmup Iteration   3: 121909,651 us/op
# Warmup Iteration   4: 121827,463 us/op
# Warmup Iteration   5: 121818,704 us/op
Iteration   1: 121827,868 us/op
Iteration   2: 121901,303 us/op
Iteration   3: 121856,434 us/op
Iteration   4: 121942,022 us/op
Iteration   5: 121838,114 us/op

# Run progress: 23,33% complete, ETA 00:39:54
# Fork: 3 of 5
# Warmup Iteration   1: 121881,851 us/op
# Warmup Iteration   2: 121832,409 us/op
# Warmup Iteration   3: 121825,570 us/op
# Warmup Iteration   4: 121823,738 us/op
# Warmup Iteration   5: 121910,530 us/op
Iteration   1: 121832,325 us/op
Iteration   2: 121823,798 us/op
Iteration   3: 121825,009 us/op
Iteration   4: 121821,591 us/op
Iteration   5: 121835,356 us/op

# Run progress: 26,67% complete, ETA 00:38:03
# Fork: 4 of 5
# Warmup Iteration   1: 121884,527 us/op
# Warmup Iteration   2: 121823,032 us/op
# Warmup Iteration   3: 121821,497 us/op
# Warmup Iteration   4: 121817,277 us/op
# Warmup Iteration   5: 127535,794 us/op
Iteration   1: 122855,380 us/op
Iteration   2: 122081,264 us/op
Iteration   3: 122130,840 us/op
Iteration   4: 127028,288 us/op
Iteration   5: 127209,825 us/op

# Run progress: 30,00% complete, ETA 00:36:25
# Fork: 5 of 5
# Warmup Iteration   1: 122667,407 us/op
# Warmup Iteration   2: 122210,389 us/op
# Warmup Iteration   3: 121980,231 us/op
# Warmup Iteration   4: 126866,590 us/op
# Warmup Iteration   5: 122712,515 us/op
Iteration   1: 122023,255 us/op
Iteration   2: 121954,528 us/op
Iteration   3: 121874,079 us/op
Iteration   4: 123402,979 us/op
Iteration   5: 127173,102 us/op


Result "com.ionutbalosin.jvm.performance.benchmarks.macro.factorial.FactorialBenchmark.array_multiply":
  122617,892 Â±(99.9%) 1304,210 us/op [Average]
  (min, avg, max) = (121817,333, 122617,892, 127209,825), stdev = 1741,083
  CI (99.9%): [121313,682, 123922,101] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.macro.factorial.FactorialBenchmark.big_integer_multiply
# Parameters: (n = 1000)

# Run progress: 33,33% complete, ETA 00:34:46
# Fork: 1 of 5
# Warmup Iteration   1: 173,187 us/op
# Warmup Iteration   2: 173,010 us/op
# Warmup Iteration   3: 173,032 us/op
# Warmup Iteration   4: 180,514 us/op
# Warmup Iteration   5: 175,311 us/op
Iteration   1: 173,135 us/op
Iteration   2: 174,291 us/op
Iteration   3: 172,900 us/op
Iteration   4: 180,902 us/op
Iteration   5: 174,821 us/op

# Run progress: 36,67% complete, ETA 00:33:03
# Fork: 2 of 5
# Warmup Iteration   1: 174,228 us/op
# Warmup Iteration   2: 173,378 us/op
# Warmup Iteration   3: 181,545 us/op
# Warmup Iteration   4: 174,694 us/op
# Warmup Iteration   5: 173,450 us/op
Iteration   1: 173,590 us/op
Iteration   2: 173,294 us/op
Iteration   3: 175,697 us/op
Iteration   4: 179,651 us/op
Iteration   5: 175,824 us/op

# Run progress: 40,00% complete, ETA 00:31:21
# Fork: 3 of 5
# Warmup Iteration   1: 173,933 us/op
# Warmup Iteration   2: 173,678 us/op
# Warmup Iteration   3: 173,084 us/op
# Warmup Iteration   4: 175,486 us/op
# Warmup Iteration   5: 180,485 us/op
Iteration   1: 174,248 us/op
Iteration   2: 173,671 us/op
Iteration   3: 173,383 us/op
Iteration   4: 173,255 us/op
Iteration   5: 181,550 us/op

# Run progress: 43,33% complete, ETA 00:29:37
# Fork: 4 of 5
# Warmup Iteration   1: 173,585 us/op
# Warmup Iteration   2: 173,026 us/op
# Warmup Iteration   3: 173,023 us/op
# Warmup Iteration   4: 173,521 us/op
# Warmup Iteration   5: 172,881 us/op
Iteration   1: 174,594 us/op
Iteration   2: 173,240 us/op
Iteration   3: 179,489 us/op
Iteration   4: 173,288 us/op
Iteration   5: 173,428 us/op

# Run progress: 46,67% complete, ETA 00:27:54
# Fork: 5 of 5
# Warmup Iteration   1: 173,990 us/op
# Warmup Iteration   2: 172,825 us/op
# Warmup Iteration   3: 175,371 us/op
# Warmup Iteration   4: 172,770 us/op
# Warmup Iteration   5: 172,743 us/op
Iteration   1: 172,735 us/op
Iteration   2: 172,701 us/op
Iteration   3: 172,643 us/op
Iteration   4: 179,081 us/op
Iteration   5: 172,950 us/op


Result "com.ionutbalosin.jvm.performance.benchmarks.macro.factorial.FactorialBenchmark.big_integer_multiply":
  174,974 Â±(99.9%) 2,094 us/op [Average]
  (min, avg, max) = (172,643, 174,974, 181,550), stdev = 2,795
  CI (99.9%): [172,881, 177,068] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.macro.factorial.FactorialBenchmark.big_integer_multiply
# Parameters: (n = 5000)

# Run progress: 50,00% complete, ETA 00:26:09
# Fork: 1 of 5
# Warmup Iteration   1: 5451,480 us/op
# Warmup Iteration   2: 5433,875 us/op
# Warmup Iteration   3: 5712,053 us/op
# Warmup Iteration   4: 5452,344 us/op
# Warmup Iteration   5: 5512,019 us/op
Iteration   1: 5426,991 us/op
Iteration   2: 5446,876 us/op
Iteration   3: 5726,220 us/op
Iteration   4: 5432,897 us/op
Iteration   5: 5461,635 us/op

# Run progress: 53,33% complete, ETA 00:24:25
# Fork: 2 of 5
# Warmup Iteration   1: 5454,227 us/op
# Warmup Iteration   2: 5440,796 us/op
# Warmup Iteration   3: 5720,213 us/op
# Warmup Iteration   4: 5457,731 us/op
# Warmup Iteration   5: 5495,528 us/op
Iteration   1: 5505,705 us/op
Iteration   2: 5642,016 us/op
Iteration   3: 5658,751 us/op
Iteration   4: 5463,657 us/op
Iteration   5: 5471,065 us/op

# Run progress: 56,67% complete, ETA 00:22:41
# Fork: 3 of 5
# Warmup Iteration   1: 5476,662 us/op
# Warmup Iteration   2: 5490,446 us/op
# Warmup Iteration   3: 5520,024 us/op
# Warmup Iteration   4: 5473,241 us/op
# Warmup Iteration   5: 5466,967 us/op
Iteration   1: 5433,447 us/op
Iteration   2: 5432,892 us/op
Iteration   3: 5436,164 us/op
Iteration   4: 5468,608 us/op
Iteration   5: 5659,104 us/op

# Run progress: 60,00% complete, ETA 00:20:54
# Fork: 4 of 5
# Warmup Iteration   1: 5438,907 us/op
# Warmup Iteration   2: 5428,291 us/op
# Warmup Iteration   3: 5428,819 us/op
# Warmup Iteration   4: 5426,909 us/op
# Warmup Iteration   5: 5429,273 us/op
Iteration   1: 5421,154 us/op
Iteration   2: 5422,981 us/op
Iteration   3: 5423,553 us/op
Iteration   4: 5430,472 us/op
Iteration   5: 5423,371 us/op

# Run progress: 63,33% complete, ETA 00:19:08
# Fork: 5 of 5
# Warmup Iteration   1: 5441,697 us/op
# Warmup Iteration   2: 5429,327 us/op
# Warmup Iteration   3: 5429,793 us/op
# Warmup Iteration   4: 5431,733 us/op
# Warmup Iteration   5: 5426,274 us/op
Iteration   1: 5428,016 us/op
Iteration   2: 5430,237 us/op
Iteration   3: 5426,015 us/op
Iteration   4: 5427,409 us/op
Iteration   5: 5427,777 us/op


Result "com.ionutbalosin.jvm.performance.benchmarks.macro.factorial.FactorialBenchmark.big_integer_multiply":
  5477,081 Â±(99.9%) 67,304 us/op [Average]
  (min, avg, max) = (5421,154, 5477,081, 5726,220), stdev = 89,848
  CI (99.9%): [5409,777, 5544,384] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.macro.factorial.FactorialBenchmark.fork_join
# Parameters: (n = 1000)

# Run progress: 66,67% complete, ETA 00:17:24
# Fork: 1 of 5
# Warmup Iteration   1: 173,686 us/op
# Warmup Iteration   2: 173,113 us/op
# Warmup Iteration   3: 173,235 us/op
# Warmup Iteration   4: 172,932 us/op
# Warmup Iteration   5: 174,924 us/op
Iteration   1: 174,767 us/op
Iteration   2: 174,837 us/op
Iteration   3: 174,957 us/op
Iteration   4: 175,030 us/op
Iteration   5: 174,854 us/op

# Run progress: 70,00% complete, ETA 00:15:38
# Fork: 2 of 5
# Warmup Iteration   1: 175,228 us/op
# Warmup Iteration   2: 175,177 us/op
# Warmup Iteration   3: 174,918 us/op
# Warmup Iteration   4: 175,087 us/op
# Warmup Iteration   5: 174,783 us/op
Iteration   1: 174,878 us/op
Iteration   2: 174,774 us/op
Iteration   3: 175,216 us/op
Iteration   4: 175,040 us/op
Iteration   5: 174,992 us/op

# Run progress: 73,33% complete, ETA 00:13:54
# Fork: 3 of 5
# Warmup Iteration   1: 175,384 us/op
# Warmup Iteration   2: 175,157 us/op
# Warmup Iteration   3: 175,023 us/op
# Warmup Iteration   4: 175,294 us/op
# Warmup Iteration   5: 175,008 us/op
Iteration   1: 175,206 us/op
Iteration   2: 175,208 us/op
Iteration   3: 175,578 us/op
Iteration   4: 175,342 us/op
Iteration   5: 175,583 us/op

# Run progress: 76,67% complete, ETA 00:12:09
# Fork: 4 of 5
# Warmup Iteration   1: 175,986 us/op
# Warmup Iteration   2: 175,459 us/op
# Warmup Iteration   3: 175,310 us/op
# Warmup Iteration   4: 175,297 us/op
# Warmup Iteration   5: 175,231 us/op
Iteration   1: 175,400 us/op
Iteration   2: 175,401 us/op
Iteration   3: 175,474 us/op
Iteration   4: 175,462 us/op
Iteration   5: 175,112 us/op

# Run progress: 80,00% complete, ETA 00:10:25
# Fork: 5 of 5
# Warmup Iteration   1: 175,315 us/op
# Warmup Iteration   2: 174,977 us/op
# Warmup Iteration   3: 174,875 us/op
# Warmup Iteration   4: 174,974 us/op
# Warmup Iteration   5: 175,075 us/op
Iteration   1: 174,934 us/op
Iteration   2: 174,694 us/op
Iteration   3: 174,635 us/op
Iteration   4: 174,905 us/op
Iteration   5: 175,043 us/op


Result "com.ionutbalosin.jvm.performance.benchmarks.macro.factorial.FactorialBenchmark.fork_join":
  175,093 Â±(99.9%) 0,211 us/op [Average]
  (min, avg, max) = (174,635, 175,093, 175,583), stdev = 0,281
  CI (99.9%): [174,882, 175,303] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.macro.factorial.FactorialBenchmark.fork_join
# Parameters: (n = 5000)

# Run progress: 83,33% complete, ETA 00:08:40
# Fork: 1 of 5
# Warmup Iteration   1: 375,342 us/op
# Warmup Iteration   2: 367,933 us/op
# Warmup Iteration   3: 368,038 us/op
# Warmup Iteration   4: 367,601 us/op
# Warmup Iteration   5: 367,924 us/op
Iteration   1: 367,564 us/op
Iteration   2: 367,479 us/op
Iteration   3: 367,763 us/op
Iteration   4: 367,953 us/op
Iteration   5: 367,251 us/op

# Run progress: 86,67% complete, ETA 00:06:56
# Fork: 2 of 5
# Warmup Iteration   1: 375,837 us/op
# Warmup Iteration   2: 366,679 us/op
# Warmup Iteration   3: 364,718 us/op
# Warmup Iteration   4: 360,718 us/op
# Warmup Iteration   5: 358,230 us/op
Iteration   1: 357,863 us/op
Iteration   2: 357,550 us/op
Iteration   3: 357,361 us/op
Iteration   4: 357,257 us/op
Iteration   5: 356,725 us/op

# Run progress: 90,00% complete, ETA 00:05:12
# Fork: 3 of 5
# Warmup Iteration   1: 368,282 us/op
# Warmup Iteration   2: 367,560 us/op
# Warmup Iteration   3: 367,916 us/op
# Warmup Iteration   4: 368,779 us/op
# Warmup Iteration   5: 368,471 us/op
Iteration   1: 367,344 us/op
Iteration   2: 367,755 us/op
Iteration   3: 367,468 us/op
Iteration   4: 367,763 us/op
Iteration   5: 367,708 us/op

# Run progress: 93,33% complete, ETA 00:03:28
# Fork: 4 of 5
# Warmup Iteration   1: 369,901 us/op
# Warmup Iteration   2: 366,934 us/op
# Warmup Iteration   3: 366,550 us/op
# Warmup Iteration   4: 366,642 us/op
# Warmup Iteration   5: 366,711 us/op
Iteration   1: 366,578 us/op
Iteration   2: 366,555 us/op
Iteration   3: 366,383 us/op
Iteration   4: 366,496 us/op
Iteration   5: 366,425 us/op

# Run progress: 96,67% complete, ETA 00:01:44
# Fork: 5 of 5
# Warmup Iteration   1: 370,556 us/op
# Warmup Iteration   2: 367,090 us/op
# Warmup Iteration   3: 366,664 us/op
# Warmup Iteration   4: 366,618 us/op
# Warmup Iteration   5: 366,640 us/op
Iteration   1: 367,011 us/op
Iteration   2: 367,344 us/op
Iteration   3: 366,562 us/op
Iteration   4: 366,673 us/op
Iteration   5: 366,385 us/op


Result "com.ionutbalosin.jvm.performance.benchmarks.macro.factorial.FactorialBenchmark.fork_join":
  365,169 Â±(99.9%) 3,014 us/op [Average]
  (min, avg, max) = (356,725, 365,169, 367,953), stdev = 4,024
  CI (99.9%): [362,155, 368,183] (assumes normal distribution)


# Run complete. Total time: 00:51:58

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                 (n)  Mode  Cnt       Score      Error  Units
FactorialBenchmark.array_multiply        1000  avgt   25    3750,443 Â±    0,796  us/op
FactorialBenchmark.array_multiply        5000  avgt   25  122617,892 Â± 1304,210  us/op
FactorialBenchmark.big_integer_multiply  1000  avgt   25     174,974 Â±    2,094  us/op
FactorialBenchmark.big_integer_multiply  5000  avgt   25    5477,081 Â±   67,304  us/op
FactorialBenchmark.fork_join             1000  avgt   25     175,093 Â±    0,211  us/op
FactorialBenchmark.fork_join             5000  avgt   25     365,169 Â±    3,014  us/op

Benchmark result is saved to results/jdk-17/arm64/openjdk-hotspot-vm/FactorialBenchmark.csv

Running FalseSharingBenchmark benchmark ...
java  -jar benchmarks/target/benchmarks.jar .*FalseSharingBenchmark.* -foe true -wi 5 -w 10 -i 5 -r 10 -f 5 -rf csv -rff results/jdk-17/arm64/openjdk-hotspot-vm/FalseSharingBenchmark.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 2 threads (1 group; 1x "writer1", 1x "writer2" in each group), will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.FalseSharingBenchmark.array_pad

# Run progress: 0,00% complete, ETA 00:33:20
# Fork: 1 of 5
# Warmup Iteration   1: 0,846 ops/ns
# Warmup Iteration   2: 0,918 ops/ns
# Warmup Iteration   3: 0,920 ops/ns
# Warmup Iteration   4: 0,932 ops/ns
# Warmup Iteration   5: 0,886 ops/ns
Iteration   1: 0,910 ops/ns
                 writer1: 0,496 ops/ns
                 writer2: 0,414 ops/ns

Iteration   2: 0,874 ops/ns
                 writer1: 0,465 ops/ns
                 writer2: 0,408 ops/ns

Iteration   3: 0,943 ops/ns
                 writer1: 0,521 ops/ns
                 writer2: 0,422 ops/ns

Iteration   4: 0,948 ops/ns
                 writer1: 0,529 ops/ns
                 writer2: 0,419 ops/ns

Iteration   5: 0,911 ops/ns
                 writer1: 0,498 ops/ns
                 writer2: 0,413 ops/ns


# Run progress: 5,00% complete, ETA 00:32:12
# Fork: 2 of 5
# Warmup Iteration   1: 1,831 ops/ns
# Warmup Iteration   2: 1,824 ops/ns
# Warmup Iteration   3: 1,833 ops/ns
# Warmup Iteration   4: 1,825 ops/ns
# Warmup Iteration   5: 1,825 ops/ns
Iteration   1: 1,748 ops/ns
                 writer1: 1,301 ops/ns
                 writer2: 0,446 ops/ns

Iteration   2: 1,833 ops/ns
                 writer1: 1,390 ops/ns
                 writer2: 0,443 ops/ns

Iteration   3: 1,833 ops/ns
                 writer1: 1,390 ops/ns
                 writer2: 0,443 ops/ns

Iteration   4: 1,831 ops/ns
                 writer1: 1,387 ops/ns
                 writer2: 0,444 ops/ns

Iteration   5: 1,831 ops/ns
                 writer1: 1,387 ops/ns
                 writer2: 0,444 ops/ns


# Run progress: 10,00% complete, ETA 00:31:04
# Fork: 3 of 5
# Warmup Iteration   1: 0,866 ops/ns
# Warmup Iteration   2: 0,885 ops/ns
# Warmup Iteration   3: 0,957 ops/ns
# Warmup Iteration   4: 0,950 ops/ns
# Warmup Iteration   5: 0,944 ops/ns
Iteration   1: 0,855 ops/ns
                 writer1: 0,440 ops/ns
                 writer2: 0,415 ops/ns

Iteration   2: 0,945 ops/ns
                 writer1: 0,529 ops/ns
                 writer2: 0,416 ops/ns

Iteration   3: 0,939 ops/ns
                 writer1: 0,525 ops/ns
                 writer2: 0,413 ops/ns

Iteration   4: 0,956 ops/ns
                 writer1: 0,541 ops/ns
                 writer2: 0,416 ops/ns

Iteration   5: 0,951 ops/ns
                 writer1: 0,536 ops/ns
                 writer2: 0,414 ops/ns


# Run progress: 15,00% complete, ETA 00:29:31
# Fork: 4 of 5
# Warmup Iteration   1: 0,899 ops/ns
# Warmup Iteration   2: 0,903 ops/ns
# Warmup Iteration   3: 0,957 ops/ns
# Warmup Iteration   4: 0,942 ops/ns
# Warmup Iteration   5: 0,849 ops/ns
Iteration   1: 0,939 ops/ns
                 writer1: 0,523 ops/ns
                 writer2: 0,415 ops/ns

Iteration   2: 0,842 ops/ns
                 writer1: 0,427 ops/ns
                 writer2: 0,415 ops/ns

Iteration   3: 0,932 ops/ns
                 writer1: 0,517 ops/ns
                 writer2: 0,415 ops/ns

Iteration   4: 0,861 ops/ns
                 writer1: 0,443 ops/ns
                 writer2: 0,418 ops/ns

Iteration   5: 0,871 ops/ns
                 writer1: 0,456 ops/ns
                 writer2: 0,415 ops/ns


# Run progress: 20,00% complete, ETA 00:27:52
# Fork: 5 of 5
# Warmup Iteration   1: 0,849 ops/ns
# Warmup Iteration   2: 0,931 ops/ns
# Warmup Iteration   3: 0,925 ops/ns
# Warmup Iteration   4: 0,855 ops/ns
# Warmup Iteration   5: 0,930 ops/ns
Iteration   1: 0,886 ops/ns
                 writer1: 0,471 ops/ns
                 writer2: 0,415 ops/ns

Iteration   2: 0,841 ops/ns
                 writer1: 0,425 ops/ns
                 writer2: 0,416 ops/ns

Iteration   3: 0,926 ops/ns
                 writer1: 0,510 ops/ns
                 writer2: 0,416 ops/ns

Iteration   4: 0,949 ops/ns
                 writer1: 0,534 ops/ns
                 writer2: 0,415 ops/ns

Iteration   5: 0,865 ops/ns
                 writer1: 0,451 ops/ns
                 writer2: 0,414 ops/ns



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.FalseSharingBenchmark.array_pad":
  1,089 Â±(99.9%) 0,279 ops/ns [Average]
  (min, avg, max) = (0,841, 1,089, 1,833), stdev = 0,373
  CI (99.9%): [0,810, 1,368] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.FalseSharingBenchmark.array_pad:writer1":
  0,668 Â±(99.9%) 0,270 ops/ns [Average]
  (min, avg, max) = (0,425, 0,668, 1,390), stdev = 0,361
  CI (99.9%): [0,397, 0,938] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.FalseSharingBenchmark.array_pad:writer2":
  0,421 Â±(99.9%) 0,009 ops/ns [Average]
  (min, avg, max) = (0,408, 0,421, 0,446), stdev = 0,012
  CI (99.9%): [0,412, 0,430] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 2 threads (1 group; 1x "writer1", 1x "writer2" in each group), will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.FalseSharingBenchmark.baseline

# Run progress: 25,00% complete, ETA 00:26:02
# Fork: 1 of 5
# Warmup Iteration   1: 0,886 ops/ns
# Warmup Iteration   2: 0,898 ops/ns
# Warmup Iteration   3: 0,884 ops/ns
# Warmup Iteration   4: 0,886 ops/ns
# Warmup Iteration   5: 0,878 ops/ns
Iteration   1: 0,877 ops/ns
                 writer1: 0,471 ops/ns
                 writer2: 0,406 ops/ns

Iteration   2: 0,877 ops/ns
                 writer1: 0,470 ops/ns
                 writer2: 0,407 ops/ns

Iteration   3: 0,901 ops/ns
                 writer1: 0,446 ops/ns
                 writer2: 0,455 ops/ns

Iteration   4: 0,897 ops/ns
                 writer1: 0,441 ops/ns
                 writer2: 0,457 ops/ns

Iteration   5: 0,886 ops/ns
                 writer1: 0,443 ops/ns
                 writer2: 0,443 ops/ns


# Run progress: 30,00% complete, ETA 00:24:12
# Fork: 2 of 5
# Warmup Iteration   1: 0,951 ops/ns
# Warmup Iteration   2: 0,887 ops/ns
# Warmup Iteration   3: 0,954 ops/ns
# Warmup Iteration   4: 0,886 ops/ns
# Warmup Iteration   5: 0,947 ops/ns
Iteration   1: 0,933 ops/ns
                 writer1: 0,481 ops/ns
                 writer2: 0,452 ops/ns

Iteration   2: 0,948 ops/ns
                 writer1: 0,497 ops/ns
                 writer2: 0,451 ops/ns

Iteration   3: 0,926 ops/ns
                 writer1: 0,474 ops/ns
                 writer2: 0,452 ops/ns

Iteration   4: 0,903 ops/ns
                 writer1: 0,451 ops/ns
                 writer2: 0,452 ops/ns

Iteration   5: 0,906 ops/ns
                 writer1: 0,460 ops/ns
                 writer2: 0,446 ops/ns


# Run progress: 35,00% complete, ETA 00:22:25
# Fork: 3 of 5
# Warmup Iteration   1: 0,898 ops/ns
# Warmup Iteration   2: 0,882 ops/ns
# Warmup Iteration   3: 0,893 ops/ns
# Warmup Iteration   4: 0,877 ops/ns
# Warmup Iteration   5: 0,885 ops/ns
Iteration   1: 0,879 ops/ns
                 writer1: 0,465 ops/ns
                 writer2: 0,414 ops/ns

Iteration   2: 0,901 ops/ns
                 writer1: 0,451 ops/ns
                 writer2: 0,450 ops/ns

Iteration   3: 0,878 ops/ns
                 writer1: 0,469 ops/ns
                 writer2: 0,409 ops/ns

Iteration   4: 0,898 ops/ns
                 writer1: 0,453 ops/ns
                 writer2: 0,446 ops/ns

Iteration   5: 0,887 ops/ns
                 writer1: 0,425 ops/ns
                 writer2: 0,462 ops/ns


# Run progress: 40,00% complete, ETA 00:20:37
# Fork: 4 of 5
# Warmup Iteration   1: 0,878 ops/ns
# Warmup Iteration   2: 0,877 ops/ns
# Warmup Iteration   3: 0,899 ops/ns
# Warmup Iteration   4: 0,877 ops/ns
# Warmup Iteration   5: 0,877 ops/ns
Iteration   1: 0,891 ops/ns
                 writer1: 0,441 ops/ns
                 writer2: 0,450 ops/ns

Iteration   2: 0,877 ops/ns
                 writer1: 0,411 ops/ns
                 writer2: 0,465 ops/ns

Iteration   3: 0,883 ops/ns
                 writer1: 0,464 ops/ns
                 writer2: 0,419 ops/ns

Iteration   4: 0,898 ops/ns
                 writer1: 0,453 ops/ns
                 writer2: 0,445 ops/ns

Iteration   5: 0,886 ops/ns
                 writer1: 0,443 ops/ns
                 writer2: 0,443 ops/ns


# Run progress: 45,00% complete, ETA 00:18:53
# Fork: 5 of 5
# Warmup Iteration   1: 0,884 ops/ns
# Warmup Iteration   2: 0,902 ops/ns
# Warmup Iteration   3: 0,881 ops/ns
# Warmup Iteration   4: 0,889 ops/ns
# Warmup Iteration   5: 0,884 ops/ns
Iteration   1: 0,884 ops/ns
                 writer1: 0,424 ops/ns
                 writer2: 0,459 ops/ns

Iteration   2: 0,878 ops/ns
                 writer1: 0,470 ops/ns
                 writer2: 0,408 ops/ns

Iteration   3: 0,920 ops/ns
                 writer1: 0,459 ops/ns
                 writer2: 0,460 ops/ns

Iteration   4: 0,877 ops/ns
                 writer1: 0,470 ops/ns
                 writer2: 0,407 ops/ns

Iteration   5: 0,893 ops/ns
                 writer1: 0,469 ops/ns
                 writer2: 0,424 ops/ns



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.FalseSharingBenchmark.baseline":
  0,895 Â±(99.9%) 0,014 ops/ns [Average]
  (min, avg, max) = (0,877, 0,895, 0,948), stdev = 0,019
  CI (99.9%): [0,881, 0,910] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.FalseSharingBenchmark.baseline:writer1":
  0,456 Â±(99.9%) 0,014 ops/ns [Average]
  (min, avg, max) = (0,411, 0,456, 0,497), stdev = 0,019
  CI (99.9%): [0,442, 0,470] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.FalseSharingBenchmark.baseline:writer2":
  0,439 Â±(99.9%) 0,015 ops/ns [Average]
  (min, avg, max) = (0,406, 0,439, 0,465), stdev = 0,020
  CI (99.9%): [0,424, 0,455] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 2 threads (1 group; 1x "writer1", 1x "writer2" in each group), will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.FalseSharingBenchmark.contended

# Run progress: 50,00% complete, ETA 00:17:09
# Fork: 1 of 5
# Warmup Iteration   1: 0,889 ops/ns
# Warmup Iteration   2: 0,880 ops/ns
# Warmup Iteration   3: 0,925 ops/ns
# Warmup Iteration   4: 0,925 ops/ns
# Warmup Iteration   5: 0,925 ops/ns
Iteration   1: 0,880 ops/ns
                 writer1: 0,419 ops/ns
                 writer2: 0,462 ops/ns

Iteration   2: 0,883 ops/ns
                 writer1: 0,421 ops/ns
                 writer2: 0,461 ops/ns

Iteration   3: 0,878 ops/ns
                 writer1: 0,470 ops/ns
                 writer2: 0,407 ops/ns

Iteration   4: 0,878 ops/ns
                 writer1: 0,470 ops/ns
                 writer2: 0,408 ops/ns

Iteration   5: 0,881 ops/ns
                 writer1: 0,419 ops/ns
                 writer2: 0,462 ops/ns


# Run progress: 55,00% complete, ETA 00:15:26
# Fork: 2 of 5
# Warmup Iteration   1: 0,876 ops/ns
# Warmup Iteration   2: 0,920 ops/ns
# Warmup Iteration   3: 0,877 ops/ns
# Warmup Iteration   4: 0,883 ops/ns
# Warmup Iteration   5: 0,925 ops/ns
Iteration   1: 0,877 ops/ns
                 writer1: 0,470 ops/ns
                 writer2: 0,407 ops/ns

Iteration   2: 0,882 ops/ns
                 writer1: 0,420 ops/ns
                 writer2: 0,462 ops/ns

Iteration   3: 0,878 ops/ns
                 writer1: 0,470 ops/ns
                 writer2: 0,408 ops/ns

Iteration   4: 0,886 ops/ns
                 writer1: 0,444 ops/ns
                 writer2: 0,442 ops/ns

Iteration   5: 0,877 ops/ns
                 writer1: 0,470 ops/ns
                 writer2: 0,407 ops/ns


# Run progress: 60,00% complete, ETA 00:13:44
# Fork: 3 of 5
# Warmup Iteration   1: 0,898 ops/ns
# Warmup Iteration   2: 0,879 ops/ns
# Warmup Iteration   3: 0,877 ops/ns
# Warmup Iteration   4: 0,877 ops/ns
# Warmup Iteration   5: 0,925 ops/ns
Iteration   1: 0,925 ops/ns
                 writer1: 0,466 ops/ns
                 writer2: 0,459 ops/ns

Iteration   2: 0,886 ops/ns
                 writer1: 0,463 ops/ns
                 writer2: 0,423 ops/ns

Iteration   3: 0,879 ops/ns
                 writer1: 0,467 ops/ns
                 writer2: 0,412 ops/ns

Iteration   4: 0,881 ops/ns
                 writer1: 0,419 ops/ns
                 writer2: 0,462 ops/ns

Iteration   5: 0,881 ops/ns
                 writer1: 0,419 ops/ns
                 writer2: 0,461 ops/ns


# Run progress: 65,00% complete, ETA 00:12:02
# Fork: 4 of 5
# Warmup Iteration   1: 0,883 ops/ns
# Warmup Iteration   2: 0,901 ops/ns
# Warmup Iteration   3: 0,878 ops/ns
# Warmup Iteration   4: 0,877 ops/ns
# Warmup Iteration   5: 0,882 ops/ns
Iteration   1: 0,878 ops/ns
                 writer1: 0,407 ops/ns
                 writer2: 0,470 ops/ns

Iteration   2: 0,901 ops/ns
                 writer1: 0,450 ops/ns
                 writer2: 0,450 ops/ns

Iteration   3: 0,886 ops/ns
                 writer1: 0,443 ops/ns
                 writer2: 0,443 ops/ns

Iteration   4: 0,879 ops/ns
                 writer1: 0,466 ops/ns
                 writer2: 0,413 ops/ns

Iteration   5: 0,877 ops/ns
                 writer1: 0,470 ops/ns
                 writer2: 0,406 ops/ns


# Run progress: 70,00% complete, ETA 00:10:20
# Fork: 5 of 5
# Warmup Iteration   1: 0,891 ops/ns
# Warmup Iteration   2: 0,876 ops/ns
# Warmup Iteration   3: 0,877 ops/ns
# Warmup Iteration   4: 0,877 ops/ns
# Warmup Iteration   5: 0,901 ops/ns
Iteration   1: 0,877 ops/ns
                 writer1: 0,470 ops/ns
                 writer2: 0,407 ops/ns

Iteration   2: 0,890 ops/ns
                 writer1: 0,426 ops/ns
                 writer2: 0,464 ops/ns

Iteration   3: 0,876 ops/ns
                 writer1: 0,470 ops/ns
                 writer2: 0,406 ops/ns

Iteration   4: 0,886 ops/ns
                 writer1: 0,440 ops/ns
                 writer2: 0,445 ops/ns

Iteration   5: 0,877 ops/ns
                 writer1: 0,470 ops/ns
                 writer2: 0,406 ops/ns



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.FalseSharingBenchmark.contended":
  0,883 Â±(99.9%) 0,008 ops/ns [Average]
  (min, avg, max) = (0,876, 0,883, 0,925), stdev = 0,010
  CI (99.9%): [0,875, 0,891] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.FalseSharingBenchmark.contended:writer1":
  0,449 Â±(99.9%) 0,017 ops/ns [Average]
  (min, avg, max) = (0,407, 0,449, 0,470), stdev = 0,023
  CI (99.9%): [0,432, 0,466] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.FalseSharingBenchmark.contended:writer2":
  0,434 Â±(99.9%) 0,019 ops/ns [Average]
  (min, avg, max) = (0,406, 0,434, 0,470), stdev = 0,026
  CI (99.9%): [0,415, 0,453] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 2 threads (1 group; 1x "writer1", 1x "writer2" in each group), will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.FalseSharingBenchmark.manual_pad

# Run progress: 75,00% complete, ETA 00:08:37
# Fork: 1 of 5
# Warmup Iteration   1: 2,582 ops/ns
# Warmup Iteration   2: 2,584 ops/ns
# Warmup Iteration   3: 2,590 ops/ns
# Warmup Iteration   4: 2,587 ops/ns
# Warmup Iteration   5: 2,590 ops/ns
Iteration   1: 2,594 ops/ns
                 writer1: 1,298 ops/ns
                 writer2: 1,296 ops/ns

Iteration   2: 2,590 ops/ns
                 writer1: 1,296 ops/ns
                 writer2: 1,293 ops/ns

Iteration   3: 2,583 ops/ns
                 writer1: 1,296 ops/ns
                 writer2: 1,286 ops/ns

Iteration   4: 2,589 ops/ns
                 writer1: 1,296 ops/ns
                 writer2: 1,293 ops/ns

Iteration   5: 2,579 ops/ns
                 writer1: 1,292 ops/ns
                 writer2: 1,287 ops/ns


# Run progress: 80,00% complete, ETA 00:06:54
# Fork: 2 of 5
# Warmup Iteration   1: 2,597 ops/ns
# Warmup Iteration   2: 2,591 ops/ns
# Warmup Iteration   3: 2,598 ops/ns
# Warmup Iteration   4: 2,599 ops/ns
# Warmup Iteration   5: 2,591 ops/ns
Iteration   1: 2,596 ops/ns
                 writer1: 1,296 ops/ns
                 writer2: 1,300 ops/ns

Iteration   2: 2,611 ops/ns
                 writer1: 1,301 ops/ns
                 writer2: 1,310 ops/ns

Iteration   3: 2,590 ops/ns
                 writer1: 1,291 ops/ns
                 writer2: 1,299 ops/ns

Iteration   4: 2,599 ops/ns
                 writer1: 1,299 ops/ns
                 writer2: 1,300 ops/ns

Iteration   5: 2,593 ops/ns
                 writer1: 1,299 ops/ns
                 writer2: 1,294 ops/ns


# Run progress: 85,00% complete, ETA 00:05:11
# Fork: 3 of 5
# Warmup Iteration   1: 2,617 ops/ns
# Warmup Iteration   2: 2,592 ops/ns
# Warmup Iteration   3: 2,593 ops/ns
# Warmup Iteration   4: 2,596 ops/ns
# Warmup Iteration   5: 2,592 ops/ns
Iteration   1: 2,611 ops/ns
                 writer1: 1,311 ops/ns
                 writer2: 1,300 ops/ns

Iteration   2: 2,592 ops/ns
                 writer1: 1,295 ops/ns
                 writer2: 1,297 ops/ns

Iteration   3: 2,595 ops/ns
                 writer1: 1,296 ops/ns
                 writer2: 1,299 ops/ns

Iteration   4: 2,604 ops/ns
                 writer1: 1,302 ops/ns
                 writer2: 1,303 ops/ns

Iteration   5: 2,593 ops/ns
                 writer1: 1,295 ops/ns
                 writer2: 1,297 ops/ns


# Run progress: 90,00% complete, ETA 00:03:27
# Fork: 4 of 5
# Warmup Iteration   1: 2,595 ops/ns
# Warmup Iteration   2: 2,593 ops/ns
# Warmup Iteration   3: 2,591 ops/ns
# Warmup Iteration   4: 2,597 ops/ns
# Warmup Iteration   5: 2,600 ops/ns
Iteration   1: 2,599 ops/ns
                 writer1: 1,300 ops/ns
                 writer2: 1,299 ops/ns

Iteration   2: 2,591 ops/ns
                 writer1: 1,295 ops/ns
                 writer2: 1,296 ops/ns

Iteration   3: 2,312 ops/ns
                 writer1: 1,156 ops/ns
                 writer2: 1,156 ops/ns

Iteration   4: 2,606 ops/ns
                 writer1: 1,304 ops/ns
                 writer2: 1,301 ops/ns

Iteration   5: 2,592 ops/ns
                 writer1: 1,293 ops/ns
                 writer2: 1,299 ops/ns


# Run progress: 95,00% complete, ETA 00:01:43
# Fork: 5 of 5
# Warmup Iteration   1: 2,596 ops/ns
# Warmup Iteration   2: 2,596 ops/ns
# Warmup Iteration   3: 2,595 ops/ns
# Warmup Iteration   4: 2,602 ops/ns
# Warmup Iteration   5: 2,590 ops/ns
Iteration   1: 2,596 ops/ns
                 writer1: 1,299 ops/ns
                 writer2: 1,297 ops/ns

Iteration   2: 2,590 ops/ns
                 writer1: 1,297 ops/ns
                 writer2: 1,294 ops/ns

Iteration   3: 2,594 ops/ns
                 writer1: 1,298 ops/ns
                 writer2: 1,296 ops/ns

Iteration   4: 2,593 ops/ns
                 writer1: 1,297 ops/ns
                 writer2: 1,296 ops/ns

Iteration   5: 2,603 ops/ns
                 writer1: 1,294 ops/ns
                 writer2: 1,309 ops/ns



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.FalseSharingBenchmark.manual_pad":
  2,584 Â±(99.9%) 0,043 ops/ns [Average]
  (min, avg, max) = (2,312, 2,584, 2,611), stdev = 0,057
  CI (99.9%): [2,541, 2,627] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.FalseSharingBenchmark.manual_pad:writer1":
  1,292 Â±(99.9%) 0,021 ops/ns [Average]
  (min, avg, max) = (1,156, 1,292, 1,311), stdev = 0,029
  CI (99.9%): [1,270, 1,313] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.compiler.FalseSharingBenchmark.manual_pad:writer2":
  1,292 Â±(99.9%) 0,022 ops/ns [Average]
  (min, avg, max) = (1,156, 1,292, 1,310), stdev = 0,029
  CI (99.9%): [1,270, 1,313] (assumes normal distribution)


# Run complete. Total time: 00:34:32

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                  Mode  Cnt  Score   Error   Units
FalseSharingBenchmark.array_pad           thrpt   25  1,089 Â± 0,279  ops/ns
FalseSharingBenchmark.array_pad:writer1   thrpt   25  0,668 Â± 0,270  ops/ns
FalseSharingBenchmark.array_pad:writer2   thrpt   25  0,421 Â± 0,009  ops/ns
FalseSharingBenchmark.baseline            thrpt   25  0,895 Â± 0,014  ops/ns
FalseSharingBenchmark.baseline:writer1    thrpt   25  0,456 Â± 0,014  ops/ns
FalseSharingBenchmark.baseline:writer2    thrpt   25  0,439 Â± 0,015  ops/ns
FalseSharingBenchmark.contended           thrpt   25  0,883 Â± 0,008  ops/ns
FalseSharingBenchmark.contended:writer1   thrpt   25  0,449 Â± 0,017  ops/ns
FalseSharingBenchmark.contended:writer2   thrpt   25  0,434 Â± 0,019  ops/ns
FalseSharingBenchmark.manual_pad          thrpt   25  2,584 Â± 0,043  ops/ns
FalseSharingBenchmark.manual_pad:writer1  thrpt   25  1,292 Â± 0,021  ops/ns
FalseSharingBenchmark.manual_pad:writer2  thrpt   25  1,292 Â± 0,022  ops/ns

Benchmark result is saved to results/jdk-17/arm64/openjdk-hotspot-vm/FalseSharingBenchmark.csv

Running FibonacciBenchmark benchmark ...
java  -jar benchmarks/target/benchmarks.jar .*FibonacciBenchmark.* -foe true -wi 5 -w 10 -i 5 -r 10 -f 5 -rf csv -rff results/jdk-17/arm64/openjdk-hotspot-vm/FibonacciBenchmark.csv -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch"

# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.macro.fibonacci.FibonacciBenchmark.binet_formula
# Parameters: (n = 500)

# Run progress: 0,00% complete, ETA 01:06:40
# Fork: 1 of 5
# Warmup Iteration   1: 54156,918 us/op
# Warmup Iteration   2: 54074,431 us/op
# Warmup Iteration   3: 54213,476 us/op
# Warmup Iteration   4: 54391,293 us/op
# Warmup Iteration   5: 54349,644 us/op
Iteration   1: 54362,963 us/op
Iteration   2: 54313,230 us/op
Iteration   3: 54378,748 us/op
Iteration   4: 54325,160 us/op
Iteration   5: 54395,941 us/op

# Run progress: 2,50% complete, ETA 01:08:53
# Fork: 2 of 5
# Warmup Iteration   1: 54188,459 us/op
# Warmup Iteration   2: 54177,307 us/op
# Warmup Iteration   3: 54290,179 us/op
# Warmup Iteration   4: 54437,337 us/op
# Warmup Iteration   5: 54352,625 us/op
Iteration   1: 54408,090 us/op
Iteration   2: 54351,134 us/op
Iteration   3: 54463,539 us/op
Iteration   4: 54364,754 us/op
Iteration   5: 54471,208 us/op

# Run progress: 5,00% complete, ETA 01:06:13
# Fork: 3 of 5
# Warmup Iteration   1: 54188,518 us/op
# Warmup Iteration   2: 54224,770 us/op
# Warmup Iteration   3: 54323,557 us/op
# Warmup Iteration   4: 54496,938 us/op
# Warmup Iteration   5: 56436,735 us/op
Iteration   1: 54531,731 us/op
Iteration   2: 54478,896 us/op
Iteration   3: 54525,306 us/op
Iteration   4: 54397,166 us/op
Iteration   5: 57180,227 us/op

# Run progress: 7,50% complete, ETA 01:04:10
# Fork: 4 of 5
# Warmup Iteration   1: 54746,103 us/op
# Warmup Iteration   2: 54383,658 us/op
# Warmup Iteration   3: 54308,157 us/op
# Warmup Iteration   4: 54717,972 us/op
# Warmup Iteration   5: 56300,159 us/op
Iteration   1: 54515,542 us/op
Iteration   2: 54345,319 us/op
Iteration   3: 54506,903 us/op
Iteration   4: 54424,000 us/op
Iteration   5: 56949,633 us/op

# Run progress: 10,00% complete, ETA 01:02:41
# Fork: 5 of 5
# Warmup Iteration   1: 54204,084 us/op
# Warmup Iteration   2: 54198,185 us/op
# Warmup Iteration   3: 54229,424 us/op
# Warmup Iteration   4: 54555,857 us/op
# Warmup Iteration   5: 54437,095 us/op
Iteration   1: 54317,059 us/op
Iteration   2: 54303,964 us/op
Iteration   3: 54390,742 us/op
Iteration   4: 54279,380 us/op
Iteration   5: 54354,264 us/op


Result "com.ionutbalosin.jvm.performance.benchmarks.macro.fibonacci.FibonacciBenchmark.binet_formula":
  54613,396 Â±(99.9%) 555,955 us/op [Average]
  (min, avg, max) = (54279,380, 54613,396, 57180,227), stdev = 742,184
  CI (99.9%): [54057,441, 55169,351] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.macro.fibonacci.FibonacciBenchmark.binet_formula
# Parameters: (n = 3000)

# Run progress: 12,50% complete, ETA 01:01:06
# Fork: 1 of 5
# Warmup Iteration   1: 819493,811 us/op
# Warmup Iteration   2: 819501,231 us/op
# Warmup Iteration   3: 820910,042 us/op
# Warmup Iteration   4: 819888,897 us/op
# Warmup Iteration   5: 820440,413 us/op
Iteration   1: 821490,628 us/op
Iteration   2: 820660,346 us/op
Iteration   3: 821348,817 us/op
Iteration   4: 821181,013 us/op
Iteration   5: 821081,064 us/op

# Run progress: 15,00% complete, ETA 01:00:07
# Fork: 2 of 5
# Warmup Iteration   1: 818140,266 us/op
# Warmup Iteration   2: 817459,215 us/op
# Warmup Iteration   3: 819899,574 us/op
# Warmup Iteration   4: 819234,276 us/op
# Warmup Iteration   5: 820020,442 us/op
Iteration   1: 820267,888 us/op
Iteration   2: 819595,615 us/op
Iteration   3: 819835,782 us/op
Iteration   4: 820102,353 us/op
Iteration   5: 819302,301 us/op

# Run progress: 17,50% complete, ETA 00:58:52
# Fork: 3 of 5
# Warmup Iteration   1: 818730,920 us/op
# Warmup Iteration   2: 818844,176 us/op
# Warmup Iteration   3: 819284,583 us/op
# Warmup Iteration   4: 819611,734 us/op
# Warmup Iteration   5: 820113,526 us/op
Iteration   1: 822150,696 us/op
Iteration   2: 821092,064 us/op
Iteration   3: 820715,811 us/op
Iteration   4: 821120,362 us/op
Iteration   5: 820741,615 us/op

# Run progress: 20,00% complete, ETA 00:57:16
# Fork: 4 of 5
# Warmup Iteration   1: 819264,071 us/op
# Warmup Iteration   2: 817985,699 us/op
# Warmup Iteration   3: 819320,279 us/op
# Warmup Iteration   4: 818958,154 us/op
# Warmup Iteration   5: 818899,365 us/op
Iteration   1: 819769,013 us/op
Iteration   2: 819267,728 us/op
Iteration   3: 819256,978 us/op
Iteration   4: 819839,080 us/op
Iteration   5: 819336,474 us/op

# Run progress: 22,50% complete, ETA 00:55:42
# Fork: 5 of 5
# Warmup Iteration   1: 818740,407 us/op
# Warmup Iteration   2: 821144,070 us/op
# Warmup Iteration   3: 819769,846 us/op
# Warmup Iteration   4: 820394,253 us/op
# Warmup Iteration   5: 819358,542 us/op
Iteration   1: 820646,654 us/op
Iteration   2: 820985,603 us/op
Iteration   3: 819648,397 us/op
Iteration   4: 820595,484 us/op
Iteration   5: 819935,163 us/op


Result "com.ionutbalosin.jvm.performance.benchmarks.macro.fibonacci.FibonacciBenchmark.binet_formula":
  820398,677 Â±(99.9%) 600,866 us/op [Average]
  (min, avg, max) = (819256,978, 820398,677, 822150,696), stdev = 802,140
  CI (99.9%): [819797,811, 820999,544] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.macro.fibonacci.FibonacciBenchmark.dynamic
# Parameters: (n = 500)

# Run progress: 25,00% complete, ETA 00:53:59
# Fork: 1 of 5
# Warmup Iteration   1: 11,298 us/op
# Warmup Iteration   2: 11,315 us/op
# Warmup Iteration   3: 11,564 us/op
# Warmup Iteration   4: 11,649 us/op
# Warmup Iteration   5: 11,742 us/op
Iteration   1: 11,747 us/op
Iteration   2: 11,523 us/op
Iteration   3: 11,754 us/op
Iteration   4: 11,656 us/op
Iteration   5: 11,660 us/op

# Run progress: 27,50% complete, ETA 00:51:51
# Fork: 2 of 5
# Warmup Iteration   1: 11,316 us/op
# Warmup Iteration   2: 11,383 us/op
# Warmup Iteration   3: 11,702 us/op
# Warmup Iteration   4: 11,983 us/op
# Warmup Iteration   5: 11,920 us/op
Iteration   1: 11,754 us/op
Iteration   2: 11,849 us/op
Iteration   3: 11,507 us/op
Iteration   4: 11,749 us/op
Iteration   5: 11,770 us/op

# Run progress: 30,00% complete, ETA 00:49:52
# Fork: 3 of 5
# Warmup Iteration   1: 10,997 us/op
# Warmup Iteration   2: 11,443 us/op
# Warmup Iteration   3: 11,487 us/op
# Warmup Iteration   4: 11,493 us/op
# Warmup Iteration   5: 11,574 us/op
Iteration   1: 11,508 us/op
Iteration   2: 11,597 us/op
Iteration   3: 11,544 us/op
Iteration   4: 11,606 us/op
Iteration   5: 11,624 us/op

# Run progress: 32,50% complete, ETA 00:48:01
# Fork: 4 of 5
# Warmup Iteration   1: 11,297 us/op
# Warmup Iteration   2: 11,349 us/op
# Warmup Iteration   3: 11,734 us/op
# Warmup Iteration   4: 11,644 us/op
# Warmup Iteration   5: 11,770 us/op
Iteration   1: 11,877 us/op
Iteration   2: 11,648 us/op
Iteration   3: 11,760 us/op
Iteration   4: 11,572 us/op
Iteration   5: 11,801 us/op

# Run progress: 35,00% complete, ETA 00:46:04
# Fork: 5 of 5
# Warmup Iteration   1: 11,017 us/op
# Warmup Iteration   2: 11,627 us/op
# Warmup Iteration   3: 11,783 us/op
# Warmup Iteration   4: 11,805 us/op
# Warmup Iteration   5: 11,757 us/op
Iteration   1: 11,871 us/op
Iteration   2: 11,709 us/op
Iteration   3: 11,750 us/op
Iteration   4: 11,753 us/op
Iteration   5: 11,777 us/op


Result "com.ionutbalosin.jvm.performance.benchmarks.macro.fibonacci.FibonacciBenchmark.dynamic":
  11,695 Â±(99.9%) 0,084 us/op [Average]
  (min, avg, max) = (11,507, 11,695, 11,877), stdev = 0,112
  CI (99.9%): [11,611, 11,778] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.macro.fibonacci.FibonacciBenchmark.dynamic
# Parameters: (n = 3000)

# Run progress: 37,50% complete, ETA 00:44:15
# Fork: 1 of 5
# Warmup Iteration   1: 99,980 us/op
# Warmup Iteration   2: 100,263 us/op
# Warmup Iteration   3: 100,872 us/op
# Warmup Iteration   4: 100,998 us/op
# Warmup Iteration   5: 101,127 us/op
Iteration   1: 101,137 us/op
Iteration   2: 100,614 us/op
Iteration   3: 100,338 us/op
Iteration   4: 101,094 us/op
Iteration   5: 100,977 us/op

# Run progress: 40,00% complete, ETA 00:42:23
# Fork: 2 of 5
# Warmup Iteration   1: 99,894 us/op
# Warmup Iteration   2: 99,866 us/op
# Warmup Iteration   3: 100,587 us/op
# Warmup Iteration   4: 100,832 us/op
# Warmup Iteration   5: 100,673 us/op
Iteration   1: 100,837 us/op
Iteration   2: 100,589 us/op
Iteration   3: 100,488 us/op
Iteration   4: 100,971 us/op
Iteration   5: 100,472 us/op

# Run progress: 42,50% complete, ETA 00:40:33
# Fork: 3 of 5
# Warmup Iteration   1: 100,285 us/op
# Warmup Iteration   2: 100,561 us/op
# Warmup Iteration   3: 101,168 us/op
# Warmup Iteration   4: 101,377 us/op
# Warmup Iteration   5: 100,995 us/op
Iteration   1: 101,064 us/op
Iteration   2: 100,943 us/op
Iteration   3: 101,138 us/op
Iteration   4: 100,922 us/op
Iteration   5: 101,210 us/op

# Run progress: 45,00% complete, ETA 00:38:43
# Fork: 4 of 5
# Warmup Iteration   1: 99,936 us/op
# Warmup Iteration   2: 100,289 us/op
# Warmup Iteration   3: 100,845 us/op
# Warmup Iteration   4: 101,212 us/op
# Warmup Iteration   5: 100,812 us/op
Iteration   1: 101,096 us/op
Iteration   2: 101,155 us/op
Iteration   3: 100,919 us/op
Iteration   4: 100,793 us/op
Iteration   5: 101,003 us/op

# Run progress: 47,50% complete, ETA 00:36:58
# Fork: 5 of 5
# Warmup Iteration   1: 99,821 us/op
# Warmup Iteration   2: 100,260 us/op
# Warmup Iteration   3: 101,232 us/op
# Warmup Iteration   4: 101,103 us/op
# Warmup Iteration   5: 100,937 us/op
Iteration   1: 100,819 us/op
Iteration   2: 100,935 us/op
Iteration   3: 101,090 us/op
Iteration   4: 101,065 us/op
Iteration   5: 101,062 us/op


Result "com.ionutbalosin.jvm.performance.benchmarks.macro.fibonacci.FibonacciBenchmark.dynamic":
  100,909 Â±(99.9%) 0,178 us/op [Average]
  (min, avg, max) = (100,338, 100,909, 101,210), stdev = 0,238
  CI (99.9%): [100,731, 101,088] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.macro.fibonacci.FibonacciBenchmark.iterative
# Parameters: (n = 500)

# Run progress: 50,00% complete, ETA 00:35:13
# Fork: 1 of 5
# Warmup Iteration   1: 6,051 us/op
# Warmup Iteration   2: 6,150 us/op
# Warmup Iteration   3: 6,108 us/op
# Warmup Iteration   4: 6,108 us/op
# Warmup Iteration   5: 6,098 us/op
Iteration   1: 6,112 us/op
Iteration   2: 6,073 us/op
Iteration   3: 6,098 us/op
Iteration   4: 6,103 us/op
Iteration   5: 6,082 us/op

# Run progress: 52,50% complete, ETA 00:33:27
# Fork: 2 of 5
# Warmup Iteration   1: 6,120 us/op
# Warmup Iteration   2: 6,161 us/op
# Warmup Iteration   3: 6,091 us/op
# Warmup Iteration   4: 6,105 us/op
# Warmup Iteration   5: 6,108 us/op
Iteration   1: 6,096 us/op
Iteration   2: 6,117 us/op
Iteration   3: 6,107 us/op
Iteration   4: 6,110 us/op
Iteration   5: 6,131 us/op

# Run progress: 55,00% complete, ETA 00:31:41
# Fork: 3 of 5
# Warmup Iteration   1: 6,125 us/op
# Warmup Iteration   2: 6,154 us/op
# Warmup Iteration   3: 6,096 us/op
# Warmup Iteration   4: 6,102 us/op
# Warmup Iteration   5: 6,099 us/op
Iteration   1: 6,090 us/op
Iteration   2: 6,095 us/op
Iteration   3: 6,097 us/op
Iteration   4: 6,120 us/op
Iteration   5: 6,098 us/op

# Run progress: 57,50% complete, ETA 00:29:56
# Fork: 4 of 5
# Warmup Iteration   1: 6,157 us/op
# Warmup Iteration   2: 6,214 us/op
# Warmup Iteration   3: 6,163 us/op
# Warmup Iteration   4: 6,175 us/op
# Warmup Iteration   5: 6,180 us/op
Iteration   1: 6,141 us/op
Iteration   2: 6,155 us/op
Iteration   3: 6,140 us/op
Iteration   4: 6,147 us/op
Iteration   5: 6,140 us/op

# Run progress: 60,00% complete, ETA 00:28:07
# Fork: 5 of 5
# Warmup Iteration   1: 6,107 us/op
# Warmup Iteration   2: 6,111 us/op
# Warmup Iteration   3: 6,095 us/op
# Warmup Iteration   4: 6,109 us/op
# Warmup Iteration   5: 6,105 us/op
Iteration   1: 6,099 us/op
Iteration   2: 6,096 us/op
Iteration   3: 6,091 us/op
Iteration   4: 6,088 us/op
Iteration   5: 6,097 us/op


Result "com.ionutbalosin.jvm.performance.benchmarks.macro.fibonacci.FibonacciBenchmark.iterative":
  6,109 Â±(99.9%) 0,016 us/op [Average]
  (min, avg, max) = (6,073, 6,109, 6,155), stdev = 0,022
  CI (99.9%): [6,093, 6,125] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.macro.fibonacci.FibonacciBenchmark.iterative
# Parameters: (n = 3000)

# Run progress: 62,50% complete, ETA 00:26:21
# Fork: 1 of 5
# Warmup Iteration   1: 86,090 us/op
# Warmup Iteration   2: 86,339 us/op
# Warmup Iteration   3: 86,630 us/op
# Warmup Iteration   4: 86,774 us/op
# Warmup Iteration   5: 86,646 us/op
Iteration   1: 86,702 us/op
Iteration   2: 86,690 us/op
Iteration   3: 86,700 us/op
Iteration   4: 86,709 us/op
Iteration   5: 86,636 us/op

# Run progress: 65,00% complete, ETA 00:24:34
# Fork: 2 of 5
# Warmup Iteration   1: 85,943 us/op
# Warmup Iteration   2: 86,318 us/op
# Warmup Iteration   3: 86,808 us/op
# Warmup Iteration   4: 86,843 us/op
# Warmup Iteration   5: 86,775 us/op
Iteration   1: 86,600 us/op
Iteration   2: 86,763 us/op
Iteration   3: 86,862 us/op
Iteration   4: 86,817 us/op
Iteration   5: 86,684 us/op

# Run progress: 67,50% complete, ETA 00:22:48
# Fork: 3 of 5
# Warmup Iteration   1: 86,033 us/op
# Warmup Iteration   2: 86,381 us/op
# Warmup Iteration   3: 86,705 us/op
# Warmup Iteration   4: 86,565 us/op
# Warmup Iteration   5: 86,693 us/op
Iteration   1: 86,754 us/op
Iteration   2: 86,667 us/op
Iteration   3: 86,580 us/op
Iteration   4: 86,698 us/op
Iteration   5: 86,617 us/op

# Run progress: 70,00% complete, ETA 00:21:01
# Fork: 4 of 5
# Warmup Iteration   1: 86,038 us/op
# Warmup Iteration   2: 86,357 us/op
# Warmup Iteration   3: 86,745 us/op
# Warmup Iteration   4: 86,710 us/op
# Warmup Iteration   5: 86,798 us/op
Iteration   1: 86,701 us/op
Iteration   2: 86,734 us/op
Iteration   3: 86,642 us/op
Iteration   4: 86,686 us/op
Iteration   5: 86,735 us/op

# Run progress: 72,50% complete, ETA 00:19:16
# Fork: 5 of 5
# Warmup Iteration   1: 85,999 us/op
# Warmup Iteration   2: 86,334 us/op
# Warmup Iteration   3: 86,641 us/op
# Warmup Iteration   4: 86,621 us/op
# Warmup Iteration   5: 86,617 us/op
Iteration   1: 86,642 us/op
Iteration   2: 86,809 us/op
Iteration   3: 86,698 us/op
Iteration   4: 86,691 us/op
Iteration   5: 86,489 us/op


Result "com.ionutbalosin.jvm.performance.benchmarks.macro.fibonacci.FibonacciBenchmark.iterative":
  86,692 Â±(99.9%) 0,059 us/op [Average]
  (min, avg, max) = (86,489, 86,692, 86,862), stdev = 0,078
  CI (99.9%): [86,634, 86,751] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.macro.fibonacci.FibonacciBenchmark.recursive
# Parameters: (n = 500)

# Run progress: 75,00% complete, ETA 00:17:30
# Fork: 1 of 5
# Warmup Iteration   1: 9,066 us/op
# Warmup Iteration   2: 9,265 us/op
# Warmup Iteration   3: 9,313 us/op
# Warmup Iteration   4: 9,275 us/op
# Warmup Iteration   5: 9,313 us/op
Iteration   1: 9,359 us/op
Iteration   2: 9,343 us/op
Iteration   3: 9,336 us/op
Iteration   4: 9,360 us/op
Iteration   5: 9,294 us/op

# Run progress: 77,50% complete, ETA 00:15:45
# Fork: 2 of 5
# Warmup Iteration   1: 9,149 us/op
# Warmup Iteration   2: 9,248 us/op
# Warmup Iteration   3: 9,324 us/op
# Warmup Iteration   4: 9,305 us/op
# Warmup Iteration   5: 9,358 us/op
Iteration   1: 9,284 us/op
Iteration   2: 9,309 us/op
Iteration   3: 9,338 us/op
Iteration   4: 9,311 us/op
Iteration   5: 9,229 us/op

# Run progress: 80,00% complete, ETA 00:13:59
# Fork: 3 of 5
# Warmup Iteration   1: 9,143 us/op
# Warmup Iteration   2: 9,306 us/op
# Warmup Iteration   3: 9,369 us/op
# Warmup Iteration   4: 9,388 us/op
# Warmup Iteration   5: 9,445 us/op
Iteration   1: 9,363 us/op
Iteration   2: 9,241 us/op
Iteration   3: 9,407 us/op
Iteration   4: 9,310 us/op
Iteration   5: 9,401 us/op

# Run progress: 82,50% complete, ETA 00:12:14
# Fork: 4 of 5
# Warmup Iteration   1: 9,127 us/op
# Warmup Iteration   2: 9,249 us/op
# Warmup Iteration   3: 9,255 us/op
# Warmup Iteration   4: 9,299 us/op
# Warmup Iteration   5: 9,326 us/op
Iteration   1: 9,300 us/op
Iteration   2: 9,388 us/op
Iteration   3: 9,399 us/op
Iteration   4: 9,337 us/op
Iteration   5: 9,310 us/op

# Run progress: 85,00% complete, ETA 00:10:28
# Fork: 5 of 5
# Warmup Iteration   1: 9,530 us/op
# Warmup Iteration   2: 9,610 us/op
# Warmup Iteration   3: 9,689 us/op
# Warmup Iteration   4: 9,736 us/op
# Warmup Iteration   5: 9,653 us/op
Iteration   1: 9,713 us/op
Iteration   2: 9,575 us/op
Iteration   3: 9,742 us/op
Iteration   4: 9,739 us/op
Iteration   5: 9,745 us/op


Result "com.ionutbalosin.jvm.performance.benchmarks.macro.fibonacci.FibonacciBenchmark.recursive":
  9,405 Â±(99.9%) 0,120 us/op [Average]
  (min, avg, max) = (9,229, 9,405, 9,745), stdev = 0,161
  CI (99.9%): [9,285, 9,526] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.macro.fibonacci.FibonacciBenchmark.recursive
# Parameters: (n = 3000)

# Run progress: 87,50% complete, ETA 00:08:44
# Fork: 1 of 5
# Warmup Iteration   1: 93,621 us/op
# Warmup Iteration   2: 93,325 us/op
# Warmup Iteration   3: 93,254 us/op
# Warmup Iteration   4: 93,232 us/op
# Warmup Iteration   5: 93,488 us/op
Iteration   1: 93,289 us/op
Iteration   2: 93,147 us/op
Iteration   3: 93,170 us/op
Iteration   4: 93,167 us/op
Iteration   5: 93,176 us/op

# Run progress: 90,00% complete, ETA 00:06:59
# Fork: 2 of 5
# Warmup Iteration   1: 94,139 us/op
# Warmup Iteration   2: 93,962 us/op
# Warmup Iteration   3: 93,769 us/op
# Warmup Iteration   4: 93,722 us/op
# Warmup Iteration   5: 93,776 us/op
Iteration   1: 93,902 us/op
Iteration   2: 93,713 us/op
Iteration   3: 93,670 us/op
Iteration   4: 93,720 us/op
Iteration   5: 93,793 us/op

# Run progress: 92,50% complete, ETA 00:05:14
# Fork: 3 of 5
# Warmup Iteration   1: 93,370 us/op
# Warmup Iteration   2: 93,265 us/op
# Warmup Iteration   3: 93,191 us/op
# Warmup Iteration   4: 93,130 us/op
# Warmup Iteration   5: 93,092 us/op
Iteration   1: 93,205 us/op
Iteration   2: 93,288 us/op
Iteration   3: 93,203 us/op
Iteration   4: 93,065 us/op
Iteration   5: 93,209 us/op

# Run progress: 95,00% complete, ETA 00:03:29
# Fork: 4 of 5
# Warmup Iteration   1: 94,144 us/op
# Warmup Iteration   2: 93,837 us/op
# Warmup Iteration   3: 93,941 us/op
# Warmup Iteration   4: 93,814 us/op
# Warmup Iteration   5: 93,883 us/op
Iteration   1: 93,792 us/op
Iteration   2: 93,746 us/op
Iteration   3: 93,859 us/op
Iteration   4: 93,961 us/op
Iteration   5: 93,868 us/op

# Run progress: 97,50% complete, ETA 00:01:44
# Fork: 5 of 5
# Warmup Iteration   1: 93,325 us/op
# Warmup Iteration   2: 93,345 us/op
# Warmup Iteration   3: 93,235 us/op
# Warmup Iteration   4: 93,257 us/op
# Warmup Iteration   5: 93,235 us/op
Iteration   1: 93,271 us/op
Iteration   2: 93,261 us/op
Iteration   3: 93,183 us/op
Iteration   4: 93,226 us/op
Iteration   5: 93,225 us/op


Result "com.ionutbalosin.jvm.performance.benchmarks.macro.fibonacci.FibonacciBenchmark.recursive":
  93,444 Â±(99.9%) 0,230 us/op [Average]
  (min, avg, max) = (93,065, 93,444, 93,961), stdev = 0,307
  CI (99.9%): [93,214, 93,674] (assumes normal distribution)


# Run complete. Total time: 01:09:59

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                          (n)  Mode  Cnt       Score     Error  Units
FibonacciBenchmark.binet_formula   500  avgt   25   54613,396 Â± 555,955  us/op
FibonacciBenchmark.binet_formula  3000  avgt   25  820398,677 Â± 600,866  us/op
FibonacciBenchmark.dynamic         500  avgt   25      11,695 Â±   0,084  us/op
FibonacciBenchmark.dynamic        3000  avgt   25     100,909 Â±   0,178  us/op
FibonacciBenchmark.iterative       500  avgt   25       6,109 Â±   0,016  us/op
FibonacciBenchmark.iterative      3000  avgt   25      86,692 Â±   0,059  us/op
FibonacciBenchmark.recursive       500  avgt   25       9,405 Â±   0,120  us/op
FibonacciBenchmark.recursive      3000  avgt   25      93,444 Â±   0,230  us/op

Benchmark result is saved to results/jdk-17/arm64/openjdk-hotspot-vm/FibonacciBenchmark.csv

Running HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark benchmark ...
java  -jar benchmarks/target/benchmarks.jar .*HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.* -foe true -wi 5 -w 10 -i 5 -r 10 -f 5 -rf csv -rff results/jdk-17/arm64/openjdk-hotspot-vm/HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark_serialGC_1thread.csv -t 1 -prof gc -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseSerialGC"

# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc
# Parameters: (percentageOfRetainedHeap = P_25)

# Run progress: 0,00% complete, ETA 00:25:00
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
105593,615 ops/s
# Warmup Iteration   2: 113499,293 ops/s
# Warmup Iteration   3: 118916,554 ops/s
# Warmup Iteration   4: 109376,210 ops/s
# Warmup Iteration   5: 113119,806 ops/s
Iteration   1: 119093,473 ops/s
                 Â·gc.alloc.rate:      2067,061 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           27,000 counts
                 Â·gc.time:            8994,000 ms

Iteration   2: 109219,861 ops/s
                 Â·gc.alloc.rate:      1895,696 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9437,000 ms

Iteration   3: 119336,198 ops/s
                 Â·gc.alloc.rate:      2071,278 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           27,000 counts
                 Â·gc.time:            8987,000 ms

Iteration   4: 107757,182 ops/s
                 Â·gc.alloc.rate:      1870,304 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           29,000 counts
                 Â·gc.time:            9550,000 ms

Iteration   5: 114552,836 ops/s
                 Â·gc.alloc.rate:      1988,252 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9415,000 ms


# Run progress: 6,67% complete, ETA 00:24:15
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
105880,044 ops/s
# Warmup Iteration   2: 113739,096 ops/s
# Warmup Iteration   3: 114461,493 ops/s
# Warmup Iteration   4: 113290,148 ops/s
# Warmup Iteration   5: 114647,870 ops/s
Iteration   1: 113387,479 ops/s
                 Â·gc.alloc.rate:      1968,030 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           29,000 counts
                 Â·gc.time:            9519,000 ms

Iteration   2: 114484,155 ops/s
                 Â·gc.alloc.rate:      1987,068 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9414,000 ms

Iteration   3: 113342,038 ops/s
                 Â·gc.alloc.rate:      1967,239 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           29,000 counts
                 Â·gc.time:            9521,000 ms

Iteration   4: 114618,230 ops/s
                 Â·gc.alloc.rate:      1989,390 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9404,000 ms

Iteration   5: 113299,135 ops/s
                 Â·gc.alloc.rate:      1966,492 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           29,000 counts
                 Â·gc.time:            9528,000 ms


# Run progress: 13,33% complete, ETA 00:22:51
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
105755,681 ops/s
# Warmup Iteration   2: 113469,407 ops/s
# Warmup Iteration   3: 114467,847 ops/s
# Warmup Iteration   4: 113154,436 ops/s
# Warmup Iteration   5: 114524,125 ops/s
Iteration   1: 113231,684 ops/s
                 Â·gc.alloc.rate:      1965,326 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           29,000 counts
                 Â·gc.time:            9539,000 ms

Iteration   2: 119394,198 ops/s
                 Â·gc.alloc.rate:      2072,287 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           27,000 counts
                 Â·gc.time:            8990,000 ms

Iteration   3: 108992,084 ops/s
                 Â·gc.alloc.rate:      1891,734 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9434,000 ms

Iteration   4: 113243,865 ops/s
                 Â·gc.alloc.rate:      1965,535 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           29,000 counts
                 Â·gc.time:            9536,000 ms

Iteration   5: 114459,611 ops/s
                 Â·gc.alloc.rate:      1986,639 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9425,000 ms


# Run progress: 20,00% complete, ETA 00:21:13
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
105690,672 ops/s
# Warmup Iteration   2: 113531,057 ops/s
# Warmup Iteration   3: 118563,696 ops/s
# Warmup Iteration   4: 109509,734 ops/s
# Warmup Iteration   5: 119300,216 ops/s
Iteration   1: 107883,329 ops/s
                 Â·gc.alloc.rate:      1872,496 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           29,000 counts
                 Â·gc.time:            9544,000 ms

Iteration   2: 118706,935 ops/s
                 Â·gc.alloc.rate:      2060,358 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           27,000 counts
                 Â·gc.time:            9000,000 ms

Iteration   3: 109476,469 ops/s
                 Â·gc.alloc.rate:      1900,146 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9436,000 ms

Iteration   4: 118719,888 ops/s
                 Â·gc.alloc.rate:      2060,577 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           27,000 counts
                 Â·gc.time:            8996,000 ms

Iteration   5: 108156,853 ops/s
                 Â·gc.alloc.rate:      1877,237 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           29,000 counts
                 Â·gc.time:            9564,000 ms


# Run progress: 26,67% complete, ETA 00:19:26
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
105700,641 ops/s
# Warmup Iteration   2: 113566,218 ops/s
# Warmup Iteration   3: 114440,322 ops/s
# Warmup Iteration   4: 113292,863 ops/s
# Warmup Iteration   5: 114447,873 ops/s
Iteration   1: 113198,109 ops/s
                 Â·gc.alloc.rate:      1964,743 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           29,000 counts
                 Â·gc.time:            9537,000 ms

Iteration   2: 114508,558 ops/s
                 Â·gc.alloc.rate:      1987,491 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9414,000 ms

Iteration   3: 113281,920 ops/s
                 Â·gc.alloc.rate:      1966,195 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           29,000 counts
                 Â·gc.time:            9530,000 ms

Iteration   4: 114429,226 ops/s
                 Â·gc.alloc.rate:      1986,112 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9423,000 ms

Iteration   5: 113271,561 ops/s
                 Â·gc.alloc.rate:      1966,007 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           29,000 counts
                 Â·gc.time:            9534,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc":
  113601,795 Â±(99.9%) 2686,225 ops/s [Average]
  (min, avg, max) = (107757,182, 113601,795, 119394,198), stdev = 3586,034
  CI (99.9%): [110915,570, 116288,020] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate":
  1971,748 Â±(99.9%) 46,624 MB/sec [Average]
  (min, avg, max) = (1870,304, 1971,748, 2072,287), stdev = 62,242
  CI (99.9%): [1925,124, 2018,372] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm":
  18200,000 Â±(99.9%) 0,001 B/op [Average]
  (min, avg, max) = (18200,000, 18200,000, 18200,000), stdev = 0,001
  CI (99.9%): [18200,000, 18200,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.count":
  706,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (27,000, 28,240, 29,000), stdev = 0,779
  CI (99.9%): [706,000, 706,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.time":
  234671,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (8987,000, 9386,840, 9564,000), stdev = 207,641
  CI (99.9%): [234671,000, 234671,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc
# Parameters: (percentageOfRetainedHeap = P_50)

# Run progress: 33,33% complete, ETA 00:17:43
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
49503,023 ops/s
# Warmup Iteration   2: 60416,496 ops/s
# Warmup Iteration   3: 65411,073 ops/s
# Warmup Iteration   4: 84236,416 ops/s
# Warmup Iteration   5: 74519,592 ops/s
Iteration   1: 84120,036 ops/s
                 Â·gc.alloc.rate:      1460,040 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9745,000 ms

Iteration   2: 84050,627 ops/s
                 Â·gc.alloc.rate:      1458,832 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9749,000 ms

Iteration   3: 83923,389 ops/s
                 Â·gc.alloc.rate:      1456,628 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9762,000 ms

Iteration   4: 84110,270 ops/s
                 Â·gc.alloc.rate:      1459,870 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9744,000 ms

Iteration   5: 84178,938 ops/s
                 Â·gc.alloc.rate:      1461,061 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9745,000 ms


# Run progress: 40,00% complete, ETA 00:15:59
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
48855,616 ops/s
# Warmup Iteration   2: 60562,671 ops/s
# Warmup Iteration   3: 61086,488 ops/s
# Warmup Iteration   4: 83592,043 ops/s
# Warmup Iteration   5: 74170,856 ops/s
Iteration   1: 83742,667 ops/s
                 Â·gc.alloc.rate:      1453,491 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9764,000 ms

Iteration   2: 83842,301 ops/s
                 Â·gc.alloc.rate:      1455,224 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9751,000 ms

Iteration   3: 83649,311 ops/s
                 Â·gc.alloc.rate:      1451,869 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9775,000 ms

Iteration   4: 83741,356 ops/s
                 Â·gc.alloc.rate:      1453,470 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9763,000 ms

Iteration   5: 83525,962 ops/s
                 Â·gc.alloc.rate:      1449,727 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9794,000 ms


# Run progress: 46,67% complete, ETA 00:14:18
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
49380,192 ops/s
# Warmup Iteration   2: 59675,327 ops/s
# Warmup Iteration   3: 72763,275 ops/s
# Warmup Iteration   4: 76679,278 ops/s
# Warmup Iteration   5: 82330,418 ops/s
Iteration   1: 83863,463 ops/s
                 Â·gc.alloc.rate:      1455,591 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9751,000 ms

Iteration   2: 83781,068 ops/s
                 Â·gc.alloc.rate:      1454,160 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9760,000 ms

Iteration   3: 83650,717 ops/s
                 Â·gc.alloc.rate:      1451,892 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9782,000 ms

Iteration   4: 83661,796 ops/s
                 Â·gc.alloc.rate:      1452,086 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9781,000 ms

Iteration   5: 83882,406 ops/s
                 Â·gc.alloc.rate:      1455,916 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9750,000 ms


# Run progress: 53,33% complete, ETA 00:12:34
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
44207,079 ops/s
# Warmup Iteration   2: 61039,501 ops/s
# Warmup Iteration   3: 65078,223 ops/s
# Warmup Iteration   4: 83761,437 ops/s
# Warmup Iteration   5: 74134,151 ops/s
Iteration   1: 83803,327 ops/s
                 Â·gc.alloc.rate:      1454,547 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9758,000 ms

Iteration   2: 83950,148 ops/s
                 Â·gc.alloc.rate:      1457,092 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9740,000 ms

Iteration   3: 83766,412 ops/s
                 Â·gc.alloc.rate:      1453,900 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9768,000 ms

Iteration   4: 83941,196 ops/s
                 Â·gc.alloc.rate:      1456,942 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9742,000 ms

Iteration   5: 83759,921 ops/s
                 Â·gc.alloc.rate:      1453,788 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9765,000 ms


# Run progress: 60,00% complete, ETA 00:10:45
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
47858,820 ops/s
# Warmup Iteration   2: 59925,705 ops/s
# Warmup Iteration   3: 65266,859 ops/s
# Warmup Iteration   4: 83874,184 ops/s
# Warmup Iteration   5: 74364,415 ops/s
Iteration   1: 83807,392 ops/s
                 Â·gc.alloc.rate:      1454,613 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9758,000 ms

Iteration   2: 83840,829 ops/s
                 Â·gc.alloc.rate:      1455,198 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9749,000 ms

Iteration   3: 83715,953 ops/s
                 Â·gc.alloc.rate:      1453,030 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9766,000 ms

Iteration   4: 83711,139 ops/s
                 Â·gc.alloc.rate:      1452,942 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9770,000 ms

Iteration   5: 83888,876 ops/s
                 Â·gc.alloc.rate:      1456,027 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9745,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc":
  83836,380 Â±(99.9%) 120,001 ops/s [Average]
  (min, avg, max) = (83525,962, 83836,380, 84178,938), stdev = 160,198
  CI (99.9%): [83716,379, 83956,381] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate":
  1455,117 Â±(99.9%) 2,083 MB/sec [Average]
  (min, avg, max) = (1449,727, 1455,117, 1461,061), stdev = 2,781
  CI (99.9%): [1453,035, 1457,200] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm":
  18200,000 Â±(99.9%) 0,001 B/op [Average]
  (min, avg, max) = (18200,000, 18200,000, 18200,000), stdev = 0,001
  CI (99.9%): [18200,000, 18200,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.count":
  700,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (28,000, 28,000, 28,000), stdev = 0,001
  CI (99.9%): [700,000, 700,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.time":
  243977,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (9740,000, 9759,080, 9794,000), stdev = 14,003
  CI (99.9%): [243977,000, 243977,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc
# Parameters: (percentageOfRetainedHeap = P_75)

# Run progress: 66,67% complete, ETA 00:08:59
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
45569,921 ops/s
# Warmup Iteration   2: 58561,659 ops/s
# Warmup Iteration   3: 58734,701 ops/s
# Warmup Iteration   4: 58725,413 ops/s
# Warmup Iteration   5: 58363,405 ops/s
Iteration   1: 58463,273 ops/s
                 Â·gc.alloc.rate:      1014,725 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           10,000 counts
                 Â·gc.time:            9721,000 ms

Iteration   2: 58067,382 ops/s
                 Â·gc.alloc.rate:      1007,856 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           10,000 counts
                 Â·gc.time:            9794,000 ms

Iteration   3: 58186,376 ops/s
                 Â·gc.alloc.rate:      1009,921 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           10,000 counts
                 Â·gc.time:            9776,000 ms

Iteration   4: 58083,907 ops/s
                 Â·gc.alloc.rate:      1008,139 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           10,000 counts
                 Â·gc.time:            9793,000 ms

Iteration   5: 58073,910 ops/s
                 Â·gc.alloc.rate:      1007,964 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           10,000 counts
                 Â·gc.time:            9794,000 ms


# Run progress: 73,33% complete, ETA 00:07:14
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
44109,382 ops/s
# Warmup Iteration   2: 58154,607 ops/s
# Warmup Iteration   3: 58434,066 ops/s
# Warmup Iteration   4: 58667,933 ops/s
# Warmup Iteration   5: 58504,407 ops/s
Iteration   1: 58327,441 ops/s
                 Â·gc.alloc.rate:      1012,368 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           10,000 counts
                 Â·gc.time:            9744,000 ms

Iteration   2: 58330,063 ops/s
                 Â·gc.alloc.rate:      1012,419 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           10,000 counts
                 Â·gc.time:            9743,000 ms

Iteration   3: 58173,767 ops/s
                 Â·gc.alloc.rate:      1009,701 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           10,000 counts
                 Â·gc.time:            9774,000 ms

Iteration   4: 57960,754 ops/s
                 Â·gc.alloc.rate:      1006,004 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           10,000 counts
                 Â·gc.time:            9814,000 ms

Iteration   5: 58072,617 ops/s
                 Â·gc.alloc.rate:      1007,946 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           10,000 counts
                 Â·gc.time:            9788,000 ms


# Run progress: 80,00% complete, ETA 00:05:27
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
43392,683 ops/s
# Warmup Iteration   2: 58412,991 ops/s
# Warmup Iteration   3: 58425,826 ops/s
# Warmup Iteration   4: 58419,378 ops/s
# Warmup Iteration   5: 58357,948 ops/s
Iteration   1: 58474,548 ops/s
                 Â·gc.alloc.rate:      1014,921 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           10,000 counts
                 Â·gc.time:            9698,000 ms

Iteration   2: 57959,811 ops/s
                 Â·gc.alloc.rate:      1005,987 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           10,000 counts
                 Â·gc.time:            9797,000 ms

Iteration   3: 57968,373 ops/s
                 Â·gc.alloc.rate:      1006,136 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           10,000 counts
                 Â·gc.time:            9790,000 ms

Iteration   4: 57798,595 ops/s
                 Â·gc.alloc.rate:      1003,189 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           10,000 counts
                 Â·gc.time:            9823,000 ms

Iteration   5: 57761,827 ops/s
                 Â·gc.alloc.rate:      1002,547 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           10,000 counts
                 Â·gc.time:            9828,000 ms


# Run progress: 86,67% complete, ETA 00:03:38
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
43476,387 ops/s
# Warmup Iteration   2: 58633,627 ops/s
# Warmup Iteration   3: 58603,617 ops/s
# Warmup Iteration   4: 58760,999 ops/s
# Warmup Iteration   5: 58312,410 ops/s
Iteration   1: 58313,536 ops/s
                 Â·gc.alloc.rate:      1012,126 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           10,000 counts
                 Â·gc.time:            9750,000 ms

Iteration   2: 58212,525 ops/s
                 Â·gc.alloc.rate:      1010,376 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           10,000 counts
                 Â·gc.time:            9766,000 ms

Iteration   3: 58220,282 ops/s
                 Â·gc.alloc.rate:      1010,508 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           10,000 counts
                 Â·gc.time:            9763,000 ms

Iteration   4: 58063,057 ops/s
                 Â·gc.alloc.rate:      1007,782 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           10,000 counts
                 Â·gc.time:            9795,000 ms

Iteration   5: 57942,961 ops/s
                 Â·gc.alloc.rate:      1005,696 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           10,000 counts
                 Â·gc.time:            9818,000 ms


# Run progress: 93,33% complete, ETA 00:01:49
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
46643,644 ops/s
# Warmup Iteration   2: 58626,381 ops/s
# Warmup Iteration   3: 58545,430 ops/s
# Warmup Iteration   4: 58489,780 ops/s
# Warmup Iteration   5: 58520,222 ops/s
Iteration   1: 58504,533 ops/s
                 Â·gc.alloc.rate:      1015,442 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           10,000 counts
                 Â·gc.time:            9713,000 ms

Iteration   2: 58275,633 ops/s
                 Â·gc.alloc.rate:      1011,465 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           10,000 counts
                 Â·gc.time:            9756,000 ms

Iteration   3: 58137,281 ops/s
                 Â·gc.alloc.rate:      1009,070 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           10,000 counts
                 Â·gc.time:            9780,000 ms

Iteration   4: 58156,111 ops/s
                 Â·gc.alloc.rate:      1009,398 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           10,000 counts
                 Â·gc.time:            9777,000 ms

Iteration   5: 58010,461 ops/s
                 Â·gc.alloc.rate:      1006,868 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           10,000 counts
                 Â·gc.time:            9805,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc":
  58141,561 Â±(99.9%) 146,403 ops/s [Average]
  (min, avg, max) = (57761,827, 58141,561, 58504,533), stdev = 195,444
  CI (99.9%): [57995,158, 58287,964] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate":
  1009,142 Â±(99.9%) 2,541 MB/sec [Average]
  (min, avg, max) = (1002,547, 1009,142, 1015,442), stdev = 3,392
  CI (99.9%): [1006,601, 1011,683] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm":
  18200,001 Â±(99.9%) 0,001 B/op [Average]
  (min, avg, max) = (18200,001, 18200,001, 18200,001), stdev = 0,001
  CI (99.9%): [18200,001, 18200,001] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.count":
  250,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (10,000, 10,000, 10,000), stdev = 0,001
  CI (99.9%): [250,000, 250,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.time":
  244400,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (9698,000, 9776,000, 9828,000), stdev = 33,910
  CI (99.9%): [244400,000, 244400,000] (assumes normal distribution)


# Run complete. Total time: 00:27:32

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                                     (percentageOfRetainedHeap)   Mode  Cnt       Score      Error   Units
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc                                            P_25  thrpt   25  113601,795 Â± 2686,225   ops/s
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate                             P_25  thrpt   25    1971,748 Â±   46,624  MB/sec
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm                        P_25  thrpt   25   18200,000 Â±    0,001    B/op
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.count                                  P_25  thrpt   25     706,000             counts
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.time                                   P_25  thrpt   25  234671,000                 ms
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc                                            P_50  thrpt   25   83836,380 Â±  120,001   ops/s
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate                             P_50  thrpt   25    1455,117 Â±    2,083  MB/sec
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm                        P_50  thrpt   25   18200,000 Â±    0,001    B/op
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.count                                  P_50  thrpt   25     700,000             counts
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.time                                   P_50  thrpt   25  243977,000                 ms
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc                                            P_75  thrpt   25   58141,561 Â±  146,403   ops/s
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate                             P_75  thrpt   25    1009,142 Â±    2,541  MB/sec
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm                        P_75  thrpt   25   18200,001 Â±    0,001    B/op
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.count                                  P_75  thrpt   25     250,000             counts
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.time                                   P_75  thrpt   25  244400,000                 ms

Benchmark result is saved to results/jdk-17/arm64/openjdk-hotspot-vm/HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark_serialGC_1thread.csv

Running HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark benchmark ...
java  -jar benchmarks/target/benchmarks.jar .*HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.* -foe true -wi 5 -w 10 -i 5 -r 10 -f 5 -rf csv -rff results/jdk-17/arm64/openjdk-hotspot-vm/HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark_serialGC_2threads.csv -t 2 -prof gc -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseSerialGC"

# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc
# Parameters: (percentageOfRetainedHeap = P_25)

# Run progress: 0,00% complete, ETA 00:25:00
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
109068,399 ops/s
# Warmup Iteration   2: 118543,312 ops/s
# Warmup Iteration   3: 117392,770 ops/s
# Warmup Iteration   4: 118718,946 ops/s
# Warmup Iteration   5: 117432,094 ops/s
Iteration   1: 118688,308 ops/s
                 Â·gc.alloc.rate:      2060,069 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9450,000 ms

Iteration   2: 117363,451 ops/s
                 Â·gc.alloc.rate:      2037,063 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           29,000 counts
                 Â·gc.time:            9563,000 ms

Iteration   3: 118803,943 ops/s
                 Â·gc.alloc.rate:      2062,044 MB/sec
                 Â·gc.alloc.rate.norm: 18200,010 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9445,000 ms

Iteration   4: 117324,022 ops/s
                 Â·gc.alloc.rate:      2036,372 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           29,000 counts
                 Â·gc.time:            9566,000 ms

Iteration   5: 118627,877 ops/s
                 Â·gc.alloc.rate:      2058,678 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9455,000 ms


# Run progress: 6,67% complete, ETA 00:25:00
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
108876,817 ops/s
# Warmup Iteration   2: 118533,506 ops/s
# Warmup Iteration   3: 117160,676 ops/s
# Warmup Iteration   4: 118631,624 ops/s
# Warmup Iteration   5: 117125,541 ops/s
Iteration   1: 118460,099 ops/s
                 Â·gc.alloc.rate:      2056,211 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9476,000 ms

Iteration   2: 116965,015 ops/s
                 Â·gc.alloc.rate:      2030,154 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           29,000 counts
                 Â·gc.time:            9597,000 ms

Iteration   3: 118574,580 ops/s
                 Â·gc.alloc.rate:      2058,088 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9460,000 ms

Iteration   4: 117243,953 ops/s
                 Â·gc.alloc.rate:      2034,930 MB/sec
                 Â·gc.alloc.rate.norm: 18200,010 B/op
                 Â·gc.count:           29,000 counts
                 Â·gc.time:            9576,000 ms

Iteration   5: 118464,973 ops/s
                 Â·gc.alloc.rate:      2056,164 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9475,000 ms


# Run progress: 13,33% complete, ETA 00:23:14
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
109230,377 ops/s
# Warmup Iteration   2: 118662,577 ops/s
# Warmup Iteration   3: 117605,958 ops/s
# Warmup Iteration   4: 118775,215 ops/s
# Warmup Iteration   5: 117420,117 ops/s
Iteration   1: 118786,077 ops/s
                 Â·gc.alloc.rate:      2061,775 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9440,000 ms

Iteration   2: 117528,217 ops/s
                 Â·gc.alloc.rate:      2039,971 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           29,000 counts
                 Â·gc.time:            9554,000 ms

Iteration   3: 118846,720 ops/s
                 Â·gc.alloc.rate:      2062,805 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9437,000 ms

Iteration   4: 117390,545 ops/s
                 Â·gc.alloc.rate:      2037,498 MB/sec
                 Â·gc.alloc.rate.norm: 18200,010 B/op
                 Â·gc.count:           29,000 counts
                 Â·gc.time:            9560,000 ms

Iteration   5: 118870,129 ops/s
                 Â·gc.alloc.rate:      2063,194 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9434,000 ms


# Run progress: 20,00% complete, ETA 00:21:13
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
108938,587 ops/s
# Warmup Iteration   2: 118538,565 ops/s
# Warmup Iteration   3: 117236,093 ops/s
# Warmup Iteration   4: 118619,430 ops/s
# Warmup Iteration   5: 117394,192 ops/s
Iteration   1: 118524,158 ops/s
                 Â·gc.alloc.rate:      2058,235 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9460,000 ms

Iteration   2: 117161,450 ops/s
                 Â·gc.alloc.rate:      2033,556 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           29,000 counts
                 Â·gc.time:            9574,000 ms

Iteration   3: 118758,436 ops/s
                 Â·gc.alloc.rate:      2061,266 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9446,000 ms

Iteration   4: 117366,179 ops/s
                 Â·gc.alloc.rate:      2037,057 MB/sec
                 Â·gc.alloc.rate.norm: 18200,010 B/op
                 Â·gc.count:           29,000 counts
                 Â·gc.time:            9570,000 ms

Iteration   5: 118693,957 ops/s
                 Â·gc.alloc.rate:      2060,171 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9450,000 ms


# Run progress: 26,67% complete, ETA 00:19:18
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
109333,902 ops/s
# Warmup Iteration   2: 118833,947 ops/s
# Warmup Iteration   3: 117606,635 ops/s
# Warmup Iteration   4: 118848,017 ops/s
# Warmup Iteration   5: 117484,736 ops/s
Iteration   1: 118867,162 ops/s
                 Â·gc.alloc.rate:      2063,183 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9435,000 ms

Iteration   2: 117527,588 ops/s
                 Â·gc.alloc.rate:      2039,917 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           29,000 counts
                 Â·gc.time:            9549,000 ms

Iteration   3: 118921,623 ops/s
                 Â·gc.alloc.rate:      2064,142 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9435,000 ms

Iteration   4: 117495,276 ops/s
                 Â·gc.alloc.rate:      2039,290 MB/sec
                 Â·gc.alloc.rate.norm: 18200,010 B/op
                 Â·gc.count:           29,000 counts
                 Â·gc.time:            9549,000 ms

Iteration   5: 119028,927 ops/s
                 Â·gc.alloc.rate:      2065,957 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9418,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc":
  118171,307 Â±(99.9%) 536,348 ops/s [Average]
  (min, avg, max) = (116965,015, 118171,307, 119028,927), stdev = 716,009
  CI (99.9%): [117634,959, 118707,654] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate":
  2051,112 Â±(99.9%) 9,328 MB/sec [Average]
  (min, avg, max) = (2030,154, 2051,112, 2065,957), stdev = 12,452
  CI (99.9%): [2041,784, 2060,439] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm":
  18200,003 Â±(99.9%) 0,003 B/op [Average]
  (min, avg, max) = (18200,001, 18200,003, 18200,010), stdev = 0,004
  CI (99.9%): [18200,000, 18200,005] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.count":
  710,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (28,000, 28,400, 29,000), stdev = 0,500
  CI (99.9%): [710,000, 710,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.time":
  237374,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (9418,000, 9494,960, 9597,000), stdev = 60,908
  CI (99.9%): [237374,000, 237374,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc
# Parameters: (percentageOfRetainedHeap = P_50)

# Run progress: 33,33% complete, ETA 00:17:27
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
47444,239 ops/s
# Warmup Iteration   2: 62292,112 ops/s
# Warmup Iteration   3: 65727,366 ops/s
# Warmup Iteration   4: 85729,112 ops/s
# Warmup Iteration   5: 75141,513 ops/s
Iteration   1: 85613,147 ops/s
                 Â·gc.alloc.rate:      1485,989 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9825,000 ms

Iteration   2: 85720,222 ops/s
                 Â·gc.alloc.rate:      1487,837 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9815,000 ms

Iteration   3: 85448,809 ops/s
                 Â·gc.alloc.rate:      1483,089 MB/sec
                 Â·gc.alloc.rate.norm: 18200,013 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9844,000 ms

Iteration   4: 85695,750 ops/s
                 Â·gc.alloc.rate:      1487,441 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9815,000 ms

Iteration   5: 85837,520 ops/s
                 Â·gc.alloc.rate:      1489,879 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9805,000 ms


# Run progress: 40,00% complete, ETA 00:15:42
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
48393,690 ops/s
# Warmup Iteration   2: 62359,546 ops/s
# Warmup Iteration   3: 63056,488 ops/s
# Warmup Iteration   4: 85602,544 ops/s
# Warmup Iteration   5: 71287,544 ops/s
Iteration   1: 85505,664 ops/s
                 Â·gc.alloc.rate:      1484,125 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9830,000 ms

Iteration   2: 85462,277 ops/s
                 Â·gc.alloc.rate:      1483,360 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9838,000 ms

Iteration   3: 85745,146 ops/s
                 Â·gc.alloc.rate:      1488,254 MB/sec
                 Â·gc.alloc.rate.norm: 18200,013 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9812,000 ms

Iteration   4: 85505,111 ops/s
                 Â·gc.alloc.rate:      1484,124 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9828,000 ms

Iteration   5: 85484,646 ops/s
                 Â·gc.alloc.rate:      1483,759 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9847,000 ms


# Run progress: 46,67% complete, ETA 00:13:59
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
46783,728 ops/s
# Warmup Iteration   2: 59639,448 ops/s
# Warmup Iteration   3: 65539,474 ops/s
# Warmup Iteration   4: 85949,308 ops/s
# Warmup Iteration   5: 77309,432 ops/s
Iteration   1: 83897,948 ops/s
                 Â·gc.alloc.rate:      1456,220 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9795,000 ms

Iteration   2: 85588,126 ops/s
                 Â·gc.alloc.rate:      1485,532 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9823,000 ms

Iteration   3: 85754,783 ops/s
                 Â·gc.alloc.rate:      1488,425 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9809,000 ms

Iteration   4: 85513,703 ops/s
                 Â·gc.alloc.rate:      1484,211 MB/sec
                 Â·gc.alloc.rate.norm: 18200,013 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9831,000 ms

Iteration   5: 84650,307 ops/s
                 Â·gc.alloc.rate:      1469,064 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9945,000 ms


# Run progress: 53,33% complete, ETA 00:12:14
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
48873,946 ops/s
# Warmup Iteration   2: 58444,961 ops/s
# Warmup Iteration   3: 72481,888 ops/s
# Warmup Iteration   4: 85061,342 ops/s
# Warmup Iteration   5: 70593,709 ops/s
Iteration   1: 85671,403 ops/s
                 Â·gc.alloc.rate:      1487,002 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9814,000 ms

Iteration   2: 85587,793 ops/s
                 Â·gc.alloc.rate:      1485,548 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9825,000 ms

Iteration   3: 85781,993 ops/s
                 Â·gc.alloc.rate:      1488,929 MB/sec
                 Â·gc.alloc.rate.norm: 18200,013 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9800,000 ms

Iteration   4: 85540,453 ops/s
                 Â·gc.alloc.rate:      1484,738 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9832,000 ms

Iteration   5: 85539,334 ops/s
                 Â·gc.alloc.rate:      1484,687 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9834,000 ms


# Run progress: 60,00% complete, ETA 00:10:31
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
43752,448 ops/s
# Warmup Iteration   2: 61043,139 ops/s
# Warmup Iteration   3: 62593,729 ops/s
# Warmup Iteration   4: 81259,424 ops/s
# Warmup Iteration   5: 72630,546 ops/s
Iteration   1: 85528,120 ops/s
                 Â·gc.alloc.rate:      1484,528 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9831,000 ms

Iteration   2: 85538,534 ops/s
                 Â·gc.alloc.rate:      1484,716 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9834,000 ms

Iteration   3: 85467,534 ops/s
                 Â·gc.alloc.rate:      1483,470 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9847,000 ms

Iteration   4: 85506,267 ops/s
                 Â·gc.alloc.rate:      1484,091 MB/sec
                 Â·gc.alloc.rate.norm: 18200,013 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9843,000 ms

Iteration   5: 85767,877 ops/s
                 Â·gc.alloc.rate:      1488,652 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            9801,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc":
  85494,099 Â±(99.9%) 299,376 ops/s [Average]
  (min, avg, max) = (83897,948, 85494,099, 85837,520), stdev = 399,658
  CI (99.9%): [85194,723, 85793,474] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate":
  1483,907 Â±(99.9%) 5,209 MB/sec [Average]
  (min, avg, max) = (1456,220, 1483,907, 1489,879), stdev = 6,954
  CI (99.9%): [1478,698, 1489,116] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm":
  18200,004 Â±(99.9%) 0,004 B/op [Average]
  (min, avg, max) = (18200,001, 18200,004, 18200,013), stdev = 0,005
  CI (99.9%): [18200,000, 18200,007] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.count":
  700,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (28,000, 28,000, 28,000), stdev = 0,001
  CI (99.9%): [700,000, 700,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.time":
  245723,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (9795,000, 9828,920, 9945,000), stdev = 28,435
  CI (99.9%): [245723,000, 245723,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc
# Parameters: (percentageOfRetainedHeap = P_75)

# Run progress: 66,67% complete, ETA 00:08:47
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
41701,206 ops/s
# Warmup Iteration   2: 55127,784 ops/s
# Warmup Iteration   3: 55048,886 ops/s
# Warmup Iteration   4: 55075,747 ops/s
# Warmup Iteration   5: 55104,436 ops/s
Iteration   1: 55083,650 ops/s
                 Â·gc.alloc.rate:      956,128 MB/sec
                 Â·gc.alloc.rate.norm: 18200,002 B/op
                 Â·gc.count:           9,000 counts
                 Â·gc.time:            8855,000 ms

Iteration   2: 55131,945 ops/s
                 Â·gc.alloc.rate:      956,933 MB/sec
                 Â·gc.alloc.rate.norm: 18200,002 B/op
                 Â·gc.count:           9,000 counts
                 Â·gc.time:            8852,000 ms

Iteration   3: 55217,639 ops/s
                 Â·gc.alloc.rate:      958,448 MB/sec
                 Â·gc.alloc.rate.norm: 18200,002 B/op
                 Â·gc.count:           9,000 counts
                 Â·gc.time:            8835,000 ms

Iteration   4: 55361,053 ops/s
                 Â·gc.alloc.rate:      960,871 MB/sec
                 Â·gc.alloc.rate.norm: 18200,021 B/op
                 Â·gc.count:           9,000 counts
                 Â·gc.time:            8811,000 ms

Iteration   5: 55150,299 ops/s
                 Â·gc.alloc.rate:      957,287 MB/sec
                 Â·gc.alloc.rate.norm: 18200,002 B/op
                 Â·gc.count:           9,000 counts
                 Â·gc.time:            8834,000 ms


# Run progress: 73,33% complete, ETA 00:07:03
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
41521,740 ops/s
# Warmup Iteration   2: 53754,783 ops/s
# Warmup Iteration   3: 53520,157 ops/s
# Warmup Iteration   4: 53350,042 ops/s
# Warmup Iteration   5: 53608,455 ops/s
Iteration   1: 53575,445 ops/s
                 Â·gc.alloc.rate:      929,957 MB/sec
                 Â·gc.alloc.rate.norm: 18200,002 B/op
                 Â·gc.count:           9,000 counts
                 Â·gc.time:            8962,000 ms

Iteration   2: 53514,010 ops/s
                 Â·gc.alloc.rate:      928,827 MB/sec
                 Â·gc.alloc.rate.norm: 18200,002 B/op
                 Â·gc.count:           9,000 counts
                 Â·gc.time:            8969,000 ms

Iteration   3: 53646,174 ops/s
                 Â·gc.alloc.rate:      931,143 MB/sec
                 Â·gc.alloc.rate.norm: 18200,002 B/op
                 Â·gc.count:           9,000 counts
                 Â·gc.time:            8946,000 ms

Iteration   4: 53715,636 ops/s
                 Â·gc.alloc.rate:      932,320 MB/sec
                 Â·gc.alloc.rate.norm: 18200,021 B/op
                 Â·gc.count:           9,000 counts
                 Â·gc.time:            8935,000 ms

Iteration   5: 53789,016 ops/s
                 Â·gc.alloc.rate:      933,622 MB/sec
                 Â·gc.alloc.rate.norm: 18200,002 B/op
                 Â·gc.count:           9,000 counts
                 Â·gc.time:            8916,000 ms


# Run progress: 80,00% complete, ETA 00:05:19
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
41278,689 ops/s
# Warmup Iteration   2: 53830,187 ops/s
# Warmup Iteration   3: 53760,426 ops/s
# Warmup Iteration   4: 53679,595 ops/s
# Warmup Iteration   5: 53702,451 ops/s
Iteration   1: 53634,945 ops/s
                 Â·gc.alloc.rate:      930,959 MB/sec
                 Â·gc.alloc.rate.norm: 18200,002 B/op
                 Â·gc.count:           9,000 counts
                 Â·gc.time:            8980,000 ms

Iteration   2: 53704,414 ops/s
                 Â·gc.alloc.rate:      932,184 MB/sec
                 Â·gc.alloc.rate.norm: 18200,002 B/op
                 Â·gc.count:           9,000 counts
                 Â·gc.time:            8974,000 ms

Iteration   3: 53985,011 ops/s
                 Â·gc.alloc.rate:      937,066 MB/sec
                 Â·gc.alloc.rate.norm: 18200,021 B/op
                 Â·gc.count:           9,000 counts
                 Â·gc.time:            8934,000 ms

Iteration   4: 53845,558 ops/s
                 Â·gc.alloc.rate:      934,625 MB/sec
                 Â·gc.alloc.rate.norm: 18200,002 B/op
                 Â·gc.count:           9,000 counts
                 Â·gc.time:            8962,000 ms

Iteration   5: 53912,127 ops/s
                 Â·gc.alloc.rate:      935,684 MB/sec
                 Â·gc.alloc.rate.norm: 18200,002 B/op
                 Â·gc.count:           9,000 counts
                 Â·gc.time:            8934,000 ms


# Run progress: 86,67% complete, ETA 00:03:33
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
40936,729 ops/s
# Warmup Iteration   2: 53626,296 ops/s
# Warmup Iteration   3: 53529,028 ops/s
# Warmup Iteration   4: 50240,453 ops/s
# Warmup Iteration   5: 53555,294 ops/s
Iteration   1: 53661,959 ops/s
                 Â·gc.alloc.rate:      931,419 MB/sec
                 Â·gc.alloc.rate.norm: 18200,002 B/op
                 Â·gc.count:           9,000 counts
                 Â·gc.time:            8960,000 ms

Iteration   2: 53727,047 ops/s
                 Â·gc.alloc.rate:      932,574 MB/sec
                 Â·gc.alloc.rate.norm: 18200,002 B/op
                 Â·gc.count:           9,000 counts
                 Â·gc.time:            8941,000 ms

Iteration   3: 53777,899 ops/s
                 Â·gc.alloc.rate:      933,432 MB/sec
                 Â·gc.alloc.rate.norm: 18200,021 B/op
                 Â·gc.count:           9,000 counts
                 Â·gc.time:            8949,000 ms

Iteration   4: 53704,138 ops/s
                 Â·gc.alloc.rate:      932,124 MB/sec
                 Â·gc.alloc.rate.norm: 18200,002 B/op
                 Â·gc.count:           9,000 counts
                 Â·gc.time:            8943,000 ms

Iteration   5: 53839,210 ops/s
                 Â·gc.alloc.rate:      934,397 MB/sec
                 Â·gc.alloc.rate.norm: 18200,002 B/op
                 Â·gc.count:           9,000 counts
                 Â·gc.time:            8920,000 ms


# Run progress: 93,33% complete, ETA 00:01:47
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
41761,245 ops/s
# Warmup Iteration   2: 53512,350 ops/s
# Warmup Iteration   3: 53585,035 ops/s
# Warmup Iteration   4: 53297,502 ops/s
# Warmup Iteration   5: 53438,609 ops/s
Iteration   1: 53650,035 ops/s
                 Â·gc.alloc.rate:      931,267 MB/sec
                 Â·gc.alloc.rate.norm: 18200,002 B/op
                 Â·gc.count:           9,000 counts
                 Â·gc.time:            8943,000 ms

Iteration   2: 53436,407 ops/s
                 Â·gc.alloc.rate:      927,547 MB/sec
                 Â·gc.alloc.rate.norm: 18200,002 B/op
                 Â·gc.count:           9,000 counts
                 Â·gc.time:            8976,000 ms

Iteration   3: 53536,257 ops/s
                 Â·gc.alloc.rate:      929,221 MB/sec
                 Â·gc.alloc.rate.norm: 18200,021 B/op
                 Â·gc.count:           9,000 counts
                 Â·gc.time:            8963,000 ms

Iteration   4: 53639,115 ops/s
                 Â·gc.alloc.rate:      931,064 MB/sec
                 Â·gc.alloc.rate.norm: 18200,002 B/op
                 Â·gc.count:           9,000 counts
                 Â·gc.time:            8946,000 ms

Iteration   5: 53687,151 ops/s
                 Â·gc.alloc.rate:      931,856 MB/sec
                 Â·gc.alloc.rate.norm: 18200,002 B/op
                 Â·gc.count:           9,000 counts
                 Â·gc.time:            8937,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc":
  53997,046 Â±(99.9%) 465,493 ops/s [Average]
  (min, avg, max) = (53436,407, 53997,046, 55361,053), stdev = 621,419
  CI (99.9%): [53531,553, 54462,538] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate":
  937,238 Â±(99.9%) 8,080 MB/sec [Average]
  (min, avg, max) = (927,547, 937,238, 960,871), stdev = 10,787
  CI (99.9%): [929,158, 945,319] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm":
  18200,006 Â±(99.9%) 0,006 B/op [Average]
  (min, avg, max) = (18200,002, 18200,006, 18200,021), stdev = 0,008
  CI (99.9%): [18200,000, 18200,011] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.count":
  225,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (9,000, 9,000, 9,000), stdev = 0,001
  CI (99.9%): [225,000, 225,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.time":
  223177,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (8811,000, 8927,080, 8980,000), stdev = 49,050
  CI (99.9%): [223177,000, 223177,000] (assumes normal distribution)


# Run complete. Total time: 00:26:56

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                                     (percentageOfRetainedHeap)   Mode  Cnt       Score     Error   Units
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc                                            P_25  thrpt   25  118171,307 Â± 536,348   ops/s
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate                             P_25  thrpt   25    2051,112 Â±   9,328  MB/sec
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm                        P_25  thrpt   25   18200,003 Â±   0,003    B/op
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.count                                  P_25  thrpt   25     710,000            counts
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.time                                   P_25  thrpt   25  237374,000                ms
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc                                            P_50  thrpt   25   85494,099 Â± 299,376   ops/s
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate                             P_50  thrpt   25    1483,907 Â±   5,209  MB/sec
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm                        P_50  thrpt   25   18200,004 Â±   0,004    B/op
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.count                                  P_50  thrpt   25     700,000            counts
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.time                                   P_50  thrpt   25  245723,000                ms
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc                                            P_75  thrpt   25   53997,046 Â± 465,493   ops/s
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate                             P_75  thrpt   25     937,238 Â±   8,080  MB/sec
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm                        P_75  thrpt   25   18200,006 Â±   0,006    B/op
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.count                                  P_75  thrpt   25     225,000            counts
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.time                                   P_75  thrpt   25  223177,000                ms

Benchmark result is saved to results/jdk-17/arm64/openjdk-hotspot-vm/HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark_serialGC_2threads.csv

Running HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark benchmark ...
java  -jar benchmarks/target/benchmarks.jar .*HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.* -foe true -wi 5 -w 10 -i 5 -r 10 -f 5 -rf csv -rff results/jdk-17/arm64/openjdk-hotspot-vm/HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark_parallelGC_1thread.csv -t 1 -prof gc -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseParallelGC"

# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc
# Parameters: (percentageOfRetainedHeap = P_25)

# Run progress: 0,00% complete, ETA 00:25:00
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
303448,706 ops/s
# Warmup Iteration   2: 284633,643 ops/s
# Warmup Iteration   3: 296338,895 ops/s
# Warmup Iteration   4: 297701,260 ops/s
# Warmup Iteration   5: 297026,735 ops/s
Iteration   1: 297869,761 ops/s
                 Â·gc.alloc.rate:      5170,033 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           152,000 counts
                 Â·gc.time:            7421,000 ms

Iteration   2: 280106,396 ops/s
                 Â·gc.alloc.rate:      4861,716 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           142,000 counts
                 Â·gc.time:            7466,000 ms

Iteration   3: 295865,884 ops/s
                 Â·gc.alloc.rate:      5135,250 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           151,000 counts
                 Â·gc.time:            7413,000 ms

Iteration   4: 298264,496 ops/s
                 Â·gc.alloc.rate:      5176,884 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           152,000 counts
                 Â·gc.time:            7400,000 ms

Iteration   5: 295954,273 ops/s
                 Â·gc.alloc.rate:      5136,773 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           151,000 counts
                 Â·gc.time:            7406,000 ms


# Run progress: 6,67% complete, ETA 00:24:46
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
303296,832 ops/s
# Warmup Iteration   2: 303147,190 ops/s
# Warmup Iteration   3: 293947,263 ops/s
# Warmup Iteration   4: 298596,209 ops/s
# Warmup Iteration   5: 297097,345 ops/s
Iteration   1: 297110,385 ops/s
                 Â·gc.alloc.rate:      5156,859 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           152,000 counts
                 Â·gc.time:            7444,000 ms

Iteration   2: 297031,606 ops/s
                 Â·gc.alloc.rate:      5155,487 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           152,000 counts
                 Â·gc.time:            7429,000 ms

Iteration   3: 297993,510 ops/s
                 Â·gc.alloc.rate:      5172,185 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           152,000 counts
                 Â·gc.time:            7408,000 ms

Iteration   4: 297616,636 ops/s
                 Â·gc.alloc.rate:      5165,631 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           152,000 counts
                 Â·gc.time:            7416,000 ms

Iteration   5: 296875,858 ops/s
                 Â·gc.alloc.rate:      5152,771 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           152,000 counts
                 Â·gc.time:            7456,000 ms


# Run progress: 13,33% complete, ETA 00:23:01
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
303482,315 ops/s
# Warmup Iteration   2: 298398,626 ops/s
# Warmup Iteration   3: 296539,055 ops/s
# Warmup Iteration   4: 297056,742 ops/s
# Warmup Iteration   5: 296083,013 ops/s
Iteration   1: 297296,518 ops/s
                 Â·gc.alloc.rate:      5160,086 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           152,000 counts
                 Â·gc.time:            7432,000 ms

Iteration   2: 298200,551 ops/s
                 Â·gc.alloc.rate:      5175,776 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           152,000 counts
                 Â·gc.time:            7378,000 ms

Iteration   3: 294831,940 ops/s
                 Â·gc.alloc.rate:      5117,304 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           150,000 counts
                 Â·gc.time:            7345,000 ms

Iteration   4: 290595,933 ops/s
                 Â·gc.alloc.rate:      5043,780 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           150,000 counts
                 Â·gc.time:            7419,000 ms

Iteration   5: 290419,267 ops/s
                 Â·gc.alloc.rate:      5040,702 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           148,000 counts
                 Â·gc.time:            7345,000 ms


# Run progress: 20,00% complete, ETA 00:21:08
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
305604,425 ops/s
# Warmup Iteration   2: 299219,912 ops/s
# Warmup Iteration   3: 273146,118 ops/s
# Warmup Iteration   4: 290404,320 ops/s
# Warmup Iteration   5: 279956,536 ops/s
Iteration   1: 279849,693 ops/s
                 Â·gc.alloc.rate:      4857,260 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           143,000 counts
                 Â·gc.time:            7371,000 ms

Iteration   2: 279131,533 ops/s
                 Â·gc.alloc.rate:      4844,790 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           143,000 counts
                 Â·gc.time:            7393,000 ms

Iteration   3: 279429,085 ops/s
                 Â·gc.alloc.rate:      4849,952 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           144,000 counts
                 Â·gc.time:            7445,000 ms

Iteration   4: 280421,788 ops/s
                 Â·gc.alloc.rate:      4867,181 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           144,000 counts
                 Â·gc.time:            7415,000 ms

Iteration   5: 279387,143 ops/s
                 Â·gc.alloc.rate:      4849,214 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           144,000 counts
                 Â·gc.time:            7449,000 ms


# Run progress: 26,67% complete, ETA 00:19:17
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
302936,377 ops/s
# Warmup Iteration   2: 273749,188 ops/s
# Warmup Iteration   3: 278446,444 ops/s
# Warmup Iteration   4: 269292,222 ops/s
# Warmup Iteration   5: 264961,481 ops/s
Iteration   1: 258983,513 ops/s
                 Â·gc.alloc.rate:      4495,089 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           132,000 counts
                 Â·gc.time:            7365,000 ms

Iteration   2: 250213,151 ops/s
                 Â·gc.alloc.rate:      4342,859 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           128,000 counts
                 Â·gc.time:            7382,000 ms

Iteration   3: 211068,031 ops/s
                 Â·gc.alloc.rate:      3663,422 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           106,000 counts
                 Â·gc.time:            7265,000 ms

Iteration   4: 179767,356 ops/s
                 Â·gc.alloc.rate:      3120,134 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           92,000 counts
                 Â·gc.time:            7284,000 ms

Iteration   5: 174079,719 ops/s
                 Â·gc.alloc.rate:      3021,402 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           90,000 counts
                 Â·gc.time:            7321,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc":
  275934,561 Â±(99.9%) 26776,724 ops/s [Average]
  (min, avg, max) = (174079,719, 275934,561, 298264,496), stdev = 35746,160
  CI (99.9%): [249157,837, 302711,285] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate":
  4789,302 Â±(99.9%) 464,763 MB/sec [Average]
  (min, avg, max) = (3021,402, 4789,302, 5176,884), stdev = 620,445
  CI (99.9%): [4324,539, 5254,064] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm":
  18200,000 Â±(99.9%) 0,001 B/op [Average]
  (min, avg, max) = (18200,000, 18200,000, 18200,000), stdev = 0,001
  CI (99.9%): [18200,000, 18200,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.count":
  3526,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (90,000, 141,040, 152,000), stdev = 18,272
  CI (99.9%): [3526,000, 3526,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.time":
  184868,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (7265,000, 7394,720, 7466,000), stdev = 51,425
  CI (99.9%): [184868,000, 184868,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc
# Parameters: (percentageOfRetainedHeap = P_50)

# Run progress: 33,33% complete, ETA 00:17:30
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
274543,190 ops/s
# Warmup Iteration   2: 233364,939 ops/s
# Warmup Iteration   3: 232270,109 ops/s
# Warmup Iteration   4: 229556,870 ops/s
# Warmup Iteration   5: 227654,473 ops/s
Iteration   1: 229075,534 ops/s
                 Â·gc.alloc.rate:      3975,936 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           38,000 counts
                 Â·gc.time:            5695,000 ms

Iteration   2: 220617,796 ops/s
                 Â·gc.alloc.rate:      3829,145 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           38,000 counts
                 Â·gc.time:            5911,000 ms

Iteration   3: 223455,101 ops/s
                 Â·gc.alloc.rate:      3878,357 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           38,000 counts
                 Â·gc.time:            5857,000 ms

Iteration   4: 224867,582 ops/s
                 Â·gc.alloc.rate:      3902,891 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           38,000 counts
                 Â·gc.time:            5826,000 ms

Iteration   5: 226640,365 ops/s
                 Â·gc.alloc.rate:      3933,636 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           38,000 counts
                 Â·gc.time:            5817,000 ms


# Run progress: 40,00% complete, ETA 00:15:44
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
259508,067 ops/s
# Warmup Iteration   2: 232552,393 ops/s
# Warmup Iteration   3: 282127,357 ops/s
# Warmup Iteration   4: 288417,631 ops/s
# Warmup Iteration   5: 292680,266 ops/s
Iteration   1: 289903,287 ops/s
                 Â·gc.alloc.rate:      5031,723 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           50,000 counts
                 Â·gc.time:            5896,000 ms

Iteration   2: 286636,677 ops/s
                 Â·gc.alloc.rate:      4975,023 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           48,000 counts
                 Â·gc.time:            5828,000 ms

Iteration   3: 281895,997 ops/s
                 Â·gc.alloc.rate:      4892,736 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           49,000 counts
                 Â·gc.time:            5977,000 ms

Iteration   4: 280047,735 ops/s
                 Â·gc.alloc.rate:      4860,645 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           48,000 counts
                 Â·gc.time:            5888,000 ms

Iteration   5: 274924,513 ops/s
                 Â·gc.alloc.rate:      4771,708 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           47,000 counts
                 Â·gc.time:            5861,000 ms


# Run progress: 46,67% complete, ETA 00:13:59
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
296845,405 ops/s
# Warmup Iteration   2: 267903,549 ops/s
# Warmup Iteration   3: 267692,661 ops/s
# Warmup Iteration   4: 266582,456 ops/s
# Warmup Iteration   5: 265093,807 ops/s
Iteration   1: 266214,231 ops/s
                 Â·gc.alloc.rate:      4620,551 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           45,000 counts
                 Â·gc.time:            5650,000 ms

Iteration   2: 260376,926 ops/s
                 Â·gc.alloc.rate:      4519,223 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           45,000 counts
                 Â·gc.time:            5739,000 ms

Iteration   3: 261476,092 ops/s
                 Â·gc.alloc.rate:      4538,314 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           44,000 counts
                 Â·gc.time:            5714,000 ms

Iteration   4: 261479,915 ops/s
                 Â·gc.alloc.rate:      4538,369 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           45,000 counts
                 Â·gc.time:            5755,000 ms

Iteration   5: 264175,368 ops/s
                 Â·gc.alloc.rate:      4585,131 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           45,000 counts
                 Â·gc.time:            5741,000 ms


# Run progress: 53,33% complete, ETA 00:12:13
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
255959,753 ops/s
# Warmup Iteration   2: 262903,580 ops/s
# Warmup Iteration   3: 266273,487 ops/s
# Warmup Iteration   4: 268962,078 ops/s
# Warmup Iteration   5: 273157,200 ops/s
Iteration   1: 274352,138 ops/s
                 Â·gc.alloc.rate:      4761,792 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           47,000 counts
                 Â·gc.time:            5743,000 ms

Iteration   2: 274588,053 ops/s
                 Â·gc.alloc.rate:      4765,886 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           47,000 counts
                 Â·gc.time:            5825,000 ms

Iteration   3: 271599,441 ops/s
                 Â·gc.alloc.rate:      4713,987 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           46,000 counts
                 Â·gc.time:            5804,000 ms

Iteration   4: 274253,974 ops/s
                 Â·gc.alloc.rate:      4760,071 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           46,000 counts
                 Â·gc.time:            5757,000 ms

Iteration   5: 270635,693 ops/s
                 Â·gc.alloc.rate:      4697,268 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           47,000 counts
                 Â·gc.time:            5917,000 ms


# Run progress: 60,00% complete, ETA 00:10:26
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
326731,399 ops/s
# Warmup Iteration   2: 275315,200 ops/s
# Warmup Iteration   3: 274750,623 ops/s
# Warmup Iteration   4: 276902,669 ops/s
# Warmup Iteration   5: 277510,627 ops/s
Iteration   1: 276125,548 ops/s
                 Â·gc.alloc.rate:      4792,571 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           47,000 counts
                 Â·gc.time:            5747,000 ms

Iteration   2: 267776,202 ops/s
                 Â·gc.alloc.rate:      4647,674 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           46,000 counts
                 Â·gc.time:            5932,000 ms

Iteration   3: 270113,252 ops/s
                 Â·gc.alloc.rate:      4688,238 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           46,000 counts
                 Â·gc.time:            5874,000 ms

Iteration   4: 265247,962 ops/s
                 Â·gc.alloc.rate:      4603,774 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           45,000 counts
                 Â·gc.time:            5895,000 ms

Iteration   5: 265139,467 ops/s
                 Â·gc.alloc.rate:      4601,853 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           45,000 counts
                 Â·gc.time:            5810,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc":
  262464,754 Â±(99.9%) 15406,923 ops/s [Average]
  (min, avg, max) = (220617,796, 262464,754, 289903,287), stdev = 20567,801
  CI (99.9%): [247057,831, 277871,677] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate":
  4555,460 Â±(99.9%) 267,418 MB/sec [Average]
  (min, avg, max) = (3829,145, 4555,460, 5031,723), stdev = 356,995
  CI (99.9%): [4288,042, 4822,878] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm":
  18200,000 Â±(99.9%) 0,001 B/op [Average]
  (min, avg, max) = (18200,000, 18200,000, 18200,000), stdev = 0,001
  CI (99.9%): [18200,000, 18200,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.count":
  1118,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (38,000, 44,720, 50,000), stdev = 3,691
  CI (99.9%): [1118,000, 1118,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.time":
  145459,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (5650,000, 5818,360, 5977,000), stdev = 82,994
  CI (99.9%): [145459,000, 145459,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc
# Parameters: (percentageOfRetainedHeap = P_75)

# Run progress: 66,67% complete, ETA 00:08:43
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
173306,955 ops/s
# Warmup Iteration   2: 170192,829 ops/s
# Warmup Iteration   3: 170278,247 ops/s
# Warmup Iteration   4: 165977,719 ops/s
# Warmup Iteration   5: 166447,785 ops/s
Iteration   1: 163703,944 ops/s
                 Â·gc.alloc.rate:      2841,326 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           31,000 counts
                 Â·gc.time:            7023,000 ms

Iteration   2: 161115,511 ops/s
                 Â·gc.alloc.rate:      2796,391 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           30,000 counts
                 Â·gc.time:            7073,000 ms

Iteration   3: 154633,355 ops/s
                 Â·gc.alloc.rate:      2683,884 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           31,000 counts
                 Â·gc.time:            7308,000 ms

Iteration   4: 156755,682 ops/s
                 Â·gc.alloc.rate:      2720,714 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           30,000 counts
                 Â·gc.time:            7177,000 ms

Iteration   5: 154926,105 ops/s
                 Â·gc.alloc.rate:      2688,947 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           30,000 counts
                 Â·gc.time:            7285,000 ms


# Run progress: 73,33% complete, ETA 00:06:58
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
152819,362 ops/s
# Warmup Iteration   2: 150969,979 ops/s
# Warmup Iteration   3: 150013,183 ops/s
# Warmup Iteration   4: 143149,791 ops/s
# Warmup Iteration   5: 145100,480 ops/s
Iteration   1: 144204,754 ops/s
                 Â·gc.alloc.rate:      2502,892 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            7441,000 ms

Iteration   2: 145475,043 ops/s
                 Â·gc.alloc.rate:      2524,937 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            7383,000 ms

Iteration   3: 140996,973 ops/s
                 Â·gc.alloc.rate:      2447,173 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           27,000 counts
                 Â·gc.time:            7437,000 ms

Iteration   4: 143396,785 ops/s
                 Â·gc.alloc.rate:      2488,867 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            7529,000 ms

Iteration   5: 146487,937 ops/s
                 Â·gc.alloc.rate:      2542,504 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           27,000 counts
                 Â·gc.time:            7298,000 ms


# Run progress: 80,00% complete, ETA 00:05:13
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
161241,463 ops/s
# Warmup Iteration   2: 149404,404 ops/s
# Warmup Iteration   3: 149670,026 ops/s
# Warmup Iteration   4: 150550,828 ops/s
# Warmup Iteration   5: 152893,321 ops/s
Iteration   1: 152636,930 ops/s
                 Â·gc.alloc.rate:      2649,235 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           30,000 counts
                 Â·gc.time:            7375,000 ms

Iteration   2: 151583,572 ops/s
                 Â·gc.alloc.rate:      2630,960 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           29,000 counts
                 Â·gc.time:            7252,000 ms

Iteration   3: 159137,015 ops/s
                 Â·gc.alloc.rate:      2762,044 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           31,000 counts
                 Â·gc.time:            7259,000 ms

Iteration   4: 160939,334 ops/s
                 Â·gc.alloc.rate:      2793,338 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           31,000 counts
                 Â·gc.time:            7143,000 ms

Iteration   5: 163120,982 ops/s
                 Â·gc.alloc.rate:      2831,181 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           31,000 counts
                 Â·gc.time:            7041,000 ms


# Run progress: 86,67% complete, ETA 00:03:28
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
182740,135 ops/s
# Warmup Iteration   2: 161341,195 ops/s
# Warmup Iteration   3: 166655,461 ops/s
# Warmup Iteration   4: 167908,764 ops/s
# Warmup Iteration   5: 172117,431 ops/s
Iteration   1: 166612,566 ops/s
                 Â·gc.alloc.rate:      2891,805 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           32,000 counts
                 Â·gc.time:            7026,000 ms

Iteration   2: 163750,686 ops/s
                 Â·gc.alloc.rate:      2842,127 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           32,000 counts
                 Â·gc.time:            7114,000 ms

Iteration   3: 166458,849 ops/s
                 Â·gc.alloc.rate:      2889,133 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           32,000 counts
                 Â·gc.time:            7088,000 ms

Iteration   4: 165942,566 ops/s
                 Â·gc.alloc.rate:      2880,187 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           32,000 counts
                 Â·gc.time:            7126,000 ms

Iteration   5: 169613,872 ops/s
                 Â·gc.alloc.rate:      2943,877 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           33,000 counts
                 Â·gc.time:            7136,000 ms


# Run progress: 93,33% complete, ETA 00:01:44
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
207098,993 ops/s
# Warmup Iteration   2: 169277,870 ops/s
# Warmup Iteration   3: 162871,510 ops/s
# Warmup Iteration   4: 164518,168 ops/s
# Warmup Iteration   5: 160445,153 ops/s
Iteration   1: 158463,489 ops/s
                 Â·gc.alloc.rate:      2750,371 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           30,000 counts
                 Â·gc.time:            7085,000 ms

Iteration   2: 155315,744 ops/s
                 Â·gc.alloc.rate:      2695,723 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           29,000 counts
                 Â·gc.time:            7156,000 ms

Iteration   3: 148254,769 ops/s
                 Â·gc.alloc.rate:      2573,180 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           29,000 counts
                 Â·gc.time:            7279,000 ms

Iteration   4: 148250,218 ops/s
                 Â·gc.alloc.rate:      2573,101 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           29,000 counts
                 Â·gc.time:            7435,000 ms

Iteration   5: 151849,963 ops/s
                 Â·gc.alloc.rate:      2635,469 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           28,000 counts
                 Â·gc.time:            7202,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc":
  155745,066 Â±(99.9%) 6187,750 ops/s [Average]
  (min, avg, max) = (140996,973, 155745,066, 169613,872), stdev = 8260,469
  CI (99.9%): [149557,316, 161932,816] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate":
  2703,175 Â±(99.9%) 107,399 MB/sec [Average]
  (min, avg, max) = (2447,173, 2703,175, 2943,877), stdev = 143,374
  CI (99.9%): [2595,776, 2810,573] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm":
  18200,000 Â±(99.9%) 0,001 B/op [Average]
  (min, avg, max) = (18200,000, 18200,000, 18200,000), stdev = 0,001
  CI (99.9%): [18200,000, 18200,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.count":
  748,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (27,000, 29,920, 33,000), stdev = 1,681
  CI (99.9%): [748,000, 748,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.time":
  180671,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (7023,000, 7226,840, 7529,000), stdev = 146,659
  CI (99.9%): [180671,000, 180671,000] (assumes normal distribution)


# Run complete. Total time: 00:26:08

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                                     (percentageOfRetainedHeap)   Mode  Cnt       Score       Error   Units
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc                                            P_25  thrpt   25  275934,561 Â± 26776,724   ops/s
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate                             P_25  thrpt   25    4789,302 Â±   464,763  MB/sec
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm                        P_25  thrpt   25   18200,000 Â±     0,001    B/op
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.count                                  P_25  thrpt   25    3526,000              counts
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.time                                   P_25  thrpt   25  184868,000                  ms
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc                                            P_50  thrpt   25  262464,754 Â± 15406,923   ops/s
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate                             P_50  thrpt   25    4555,460 Â±   267,418  MB/sec
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm                        P_50  thrpt   25   18200,000 Â±     0,001    B/op
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.count                                  P_50  thrpt   25    1118,000              counts
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.time                                   P_50  thrpt   25  145459,000                  ms
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc                                            P_75  thrpt   25  155745,066 Â±  6187,750   ops/s
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate                             P_75  thrpt   25    2703,175 Â±   107,399  MB/sec
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm                        P_75  thrpt   25   18200,000 Â±     0,001    B/op
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.count                                  P_75  thrpt   25     748,000              counts
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.time                                   P_75  thrpt   25  180671,000                  ms

Benchmark result is saved to results/jdk-17/arm64/openjdk-hotspot-vm/HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark_parallelGC_1thread.csv

Running HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark benchmark ...
java  -jar benchmarks/target/benchmarks.jar .*HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.* -foe true -wi 5 -w 10 -i 5 -r 10 -f 5 -rf csv -rff results/jdk-17/arm64/openjdk-hotspot-vm/HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark_parallelGC_2threads.csv -t 2 -prof gc -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseParallelGC"

# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc
# Parameters: (percentageOfRetainedHeap = P_25)

# Run progress: 0,00% complete, ETA 00:25:00
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
233832,612 ops/s
# Warmup Iteration   2: 174770,619 ops/s
# Warmup Iteration   3: 185230,410 ops/s
# Warmup Iteration   4: 328941,502 ops/s
# Warmup Iteration   5: 331685,751 ops/s
Iteration   1: 331428,939 ops/s
                 Â·gc.alloc.rate:      5752,511 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           169,000 counts
                 Â·gc.time:            8286,000 ms

Iteration   2: 331893,413 ops/s
                 Â·gc.alloc.rate:      5760,595 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           170,000 counts
                 Â·gc.time:            8276,000 ms

Iteration   3: 334065,885 ops/s
                 Â·gc.alloc.rate:      5798,202 MB/sec
                 Â·gc.alloc.rate.norm: 18200,004 B/op
                 Â·gc.count:           172,000 counts
                 Â·gc.time:            8336,000 ms

Iteration   4: 334962,087 ops/s
                 Â·gc.alloc.rate:      5813,819 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           172,000 counts
                 Â·gc.time:            8304,000 ms

Iteration   5: 334597,079 ops/s
                 Â·gc.alloc.rate:      5806,764 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           172,000 counts
                 Â·gc.time:            8320,000 ms


# Run progress: 6,67% complete, ETA 00:24:48
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
336729,613 ops/s
# Warmup Iteration   2: 336941,684 ops/s
# Warmup Iteration   3: 333371,024 ops/s
# Warmup Iteration   4: 332587,694 ops/s
# Warmup Iteration   5: 336160,699 ops/s
Iteration   1: 334194,897 ops/s
                 Â·gc.alloc.rate:      5800,538 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           172,000 counts
                 Â·gc.time:            8333,000 ms

Iteration   2: 335473,981 ops/s
                 Â·gc.alloc.rate:      5822,735 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           172,000 counts
                 Â·gc.time:            8292,000 ms

Iteration   3: 335627,586 ops/s
                 Â·gc.alloc.rate:      5825,373 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           172,000 counts
                 Â·gc.time:            8289,000 ms

Iteration   4: 334786,281 ops/s
                 Â·gc.alloc.rate:      5810,670 MB/sec
                 Â·gc.alloc.rate.norm: 18200,004 B/op
                 Â·gc.count:           172,000 counts
                 Â·gc.time:            8315,000 ms

Iteration   5: 335915,876 ops/s
                 Â·gc.alloc.rate:      5830,383 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           172,000 counts
                 Â·gc.time:            8277,000 ms


# Run progress: 13,33% complete, ETA 00:23:02
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
336817,117 ops/s
# Warmup Iteration   2: 334684,599 ops/s
# Warmup Iteration   3: 334569,399 ops/s
# Warmup Iteration   4: 333479,276 ops/s
# Warmup Iteration   5: 334502,422 ops/s
Iteration   1: 335794,580 ops/s
                 Â·gc.alloc.rate:      5828,278 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           172,000 counts
                 Â·gc.time:            8285,000 ms

Iteration   2: 336188,843 ops/s
                 Â·gc.alloc.rate:      5835,130 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           172,000 counts
                 Â·gc.time:            8274,000 ms

Iteration   3: 336025,997 ops/s
                 Â·gc.alloc.rate:      5832,262 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           172,000 counts
                 Â·gc.time:            8283,000 ms

Iteration   4: 336316,970 ops/s
                 Â·gc.alloc.rate:      5837,190 MB/sec
                 Â·gc.alloc.rate.norm: 18200,004 B/op
                 Â·gc.count:           172,000 counts
                 Â·gc.time:            8269,000 ms

Iteration   5: 336387,297 ops/s
                 Â·gc.alloc.rate:      5837,775 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           172,000 counts
                 Â·gc.time:            8265,000 ms


# Run progress: 20,00% complete, ETA 00:21:16
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
337098,484 ops/s
# Warmup Iteration   2: 333446,093 ops/s
# Warmup Iteration   3: 335612,205 ops/s
# Warmup Iteration   4: 334120,260 ops/s
# Warmup Iteration   5: 333888,945 ops/s
Iteration   1: 334340,060 ops/s
                 Â·gc.alloc.rate:      5803,046 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           172,000 counts
                 Â·gc.time:            8333,000 ms

Iteration   2: 334690,048 ops/s
                 Â·gc.alloc.rate:      5809,089 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           172,000 counts
                 Â·gc.time:            8319,000 ms

Iteration   3: 334117,826 ops/s
                 Â·gc.alloc.rate:      5799,070 MB/sec
                 Â·gc.alloc.rate.norm: 18200,004 B/op
                 Â·gc.count:           172,000 counts
                 Â·gc.time:            8333,000 ms

Iteration   4: 335326,908 ops/s
                 Â·gc.alloc.rate:      5820,146 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           172,000 counts
                 Â·gc.time:            8293,000 ms

Iteration   5: 336788,726 ops/s
                 Â·gc.alloc.rate:      5845,501 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           172,000 counts
                 Â·gc.time:            8256,000 ms


# Run progress: 26,67% complete, ETA 00:19:30
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
339343,752 ops/s
# Warmup Iteration   2: 333847,543 ops/s
# Warmup Iteration   3: 334122,153 ops/s
# Warmup Iteration   4: 335340,602 ops/s
# Warmup Iteration   5: 334575,360 ops/s
Iteration   1: 334322,216 ops/s
                 Â·gc.alloc.rate:      5802,733 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           172,000 counts
                 Â·gc.time:            8335,000 ms

Iteration   2: 335047,689 ops/s
                 Â·gc.alloc.rate:      5815,308 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           172,000 counts
                 Â·gc.time:            8311,000 ms

Iteration   3: 334315,280 ops/s
                 Â·gc.alloc.rate:      5802,618 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           170,000 counts
                 Â·gc.time:            8252,000 ms

Iteration   4: 331460,766 ops/s
                 Â·gc.alloc.rate:      5752,949 MB/sec
                 Â·gc.alloc.rate.norm: 18200,004 B/op
                 Â·gc.count:           170,000 counts
                 Â·gc.time:            8279,000 ms

Iteration   5: 337210,500 ops/s
                 Â·gc.alloc.rate:      5852,855 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           172,000 counts
                 Â·gc.time:            8243,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc":
  334851,189 Â±(99.9%) 1131,426 ops/s [Average]
  (min, avg, max) = (331428,939, 334851,189, 337210,500), stdev = 1510,421
  CI (99.9%): [333719,763, 335982,615] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate":
  5811,822 Â±(99.9%) 19,618 MB/sec [Average]
  (min, avg, max) = (5752,511, 5811,822, 5852,855), stdev = 26,190
  CI (99.9%): [5792,203, 5831,440] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm":
  18200,001 Â±(99.9%) 0,001 B/op [Average]
  (min, avg, max) = (18200,000, 18200,001, 18200,004), stdev = 0,001
  CI (99.9%): [18200,000, 18200,002] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.count":
  4291,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (169,000, 171,640, 172,000), stdev = 0,860
  CI (99.9%): [4291,000, 4291,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.time":
  207358,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (8243,000, 8294,320, 8336,000), stdev = 28,096
  CI (99.9%): [207358,000, 207358,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc
# Parameters: (percentageOfRetainedHeap = P_50)

# Run progress: 33,33% complete, ETA 00:17:37
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
485279,123 ops/s
# Warmup Iteration   2: 499538,818 ops/s
# Warmup Iteration   3: 504882,251 ops/s
# Warmup Iteration   4: 502444,672 ops/s
# Warmup Iteration   5: 497905,505 ops/s
Iteration   1: 501496,740 ops/s
                 Â·gc.alloc.rate:      8704,291 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           85,000 counts
                 Â·gc.time:            7453,000 ms

Iteration   2: 496469,718 ops/s
                 Â·gc.alloc.rate:      8617,014 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           85,000 counts
                 Â·gc.time:            7500,000 ms

Iteration   3: 497311,876 ops/s
                 Â·gc.alloc.rate:      8631,481 MB/sec
                 Â·gc.alloc.rate.norm: 18200,002 B/op
                 Â·gc.count:           84,000 counts
                 Â·gc.time:            7472,000 ms

Iteration   4: 504033,380 ops/s
                 Â·gc.alloc.rate:      8748,307 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           86,000 counts
                 Â·gc.time:            7435,000 ms

Iteration   5: 504340,506 ops/s
                 Â·gc.alloc.rate:      8753,638 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           86,000 counts
                 Â·gc.time:            7437,000 ms


# Run progress: 40,00% complete, ETA 00:15:47
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
490202,396 ops/s
# Warmup Iteration   2: 496413,307 ops/s
# Warmup Iteration   3: 504482,512 ops/s
# Warmup Iteration   4: 508375,973 ops/s
# Warmup Iteration   5: 502592,397 ops/s
Iteration   1: 508103,628 ops/s
                 Â·gc.alloc.rate:      8818,987 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           87,000 counts
                 Â·gc.time:            7473,000 ms

Iteration   2: 513784,345 ops/s
                 Â·gc.alloc.rate:      8917,531 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           88,000 counts
                 Â·gc.time:            7451,000 ms

Iteration   3: 509272,872 ops/s
                 Â·gc.alloc.rate:      8839,255 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           87,000 counts
                 Â·gc.time:            7447,000 ms

Iteration   4: 507925,484 ops/s
                 Â·gc.alloc.rate:      8815,711 MB/sec
                 Â·gc.alloc.rate.norm: 18200,002 B/op
                 Â·gc.count:           87,000 counts
                 Â·gc.time:            7479,000 ms

Iteration   5: 514939,769 ops/s
                 Â·gc.alloc.rate:      8937,599 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           88,000 counts
                 Â·gc.time:            7418,000 ms


# Run progress: 46,67% complete, ETA 00:13:59
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
488380,877 ops/s
# Warmup Iteration   2: 502322,430 ops/s
# Warmup Iteration   3: 502742,592 ops/s
# Warmup Iteration   4: 499845,885 ops/s
# Warmup Iteration   5: 502870,516 ops/s
Iteration   1: 498699,359 ops/s
                 Â·gc.alloc.rate:      8655,756 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           85,000 counts
                 Â·gc.time:            7483,000 ms

Iteration   2: 505610,280 ops/s
                 Â·gc.alloc.rate:      8775,707 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           86,000 counts
                 Â·gc.time:            7430,000 ms

Iteration   3: 492250,649 ops/s
                 Â·gc.alloc.rate:      8544,030 MB/sec
                 Â·gc.alloc.rate.norm: 18200,002 B/op
                 Â·gc.count:           84,000 counts
                 Â·gc.time:            7466,000 ms

Iteration   4: 493340,098 ops/s
                 Â·gc.alloc.rate:      8562,684 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           83,000 counts
                 Â·gc.time:            7430,000 ms

Iteration   5: 483794,614 ops/s
                 Â·gc.alloc.rate:      8397,024 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           84,000 counts
                 Â·gc.time:            7544,000 ms


# Run progress: 53,33% complete, ETA 00:12:13
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
475851,527 ops/s
# Warmup Iteration   2: 492734,197 ops/s
# Warmup Iteration   3: 488150,254 ops/s
# Warmup Iteration   4: 490631,623 ops/s
# Warmup Iteration   5: 487547,823 ops/s
Iteration   1: 486575,227 ops/s
                 Â·gc.alloc.rate:      8445,301 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           83,000 counts
                 Â·gc.time:            7482,000 ms

Iteration   2: 492865,124 ops/s
                 Â·gc.alloc.rate:      8554,487 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           84,000 counts
                 Â·gc.time:            7449,000 ms

Iteration   3: 490919,880 ops/s
                 Â·gc.alloc.rate:      8520,636 MB/sec
                 Â·gc.alloc.rate.norm: 18200,002 B/op
                 Â·gc.count:           84,000 counts
                 Â·gc.time:            7491,000 ms

Iteration   4: 493684,402 ops/s
                 Â·gc.alloc.rate:      8568,714 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           84,000 counts
                 Â·gc.time:            7435,000 ms

Iteration   5: 494748,331 ops/s
                 Â·gc.alloc.rate:      8587,115 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           85,000 counts
                 Â·gc.time:            7495,000 ms


# Run progress: 60,00% complete, ETA 00:10:29
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
478134,326 ops/s
# Warmup Iteration   2: 491603,591 ops/s
# Warmup Iteration   3: 490195,755 ops/s
# Warmup Iteration   4: 488005,822 ops/s
# Warmup Iteration   5: 493988,106 ops/s
Iteration   1: 490743,431 ops/s
                 Â·gc.alloc.rate:      8517,636 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           84,000 counts
                 Â·gc.time:            7483,000 ms

Iteration   2: 481555,974 ops/s
                 Â·gc.alloc.rate:      8358,180 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           82,000 counts
                 Â·gc.time:            7494,000 ms

Iteration   3: 486022,508 ops/s
                 Â·gc.alloc.rate:      8435,713 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           83,000 counts
                 Â·gc.time:            7495,000 ms

Iteration   4: 491094,450 ops/s
                 Â·gc.alloc.rate:      8523,532 MB/sec
                 Â·gc.alloc.rate.norm: 18200,002 B/op
                 Â·gc.count:           84,000 counts
                 Â·gc.time:            7476,000 ms

Iteration   5: 493042,702 ops/s
                 Â·gc.alloc.rate:      8557,550 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           84,000 counts
                 Â·gc.time:            7432,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc":
  497305,014 Â±(99.9%) 6894,858 ops/s [Average]
  (min, avg, max) = (481555,974, 497305,014, 514939,769), stdev = 9204,438
  CI (99.9%): [490410,156, 504199,872] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate":
  8631,515 Â±(99.9%) 119,668 MB/sec [Average]
  (min, avg, max) = (8358,180, 8631,515, 8937,599), stdev = 159,753
  CI (99.9%): [8511,847, 8751,183] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm":
  18200,001 Â±(99.9%) 0,001 B/op [Average]
  (min, avg, max) = (18200,000, 18200,001, 18200,002), stdev = 0,001
  CI (99.9%): [18200,000, 18200,001] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.count":
  2122,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (82,000, 84,880, 88,000), stdev = 1,616
  CI (99.9%): [2122,000, 2122,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.time":
  186650,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (7418,000, 7466,000, 7544,000), stdev = 29,845
  CI (99.9%): [186650,000, 186650,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc
# Parameters: (percentageOfRetainedHeap = P_75)

# Run progress: 66,67% complete, ETA 00:08:44
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
323368,406 ops/s
# Warmup Iteration   2: 327680,008 ops/s
# Warmup Iteration   3: 328698,245 ops/s
# Warmup Iteration   4: 328685,349 ops/s
# Warmup Iteration   5: 327163,270 ops/s
Iteration   1: 326098,538 ops/s
                 Â·gc.alloc.rate:      5659,994 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           63,000 counts
                 Â·gc.time:            8377,000 ms

Iteration   2: 327860,259 ops/s
                 Â·gc.alloc.rate:      5690,563 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           63,000 counts
                 Â·gc.time:            8324,000 ms

Iteration   3: 331175,494 ops/s
                 Â·gc.alloc.rate:      5748,100 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           64,000 counts
                 Â·gc.time:            8358,000 ms

Iteration   4: 327216,867 ops/s
                 Â·gc.alloc.rate:      5679,277 MB/sec
                 Â·gc.alloc.rate.norm: 18200,004 B/op
                 Â·gc.count:           63,000 counts
                 Â·gc.time:            8345,000 ms

Iteration   5: 335816,341 ops/s
                 Â·gc.alloc.rate:      5827,759 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           65,000 counts
                 Â·gc.time:            8343,000 ms


# Run progress: 73,33% complete, ETA 00:06:59
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
323717,117 ops/s
# Warmup Iteration   2: 327020,210 ops/s
# Warmup Iteration   3: 328352,689 ops/s
# Warmup Iteration   4: 328305,172 ops/s
# Warmup Iteration   5: 327497,733 ops/s
Iteration   1: 330349,970 ops/s
                 Â·gc.alloc.rate:      5733,764 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           64,000 counts
                 Â·gc.time:            8387,000 ms

Iteration   2: 328429,516 ops/s
                 Â·gc.alloc.rate:      5700,431 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           63,000 counts
                 Â·gc.time:            8316,000 ms

Iteration   3: 332546,337 ops/s
                 Â·gc.alloc.rate:      5771,867 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           64,000 counts
                 Â·gc.time:            8316,000 ms

Iteration   4: 334653,547 ops/s
                 Â·gc.alloc.rate:      5808,340 MB/sec
                 Â·gc.alloc.rate.norm: 18200,004 B/op
                 Â·gc.count:           64,000 counts
                 Â·gc.time:            8258,000 ms

Iteration   5: 336143,870 ops/s
                 Â·gc.alloc.rate:      5833,438 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           65,000 counts
                 Â·gc.time:            8340,000 ms


# Run progress: 80,00% complete, ETA 00:05:14
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
318676,402 ops/s
# Warmup Iteration   2: 315440,325 ops/s
# Warmup Iteration   3: 325081,853 ops/s
# Warmup Iteration   4: 317143,695 ops/s
# Warmup Iteration   5: 323641,461 ops/s
Iteration   1: 317757,763 ops/s
                 Â·gc.alloc.rate:      5515,222 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           61,000 counts
                 Â·gc.time:            8370,000 ms

Iteration   2: 331449,442 ops/s
                 Â·gc.alloc.rate:      5752,870 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           64,000 counts
                 Â·gc.time:            8350,000 ms

Iteration   3: 325153,892 ops/s
                 Â·gc.alloc.rate:      5643,618 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           63,000 counts
                 Â·gc.time:            8412,000 ms

Iteration   4: 326284,536 ops/s
                 Â·gc.alloc.rate:      5663,103 MB/sec
                 Â·gc.alloc.rate.norm: 18200,004 B/op
                 Â·gc.count:           63,000 counts
                 Â·gc.time:            8378,000 ms

Iteration   5: 337713,700 ops/s
                 Â·gc.alloc.rate:      5860,675 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           65,000 counts
                 Â·gc.time:            8282,000 ms


# Run progress: 86,67% complete, ETA 00:03:29
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
322055,271 ops/s
# Warmup Iteration   2: 327930,855 ops/s
# Warmup Iteration   3: 326751,195 ops/s
# Warmup Iteration   4: 326862,272 ops/s
# Warmup Iteration   5: 325804,646 ops/s
Iteration   1: 328712,439 ops/s
                 Â·gc.alloc.rate:      5705,354 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           63,000 counts
                 Â·gc.time:            8309,000 ms

Iteration   2: 323948,728 ops/s
                 Â·gc.alloc.rate:      5622,682 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           62,000 counts
                 Â·gc.time:            8318,000 ms

Iteration   3: 330658,540 ops/s
                 Â·gc.alloc.rate:      5739,119 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           63,000 counts
                 Â·gc.time:            8279,000 ms

Iteration   4: 325646,555 ops/s
                 Â·gc.alloc.rate:      5652,021 MB/sec
                 Â·gc.alloc.rate.norm: 18200,004 B/op
                 Â·gc.count:           63,000 counts
                 Â·gc.time:            8363,000 ms

Iteration   5: 329112,572 ops/s
                 Â·gc.alloc.rate:      5711,387 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           63,000 counts
                 Â·gc.time:            8287,000 ms


# Run progress: 93,33% complete, ETA 00:01:44
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
317750,604 ops/s
# Warmup Iteration   2: 321924,426 ops/s
# Warmup Iteration   3: 329111,024 ops/s
# Warmup Iteration   4: 321702,054 ops/s
# Warmup Iteration   5: 323107,458 ops/s
Iteration   1: 324048,638 ops/s
                 Â·gc.alloc.rate:      5624,417 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           62,000 counts
                 Â·gc.time:            8314,000 ms

Iteration   2: 326996,262 ops/s
                 Â·gc.alloc.rate:      5675,561 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           62,000 counts
                 Â·gc.time:            8297,000 ms

Iteration   3: 322872,606 ops/s
                 Â·gc.alloc.rate:      5604,002 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           63,000 counts
                 Â·gc.time:            8411,000 ms

Iteration   4: 326975,109 ops/s
                 Â·gc.alloc.rate:      5675,086 MB/sec
                 Â·gc.alloc.rate.norm: 18200,004 B/op
                 Â·gc.count:           63,000 counts
                 Â·gc.time:            8354,000 ms

Iteration   5: 330979,023 ops/s
                 Â·gc.alloc.rate:      5743,819 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           64,000 counts
                 Â·gc.time:            8366,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc":
  328744,022 Â±(99.9%) 3433,934 ops/s [Average]
  (min, avg, max) = (317757,763, 328744,022, 337713,700), stdev = 4584,204
  CI (99.9%): [325310,087, 332177,956] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate":
  5705,699 Â±(99.9%) 59,441 MB/sec [Average]
  (min, avg, max) = (5515,222, 5705,699, 5860,675), stdev = 79,352
  CI (99.9%): [5646,258, 5765,140] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm":
  18200,001 Â±(99.9%) 0,001 B/op [Average]
  (min, avg, max) = (18200,000, 18200,001, 18200,004), stdev = 0,001
  CI (99.9%): [18200,000, 18200,002] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.count":
  1582,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (61,000, 63,280, 65,000), stdev = 0,980
  CI (99.9%): [1582,000, 1582,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.time":
  208454,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (8258,000, 8338,160, 8412,000), stdev = 40,783
  CI (99.9%): [208454,000, 208454,000] (assumes normal distribution)


# Run complete. Total time: 00:26:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                                     (percentageOfRetainedHeap)   Mode  Cnt       Score      Error   Units
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc                                            P_25  thrpt   25  334851,189 Â± 1131,426   ops/s
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate                             P_25  thrpt   25    5811,822 Â±   19,618  MB/sec
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm                        P_25  thrpt   25   18200,001 Â±    0,001    B/op
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.count                                  P_25  thrpt   25    4291,000             counts
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.time                                   P_25  thrpt   25  207358,000                 ms
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc                                            P_50  thrpt   25  497305,014 Â± 6894,858   ops/s
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate                             P_50  thrpt   25    8631,515 Â±  119,668  MB/sec
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm                        P_50  thrpt   25   18200,001 Â±    0,001    B/op
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.count                                  P_50  thrpt   25    2122,000             counts
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.time                                   P_50  thrpt   25  186650,000                 ms
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc                                            P_75  thrpt   25  328744,022 Â± 3433,934   ops/s
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate                             P_75  thrpt   25    5705,699 Â±   59,441  MB/sec
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm                        P_75  thrpt   25   18200,001 Â±    0,001    B/op
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.count                                  P_75  thrpt   25    1582,000             counts
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.time                                   P_75  thrpt   25  208454,000                 ms

Benchmark result is saved to results/jdk-17/arm64/openjdk-hotspot-vm/HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark_parallelGC_2threads.csv

Running HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark benchmark ...
java  -jar benchmarks/target/benchmarks.jar .*HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.* -foe true -wi 5 -w 10 -i 5 -r 10 -f 5 -rf csv -rff results/jdk-17/arm64/openjdk-hotspot-vm/HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark_g1GC_1thread.csv -t 1 -prof gc -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseG1GC"

# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc
# Parameters: (percentageOfRetainedHeap = P_25)

# Run progress: 0,00% complete, ETA 00:25:00
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
311366,186 ops/s
# Warmup Iteration   2: 257216,866 ops/s
# Warmup Iteration   3: 291352,763 ops/s
# Warmup Iteration   4: 269526,482 ops/s
# Warmup Iteration   5: 277911,099 ops/s
Iteration   1: 272489,364 ops/s
                 Â·gc.alloc.rate:      4729,500 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           257,000 counts
                 Â·gc.time:            7124,000 ms

Iteration   2: 269399,332 ops/s
                 Â·gc.alloc.rate:      4675,875 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           258,000 counts
                 Â·gc.time:            7184,000 ms

Iteration   3: 266798,594 ops/s
                 Â·gc.alloc.rate:      4630,730 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           243,000 counts
                 Â·gc.time:            6875,000 ms

Iteration   4: 280411,919 ops/s
                 Â·gc.alloc.rate:      4867,016 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           271,000 counts
                 Â·gc.time:            7185,000 ms

Iteration   5: 274757,306 ops/s
                 Â·gc.alloc.rate:      4768,871 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           264,000 counts
                 Â·gc.time:            7361,000 ms


# Run progress: 6,67% complete, ETA 00:24:46
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
309355,126 ops/s
# Warmup Iteration   2: 276241,969 ops/s
# Warmup Iteration   3: 259709,240 ops/s
# Warmup Iteration   4: 284953,444 ops/s
# Warmup Iteration   5: 281110,338 ops/s
Iteration   1: 268224,219 ops/s
                 Â·gc.alloc.rate:      4655,462 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           252,000 counts
                 Â·gc.time:            7207,000 ms

Iteration   2: 287106,854 ops/s
                 Â·gc.alloc.rate:      4983,218 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           278,000 counts
                 Â·gc.time:            7017,000 ms

Iteration   3: 279372,785 ops/s
                 Â·gc.alloc.rate:      4848,733 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           272,000 counts
                 Â·gc.time:            7407,000 ms

Iteration   4: 274952,362 ops/s
                 Â·gc.alloc.rate:      4772,249 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           264,000 counts
                 Â·gc.time:            7338,000 ms

Iteration   5: 270287,909 ops/s
                 Â·gc.alloc.rate:      4691,270 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           255,000 counts
                 Â·gc.time:            6848,000 ms


# Run progress: 13,33% complete, ETA 00:22:39
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
318293,139 ops/s
# Warmup Iteration   2: 278611,286 ops/s
# Warmup Iteration   3: 277713,496 ops/s
# Warmup Iteration   4: 299702,518 ops/s
# Warmup Iteration   5: 273875,237 ops/s
Iteration   1: 283917,865 ops/s
                 Â·gc.alloc.rate:      4927,878 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           272,000 counts
                 Â·gc.time:            7125,000 ms

Iteration   2: 277588,859 ops/s
                 Â·gc.alloc.rate:      4818,026 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           261,000 counts
                 Â·gc.time:            7304,000 ms

Iteration   3: 287132,859 ops/s
                 Â·gc.alloc.rate:      4983,674 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           276,000 counts
                 Â·gc.time:            7245,000 ms

Iteration   4: 284782,788 ops/s
                 Â·gc.alloc.rate:      4942,876 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           258,000 counts
                 Â·gc.time:            6966,000 ms

Iteration   5: 289706,770 ops/s
                 Â·gc.alloc.rate:      5028,311 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           274,000 counts
                 Â·gc.time:            6959,000 ms


# Run progress: 20,00% complete, ETA 00:21:02
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
321356,637 ops/s
# Warmup Iteration   2: 277633,207 ops/s
# Warmup Iteration   3: 277687,306 ops/s
# Warmup Iteration   4: 298823,917 ops/s
# Warmup Iteration   5: 272652,749 ops/s
Iteration   1: 275370,127 ops/s
                 Â·gc.alloc.rate:      4779,501 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           255,000 counts
                 Â·gc.time:            7381,000 ms

Iteration   2: 274642,796 ops/s
                 Â·gc.alloc.rate:      4766,891 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           271,000 counts
                 Â·gc.time:            7270,000 ms

Iteration   3: 270131,344 ops/s
                 Â·gc.alloc.rate:      4688,587 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           258,000 counts
                 Â·gc.time:            6980,000 ms

Iteration   4: 292902,149 ops/s
                 Â·gc.alloc.rate:      5083,794 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           273,000 counts
                 Â·gc.time:            7119,000 ms

Iteration   5: 280233,578 ops/s
                 Â·gc.alloc.rate:      4863,903 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           262,000 counts
                 Â·gc.time:            7301,000 ms


# Run progress: 26,67% complete, ETA 00:19:20
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
320721,377 ops/s
# Warmup Iteration   2: 278582,373 ops/s
# Warmup Iteration   3: 278106,138 ops/s
# Warmup Iteration   4: 283676,325 ops/s
# Warmup Iteration   5: 256039,349 ops/s
Iteration   1: 283123,452 ops/s
                 Â·gc.alloc.rate:      4914,083 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           263,000 counts
                 Â·gc.time:            7014,000 ms

Iteration   2: 295597,500 ops/s
                 Â·gc.alloc.rate:      5130,570 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           278,000 counts
                 Â·gc.time:            7166,000 ms

Iteration   3: 299201,645 ops/s
                 Â·gc.alloc.rate:      5193,144 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           287,000 counts
                 Â·gc.time:            7357,000 ms

Iteration   4: 289756,298 ops/s
                 Â·gc.alloc.rate:      5029,198 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           269,000 counts
                 Â·gc.time:            7195,000 ms

Iteration   5: 295028,037 ops/s
                 Â·gc.alloc.rate:      5120,685 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           278,000 counts
                 Â·gc.time:            6968,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc":
  280916,668 Â±(99.9%) 7015,393 ops/s [Average]
  (min, avg, max) = (266798,594, 280916,668, 299201,645), stdev = 9365,348
  CI (99.9%): [273901,276, 287932,061] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate":
  4875,762 Â±(99.9%) 121,764 MB/sec [Average]
  (min, avg, max) = (4630,730, 4875,762, 5193,144), stdev = 162,551
  CI (99.9%): [4753,998, 4997,526] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm":
  18200,000 Â±(99.9%) 0,001 B/op [Average]
  (min, avg, max) = (18200,000, 18200,000, 18200,000), stdev = 0,001
  CI (99.9%): [18200,000, 18200,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.count":
  6649,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (243,000, 265,960, 287,000), stdev = 10,237
  CI (99.9%): [6649,000, 6649,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.time":
  178896,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (6848,000, 7155,840, 7407,000), stdev = 165,424
  CI (99.9%): [178896,000, 178896,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc
# Parameters: (percentageOfRetainedHeap = P_50)

# Run progress: 33,33% complete, ETA 00:17:37
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
325793,232 ops/s
# Warmup Iteration   2: 339211,791 ops/s
# Warmup Iteration   3: 340230,828 ops/s
# Warmup Iteration   4: 328717,450 ops/s
# Warmup Iteration   5: 323232,159 ops/s
Iteration   1: 320365,696 ops/s
                 Â·gc.alloc.rate:      5560,477 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           511,000 counts
                 Â·gc.time:            6204,000 ms

Iteration   2: 327937,767 ops/s
                 Â·gc.alloc.rate:      5691,906 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           502,000 counts
                 Â·gc.time:            6103,000 ms

Iteration   3: 315587,569 ops/s
                 Â·gc.alloc.rate:      5477,549 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           505,000 counts
                 Â·gc.time:            6145,000 ms

Iteration   4: 329406,443 ops/s
                 Â·gc.alloc.rate:      5717,396 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           516,000 counts
                 Â·gc.time:            6111,000 ms

Iteration   5: 325219,234 ops/s
                 Â·gc.alloc.rate:      5644,708 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           504,000 counts
                 Â·gc.time:            6324,000 ms


# Run progress: 40,00% complete, ETA 00:15:45
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
307225,995 ops/s
# Warmup Iteration   2: 315379,752 ops/s
# Warmup Iteration   3: 331111,763 ops/s
# Warmup Iteration   4: 321489,814 ops/s
# Warmup Iteration   5: 322896,974 ops/s
Iteration   1: 339469,543 ops/s
                 Â·gc.alloc.rate:      5892,058 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           530,000 counts
                 Â·gc.time:            6086,000 ms

Iteration   2: 330599,397 ops/s
                 Â·gc.alloc.rate:      5738,110 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           519,000 counts
                 Â·gc.time:            6092,000 ms

Iteration   3: 328176,505 ops/s
                 Â·gc.alloc.rate:      5696,053 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           512,000 counts
                 Â·gc.time:            6107,000 ms

Iteration   4: 328759,287 ops/s
                 Â·gc.alloc.rate:      5706,165 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           516,000 counts
                 Â·gc.time:            6205,000 ms

Iteration   5: 328103,688 ops/s
                 Â·gc.alloc.rate:      5694,781 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           517,000 counts
                 Â·gc.time:            6298,000 ms


# Run progress: 46,67% complete, ETA 00:13:56
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
322610,213 ops/s
# Warmup Iteration   2: 324172,440 ops/s
# Warmup Iteration   3: 323663,592 ops/s
# Warmup Iteration   4: 339274,229 ops/s
# Warmup Iteration   5: 329651,964 ops/s
Iteration   1: 322737,073 ops/s
                 Â·gc.alloc.rate:      5601,644 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           505,000 counts
                 Â·gc.time:            6426,000 ms

Iteration   2: 344208,000 ops/s
                 Â·gc.alloc.rate:      5974,307 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           526,000 counts
                 Â·gc.time:            6079,000 ms

Iteration   3: 322255,391 ops/s
                 Â·gc.alloc.rate:      5593,273 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           505,000 counts
                 Â·gc.time:            5969,000 ms

Iteration   4: 310568,546 ops/s
                 Â·gc.alloc.rate:      5390,423 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           489,000 counts
                 Â·gc.time:            6259,000 ms

Iteration   5: 307693,717 ops/s
                 Â·gc.alloc.rate:      5340,522 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           487,000 counts
                 Â·gc.time:            6019,000 ms


# Run progress: 53,33% complete, ETA 00:12:12
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
326694,824 ops/s
# Warmup Iteration   2: 327024,560 ops/s
# Warmup Iteration   3: 312225,839 ops/s
# Warmup Iteration   4: 325842,701 ops/s
# Warmup Iteration   5: 309807,119 ops/s
Iteration   1: 320995,688 ops/s
                 Â·gc.alloc.rate:      5571,421 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           495,000 counts
                 Â·gc.time:            6274,000 ms

Iteration   2: 314343,137 ops/s
                 Â·gc.alloc.rate:      5455,952 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           499,000 counts
                 Â·gc.time:            5990,000 ms

Iteration   3: 341051,304 ops/s
                 Â·gc.alloc.rate:      5919,510 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           530,000 counts
                 Â·gc.time:            6079,000 ms

Iteration   4: 321895,781 ops/s
                 Â·gc.alloc.rate:      5587,042 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           509,000 counts
                 Â·gc.time:            6257,000 ms

Iteration   5: 327435,354 ops/s
                 Â·gc.alloc.rate:      5683,170 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           514,000 counts
                 Â·gc.time:            6232,000 ms


# Run progress: 60,00% complete, ETA 00:10:27
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
339090,530 ops/s
# Warmup Iteration   2: 324024,279 ops/s
# Warmup Iteration   3: 307118,303 ops/s
# Warmup Iteration   4: 316590,210 ops/s
# Warmup Iteration   5: 333373,216 ops/s
Iteration   1: 309988,091 ops/s
                 Â·gc.alloc.rate:      5380,357 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           494,000 counts
                 Â·gc.time:            6356,000 ms

Iteration   2: 325824,951 ops/s
                 Â·gc.alloc.rate:      5655,240 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           502,000 counts
                 Â·gc.time:            6218,000 ms

Iteration   3: 312478,165 ops/s
                 Â·gc.alloc.rate:      5423,580 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           498,000 counts
                 Â·gc.time:            6075,000 ms

Iteration   4: 318557,131 ops/s
                 Â·gc.alloc.rate:      5529,077 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           500,000 counts
                 Â·gc.time:            6159,000 ms

Iteration   5: 317836,544 ops/s
                 Â·gc.alloc.rate:      5516,566 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           513,000 counts
                 Â·gc.time:            6374,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc":
  323659,760 Â±(99.9%) 7066,285 ops/s [Average]
  (min, avg, max) = (307693,717, 323659,760, 344208,000), stdev = 9433,288
  CI (99.9%): [316593,476, 330726,045] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate":
  5617,651 Â±(99.9%) 122,649 MB/sec [Average]
  (min, avg, max) = (5340,522, 5617,651, 5974,307), stdev = 163,733
  CI (99.9%): [5495,003, 5740,300] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm":
  18200,000 Â±(99.9%) 0,001 B/op [Average]
  (min, avg, max) = (18200,000, 18200,000, 18200,000), stdev = 0,001
  CI (99.9%): [18200,000, 18200,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.count":
  12698,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (487,000, 507,920, 530,000), stdev = 11,611
  CI (99.9%): [12698,000, 12698,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.time":
  154441,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (5969,000, 6177,640, 6426,000), stdev = 122,855
  CI (99.9%): [154441,000, 154441,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc
# Parameters: (percentageOfRetainedHeap = P_75)

# Run progress: 66,67% complete, ETA 00:08:41
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
219677,740 ops/s
# Warmup Iteration   2: 217204,853 ops/s
# Warmup Iteration   3: 218085,467 ops/s
# Warmup Iteration   4: 224095,812 ops/s
# Warmup Iteration   5: 223477,298 ops/s
Iteration   1: 223144,068 ops/s
                 Â·gc.alloc.rate:      3873,045 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           557,000 counts
                 Â·gc.time:            7394,000 ms

Iteration   2: 220041,242 ops/s
                 Â·gc.alloc.rate:      3819,184 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           551,000 counts
                 Â·gc.time:            7231,000 ms

Iteration   3: 225607,778 ops/s
                 Â·gc.alloc.rate:      3915,799 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           564,000 counts
                 Â·gc.time:            7478,000 ms

Iteration   4: 222815,585 ops/s
                 Â·gc.alloc.rate:      3867,330 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           553,000 counts
                 Â·gc.time:            7209,000 ms

Iteration   5: 218585,723 ops/s
                 Â·gc.alloc.rate:      3793,905 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           567,000 counts
                 Â·gc.time:            7499,000 ms


# Run progress: 73,33% complete, ETA 00:06:56
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
222590,518 ops/s
# Warmup Iteration   2: 224888,792 ops/s
# Warmup Iteration   3: 225785,023 ops/s
# Warmup Iteration   4: 223023,522 ops/s
# Warmup Iteration   5: 220211,415 ops/s
Iteration   1: 217442,062 ops/s
                 Â·gc.alloc.rate:      3774,069 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           557,000 counts
                 Â·gc.time:            7289,000 ms

Iteration   2: 223871,477 ops/s
                 Â·gc.alloc.rate:      3885,659 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           552,000 counts
                 Â·gc.time:            7216,000 ms

Iteration   3: 223871,719 ops/s
                 Â·gc.alloc.rate:      3885,665 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           572,000 counts
                 Â·gc.time:            7539,000 ms

Iteration   4: 224191,707 ops/s
                 Â·gc.alloc.rate:      3891,222 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           564,000 counts
                 Â·gc.time:            7442,000 ms

Iteration   5: 224139,166 ops/s
                 Â·gc.alloc.rate:      3890,296 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           562,000 counts
                 Â·gc.time:            7386,000 ms


# Run progress: 80,00% complete, ETA 00:05:12
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
222321,027 ops/s
# Warmup Iteration   2: 227906,750 ops/s
# Warmup Iteration   3: 224457,831 ops/s
# Warmup Iteration   4: 224636,213 ops/s
# Warmup Iteration   5: 218944,118 ops/s
Iteration   1: 224255,709 ops/s
                 Â·gc.alloc.rate:      3892,332 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           554,000 counts
                 Â·gc.time:            7191,000 ms

Iteration   2: 216446,563 ops/s
                 Â·gc.alloc.rate:      3756,779 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           556,000 counts
                 Â·gc.time:            7304,000 ms

Iteration   3: 224674,682 ops/s
                 Â·gc.alloc.rate:      3899,598 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           568,000 counts
                 Â·gc.time:            7424,000 ms

Iteration   4: 222909,115 ops/s
                 Â·gc.alloc.rate:      3868,957 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           563,000 counts
                 Â·gc.time:            7487,000 ms

Iteration   5: 220410,166 ops/s
                 Â·gc.alloc.rate:      3825,572 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           565,000 counts
                 Â·gc.time:            7442,000 ms


# Run progress: 86,67% complete, ETA 00:03:28
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
223358,074 ops/s
# Warmup Iteration   2: 225521,579 ops/s
# Warmup Iteration   3: 227770,156 ops/s
# Warmup Iteration   4: 223604,463 ops/s
# Warmup Iteration   5: 218872,261 ops/s
Iteration   1: 223173,443 ops/s
                 Â·gc.alloc.rate:      3873,555 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           562,000 counts
                 Â·gc.time:            7363,000 ms

Iteration   2: 218905,791 ops/s
                 Â·gc.alloc.rate:      3799,481 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           548,000 counts
                 Â·gc.time:            7180,000 ms

Iteration   3: 224194,343 ops/s
                 Â·gc.alloc.rate:      3891,269 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           566,000 counts
                 Â·gc.time:            7406,000 ms

Iteration   4: 224359,217 ops/s
                 Â·gc.alloc.rate:      3894,127 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           566,000 counts
                 Â·gc.time:            7359,000 ms

Iteration   5: 223453,869 ops/s
                 Â·gc.alloc.rate:      3878,401 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           572,000 counts
                 Â·gc.time:            7433,000 ms


# Run progress: 93,33% complete, ETA 00:01:43
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
217830,685 ops/s
# Warmup Iteration   2: 222971,114 ops/s
# Warmup Iteration   3: 222048,183 ops/s
# Warmup Iteration   4: 221655,183 ops/s
# Warmup Iteration   5: 223816,231 ops/s
Iteration   1: 222137,224 ops/s
                 Â·gc.alloc.rate:      3855,569 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           561,000 counts
                 Â·gc.time:            7347,000 ms

Iteration   2: 227873,152 ops/s
                 Â·gc.alloc.rate:      3955,113 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           568,000 counts
                 Â·gc.time:            7328,000 ms

Iteration   3: 219369,341 ops/s
                 Â·gc.alloc.rate:      3807,521 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           558,000 counts
                 Â·gc.time:            7422,000 ms

Iteration   4: 223048,770 ops/s
                 Â·gc.alloc.rate:      3871,387 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           573,000 counts
                 Â·gc.time:            7435,000 ms

Iteration   5: 229229,166 ops/s
                 Â·gc.alloc.rate:      3978,633 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           564,000 counts
                 Â·gc.time:            7310,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc":
  222726,043 Â±(99.9%) 2263,527 ops/s [Average]
  (min, avg, max) = (216446,563, 222726,043, 229229,166), stdev = 3021,744
  CI (99.9%): [220462,516, 224989,570] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate":
  3865,779 Â±(99.9%) 39,287 MB/sec [Average]
  (min, avg, max) = (3756,779, 3865,779, 3978,633), stdev = 52,447
  CI (99.9%): [3826,492, 3905,065] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm":
  18200,000 Â±(99.9%) 0,001 B/op [Average]
  (min, avg, max) = (18200,000, 18200,000, 18200,000), stdev = 0,001
  CI (99.9%): [18200,000, 18200,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.count":
  14043,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (548,000, 561,720, 573,000), stdev = 6,877
  CI (99.9%): [14043,000, 14043,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.time":
  184114,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (7180,000, 7364,560, 7539,000), stdev = 102,104
  CI (99.9%): [184114,000, 184114,000] (assumes normal distribution)


# Run complete. Total time: 00:25:59

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                                     (percentageOfRetainedHeap)   Mode  Cnt       Score      Error   Units
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc                                            P_25  thrpt   25  280916,668 Â± 7015,393   ops/s
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate                             P_25  thrpt   25    4875,762 Â±  121,764  MB/sec
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm                        P_25  thrpt   25   18200,000 Â±    0,001    B/op
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.count                                  P_25  thrpt   25    6649,000             counts
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.time                                   P_25  thrpt   25  178896,000                 ms
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc                                            P_50  thrpt   25  323659,760 Â± 7066,285   ops/s
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate                             P_50  thrpt   25    5617,651 Â±  122,649  MB/sec
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm                        P_50  thrpt   25   18200,000 Â±    0,001    B/op
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.count                                  P_50  thrpt   25   12698,000             counts
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.time                                   P_50  thrpt   25  154441,000                 ms
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc                                            P_75  thrpt   25  222726,043 Â± 2263,527   ops/s
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate                             P_75  thrpt   25    3865,779 Â±   39,287  MB/sec
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm                        P_75  thrpt   25   18200,000 Â±    0,001    B/op
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.count                                  P_75  thrpt   25   14043,000             counts
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.time                                   P_75  thrpt   25  184114,000                 ms

Benchmark result is saved to results/jdk-17/arm64/openjdk-hotspot-vm/HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark_g1GC_1thread.csv

Running HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark benchmark ...
java  -jar benchmarks/target/benchmarks.jar .*HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.* -foe true -wi 5 -w 10 -i 5 -r 10 -f 5 -rf csv -rff results/jdk-17/arm64/openjdk-hotspot-vm/HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark_g1GC_2threads.csv -t 2 -prof gc -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseG1GC"

# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc
# Parameters: (percentageOfRetainedHeap = P_25)

# Run progress: 0,00% complete, ETA 00:25:00
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
413108,013 ops/s
# Warmup Iteration   2: 426251,477 ops/s
# Warmup Iteration   3: 422432,589 ops/s
# Warmup Iteration   4: 424980,954 ops/s
# Warmup Iteration   5: 429493,848 ops/s
Iteration   1: 412676,160 ops/s
                 Â·gc.alloc.rate:      7162,673 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           467,000 counts
                 Â·gc.time:            6932,000 ms

Iteration   2: 436983,248 ops/s
                 Â·gc.alloc.rate:      7584,629 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           504,000 counts
                 Â·gc.time:            6754,000 ms

Iteration   3: 433539,216 ops/s
                 Â·gc.alloc.rate:      7524,768 MB/sec
                 Â·gc.alloc.rate.norm: 18200,003 B/op
                 Â·gc.count:           492,000 counts
                 Â·gc.time:            6758,000 ms

Iteration   4: 416707,925 ops/s
                 Â·gc.alloc.rate:      7232,623 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           470,000 counts
                 Â·gc.time:            6949,000 ms

Iteration   5: 408254,043 ops/s
                 Â·gc.alloc.rate:      7084,804 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           459,000 counts
                 Â·gc.time:            6973,000 ms


# Run progress: 6,67% complete, ETA 00:24:00
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
453935,075 ops/s
# Warmup Iteration   2: 457221,693 ops/s
# Warmup Iteration   3: 406470,014 ops/s
# Warmup Iteration   4: 400882,234 ops/s
# Warmup Iteration   5: 418161,985 ops/s
Iteration   1: 440378,756 ops/s
                 Â·gc.alloc.rate:      7643,495 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           510,000 counts
                 Â·gc.time:            6802,000 ms

Iteration   2: 430522,455 ops/s
                 Â·gc.alloc.rate:      7472,428 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           486,000 counts
                 Â·gc.time:            6780,000 ms

Iteration   3: 456410,568 ops/s
                 Â·gc.alloc.rate:      7921,740 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           506,000 counts
                 Â·gc.time:            6607,000 ms

Iteration   4: 434471,829 ops/s
                 Â·gc.alloc.rate:      7540,831 MB/sec
                 Â·gc.alloc.rate.norm: 18200,003 B/op
                 Â·gc.count:           508,000 counts
                 Â·gc.time:            6753,000 ms

Iteration   5: 449378,814 ops/s
                 Â·gc.alloc.rate:      7799,643 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           497,000 counts
                 Â·gc.time:            6690,000 ms


# Run progress: 13,33% complete, ETA 00:22:41
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
446846,344 ops/s
# Warmup Iteration   2: 448487,514 ops/s
# Warmup Iteration   3: 413433,500 ops/s
# Warmup Iteration   4: 405403,153 ops/s
# Warmup Iteration   5: 435047,853 ops/s
Iteration   1: 428805,001 ops/s
                 Â·gc.alloc.rate:      7442,611 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           493,000 counts
                 Â·gc.time:            6776,000 ms

Iteration   2: 410872,134 ops/s
                 Â·gc.alloc.rate:      7131,354 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           477,000 counts
                 Â·gc.time:            6924,000 ms

Iteration   3: 426523,690 ops/s
                 Â·gc.alloc.rate:      7403,002 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           485,000 counts
                 Â·gc.time:            6822,000 ms

Iteration   4: 423431,643 ops/s
                 Â·gc.alloc.rate:      7349,200 MB/sec
                 Â·gc.alloc.rate.norm: 18200,003 B/op
                 Â·gc.count:           475,000 counts
                 Â·gc.time:            6881,000 ms

Iteration   5: 446721,459 ops/s
                 Â·gc.alloc.rate:      7753,522 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           511,000 counts
                 Â·gc.time:            6731,000 ms


# Run progress: 20,00% complete, ETA 00:21:01
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
432424,994 ops/s
# Warmup Iteration   2: 392845,204 ops/s
# Warmup Iteration   3: 452684,134 ops/s
# Warmup Iteration   4: 423527,457 ops/s
# Warmup Iteration   5: 418747,071 ops/s
Iteration   1: 407722,395 ops/s
                 Â·gc.alloc.rate:      7076,694 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           480,000 counts
                 Â·gc.time:            7092,000 ms

Iteration   2: 440452,213 ops/s
                 Â·gc.alloc.rate:      7644,764 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           503,000 counts
                 Â·gc.time:            6726,000 ms

Iteration   3: 411976,602 ops/s
                 Â·gc.alloc.rate:      7150,534 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           480,000 counts
                 Â·gc.time:            6953,000 ms

Iteration   4: 415699,506 ops/s
                 Â·gc.alloc.rate:      7215,058 MB/sec
                 Â·gc.alloc.rate.norm: 18200,003 B/op
                 Â·gc.count:           488,000 counts
                 Â·gc.time:            6939,000 ms

Iteration   5: 434463,959 ops/s
                 Â·gc.alloc.rate:      7540,821 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           505,000 counts
                 Â·gc.time:            6901,000 ms


# Run progress: 26,67% complete, ETA 00:19:20
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
453873,570 ops/s
# Warmup Iteration   2: 426790,530 ops/s
# Warmup Iteration   3: 428689,392 ops/s
# Warmup Iteration   4: 404032,418 ops/s
# Warmup Iteration   5: 435939,378 ops/s
Iteration   1: 396833,185 ops/s
                 Â·gc.alloc.rate:      6887,664 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           452,000 counts
                 Â·gc.time:            7035,000 ms

Iteration   2: 417215,783 ops/s
                 Â·gc.alloc.rate:      7241,446 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           473,000 counts
                 Â·gc.time:            6857,000 ms

Iteration   3: 432404,222 ops/s
                 Â·gc.alloc.rate:      7505,087 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           480,000 counts
                 Â·gc.time:            6781,000 ms

Iteration   4: 428529,644 ops/s
                 Â·gc.alloc.rate:      7437,668 MB/sec
                 Â·gc.alloc.rate.norm: 18200,003 B/op
                 Â·gc.count:           504,000 counts
                 Â·gc.time:            6877,000 ms

Iteration   5: 436427,037 ops/s
                 Â·gc.alloc.rate:      7575,045 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           499,000 counts
                 Â·gc.time:            6751,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc":
  427096,060 Â±(99.9%) 10995,230 ops/s [Average]
  (min, avg, max) = (396833,185, 427096,060, 456410,568), stdev = 14678,318
  CI (99.9%): [416100,829, 438091,290] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate":
  7412,884 Â±(99.9%) 190,885 MB/sec [Average]
  (min, avg, max) = (6887,664, 7412,884, 7921,740), stdev = 254,826
  CI (99.9%): [7221,999, 7603,770] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm":
  18200,001 Â±(99.9%) 0,001 B/op [Average]
  (min, avg, max) = (18200,000, 18200,001, 18200,003), stdev = 0,001
  CI (99.9%): [18200,000, 18200,002] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.count":
  12204,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (452,000, 488,160, 511,000), stdev = 16,617
  CI (99.9%): [12204,000, 12204,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.time":
  171044,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (6607,000, 6841,760, 7092,000), stdev = 115,541
  CI (99.9%): [171044,000, 171044,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc
# Parameters: (percentageOfRetainedHeap = P_50)

# Run progress: 33,33% complete, ETA 00:17:36
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
363426,059 ops/s
# Warmup Iteration   2: 353622,896 ops/s
# Warmup Iteration   3: 352200,912 ops/s
# Warmup Iteration   4: 350544,366 ops/s
# Warmup Iteration   5: 360040,456 ops/s
Iteration   1: 363079,008 ops/s
                 Â·gc.alloc.rate:      6301,857 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           586,000 counts
                 Â·gc.time:            7018,000 ms

Iteration   2: 358085,090 ops/s
                 Â·gc.alloc.rate:      6215,160 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           584,000 counts
                 Â·gc.time:            7091,000 ms

Iteration   3: 352439,927 ops/s
                 Â·gc.alloc.rate:      6117,249 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           564,000 counts
                 Â·gc.time:            7140,000 ms

Iteration   4: 341860,785 ops/s
                 Â·gc.alloc.rate:      5933,460 MB/sec
                 Â·gc.alloc.rate.norm: 18200,003 B/op
                 Â·gc.count:           554,000 counts
                 Â·gc.time:            7183,000 ms

Iteration   5: 345787,559 ops/s
                 Â·gc.alloc.rate:      6001,684 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           565,000 counts
                 Â·gc.time:            7180,000 ms


# Run progress: 40,00% complete, ETA 00:15:52
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
347173,018 ops/s
# Warmup Iteration   2: 355706,941 ops/s
# Warmup Iteration   3: 363016,835 ops/s
# Warmup Iteration   4: 339805,992 ops/s
# Warmup Iteration   5: 352341,620 ops/s
Iteration   1: 349491,745 ops/s
                 Â·gc.alloc.rate:      6066,012 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           569,000 counts
                 Â·gc.time:            7075,000 ms

Iteration   2: 360922,378 ops/s
                 Â·gc.alloc.rate:      6264,359 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           572,000 counts
                 Â·gc.time:            7051,000 ms

Iteration   3: 356618,027 ops/s
                 Â·gc.alloc.rate:      6189,667 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           575,000 counts
                 Â·gc.time:            7110,000 ms

Iteration   4: 361320,632 ops/s
                 Â·gc.alloc.rate:      6271,210 MB/sec
                 Â·gc.alloc.rate.norm: 18200,003 B/op
                 Â·gc.count:           588,000 counts
                 Â·gc.time:            7073,000 ms

Iteration   5: 360499,241 ops/s
                 Â·gc.alloc.rate:      6257,036 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           586,000 counts
                 Â·gc.time:            7186,000 ms


# Run progress: 46,67% complete, ETA 00:14:06
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
378013,027 ops/s
# Warmup Iteration   2: 358043,203 ops/s
# Warmup Iteration   3: 349269,740 ops/s
# Warmup Iteration   4: 365138,795 ops/s
# Warmup Iteration   5: 374480,621 ops/s
Iteration   1: 364747,906 ops/s
                 Â·gc.alloc.rate:      6330,831 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           591,000 counts
                 Â·gc.time:            7044,000 ms

Iteration   2: 350688,326 ops/s
                 Â·gc.alloc.rate:      6086,760 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           563,000 counts
                 Â·gc.time:            7160,000 ms

Iteration   3: 351083,333 ops/s
                 Â·gc.alloc.rate:      6093,712 MB/sec
                 Â·gc.alloc.rate.norm: 18200,003 B/op
                 Â·gc.count:           574,000 counts
                 Â·gc.time:            7201,000 ms

Iteration   4: 351755,685 ops/s
                 Â·gc.alloc.rate:      6105,322 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           578,000 counts
                 Â·gc.time:            7287,000 ms

Iteration   5: 355536,233 ops/s
                 Â·gc.alloc.rate:      6170,828 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           564,000 counts
                 Â·gc.time:            7164,000 ms


# Run progress: 53,33% complete, ETA 00:12:17
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
361116,994 ops/s
# Warmup Iteration   2: 332211,365 ops/s
# Warmup Iteration   3: 347146,903 ops/s
# Warmup Iteration   4: 370639,039 ops/s
# Warmup Iteration   5: 342845,418 ops/s
Iteration   1: 358585,034 ops/s
                 Â·gc.alloc.rate:      6223,865 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           565,000 counts
                 Â·gc.time:            7117,000 ms

Iteration   2: 365199,773 ops/s
                 Â·gc.alloc.rate:      6338,631 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           605,000 counts
                 Â·gc.time:            7139,000 ms

Iteration   3: 345683,204 ops/s
                 Â·gc.alloc.rate:      5999,833 MB/sec
                 Â·gc.alloc.rate.norm: 18200,003 B/op
                 Â·gc.count:           553,000 counts
                 Â·gc.time:            7241,000 ms

Iteration   4: 349534,395 ops/s
                 Â·gc.alloc.rate:      6066,725 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           566,000 counts
                 Â·gc.time:            7243,000 ms

Iteration   5: 367508,151 ops/s
                 Â·gc.alloc.rate:      6378,753 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           581,000 counts
                 Â·gc.time:            7086,000 ms


# Run progress: 60,00% complete, ETA 00:10:29
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
375526,670 ops/s
# Warmup Iteration   2: 356120,203 ops/s
# Warmup Iteration   3: 372524,296 ops/s
# Warmup Iteration   4: 353172,304 ops/s
# Warmup Iteration   5: 347366,810 ops/s
Iteration   1: 341925,523 ops/s
                 Â·gc.alloc.rate:      5934,703 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           549,000 counts
                 Â·gc.time:            7256,000 ms

Iteration   2: 356296,648 ops/s
                 Â·gc.alloc.rate:      6184,086 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           570,000 counts
                 Â·gc.time:            7114,000 ms

Iteration   3: 350465,676 ops/s
                 Â·gc.alloc.rate:      6082,847 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           576,000 counts
                 Â·gc.time:            7137,000 ms

Iteration   4: 350970,003 ops/s
                 Â·gc.alloc.rate:      6091,544 MB/sec
                 Â·gc.alloc.rate.norm: 18200,003 B/op
                 Â·gc.count:           564,000 counts
                 Â·gc.time:            7100,000 ms

Iteration   5: 352485,056 ops/s
                 Â·gc.alloc.rate:      6118,000 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           577,000 counts
                 Â·gc.time:            7154,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc":
  354502,774 Â±(99.9%) 5332,924 ops/s [Average]
  (min, avg, max) = (341860,785, 354502,774, 367508,151), stdev = 7119,301
  CI (99.9%): [349169,849, 359835,698] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate":
  6152,965 Â±(99.9%) 92,569 MB/sec [Average]
  (min, avg, max) = (5933,460, 6152,965, 6378,753), stdev = 123,578
  CI (99.9%): [6060,396, 6245,535] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm":
  18200,001 Â±(99.9%) 0,001 B/op [Average]
  (min, avg, max) = (18200,000, 18200,001, 18200,003), stdev = 0,001
  CI (99.9%): [18200,000, 18200,002] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.count":
  14319,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (549,000, 572,760, 605,000), stdev = 12,962
  CI (99.9%): [14319,000, 14319,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.time":
  178550,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (7018,000, 7142,000, 7287,000), stdev = 69,522
  CI (99.9%): [178550,000, 178550,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc
# Parameters: (percentageOfRetainedHeap = P_75)

# Run progress: 66,67% complete, ETA 00:08:43
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
232466,823 ops/s
# Warmup Iteration   2: 228806,146 ops/s
# Warmup Iteration   3: 229451,316 ops/s
# Warmup Iteration   4: 236879,239 ops/s
# Warmup Iteration   5: 230509,293 ops/s
Iteration   1: 234296,170 ops/s
                 Â·gc.alloc.rate:      4066,607 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           619,000 counts
                 Â·gc.time:            8172,000 ms

Iteration   2: 230385,145 ops/s
                 Â·gc.alloc.rate:      3998,749 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           603,000 counts
                 Â·gc.time:            8136,000 ms

Iteration   3: 232327,883 ops/s
                 Â·gc.alloc.rate:      4032,443 MB/sec
                 Â·gc.alloc.rate.norm: 18200,005 B/op
                 Â·gc.count:           613,000 counts
                 Â·gc.time:            8101,000 ms

Iteration   4: 234700,478 ops/s
                 Â·gc.alloc.rate:      4073,613 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           622,000 counts
                 Â·gc.time:            8163,000 ms

Iteration   5: 232560,536 ops/s
                 Â·gc.alloc.rate:      4036,468 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           597,000 counts
                 Â·gc.time:            8125,000 ms


# Run progress: 73,33% complete, ETA 00:06:58
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
229856,289 ops/s
# Warmup Iteration   2: 231161,673 ops/s
# Warmup Iteration   3: 235086,943 ops/s
# Warmup Iteration   4: 231143,101 ops/s
# Warmup Iteration   5: 234050,374 ops/s
Iteration   1: 230713,877 ops/s
                 Â·gc.alloc.rate:      4004,552 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           610,000 counts
                 Â·gc.time:            8138,000 ms

Iteration   2: 235012,195 ops/s
                 Â·gc.alloc.rate:      4079,033 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           621,000 counts
                 Â·gc.time:            8154,000 ms

Iteration   3: 230858,443 ops/s
                 Â·gc.alloc.rate:      4006,933 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           605,000 counts
                 Â·gc.time:            8152,000 ms

Iteration   4: 226891,794 ops/s
                 Â·gc.alloc.rate:      3938,016 MB/sec
                 Â·gc.alloc.rate.norm: 18200,005 B/op
                 Â·gc.count:           600,000 counts
                 Â·gc.time:            8126,000 ms

Iteration   5: 234368,786 ops/s
                 Â·gc.alloc.rate:      4067,834 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           607,000 counts
                 Â·gc.time:            8105,000 ms


# Run progress: 80,00% complete, ETA 00:05:13
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
236812,649 ops/s
# Warmup Iteration   2: 236577,327 ops/s
# Warmup Iteration   3: 232786,402 ops/s
# Warmup Iteration   4: 235357,160 ops/s
# Warmup Iteration   5: 225768,469 ops/s
Iteration   1: 235413,268 ops/s
                 Â·gc.alloc.rate:      4086,038 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           609,000 counts
                 Â·gc.time:            8076,000 ms

Iteration   2: 231548,760 ops/s
                 Â·gc.alloc.rate:      4018,911 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           618,000 counts
                 Â·gc.time:            8118,000 ms

Iteration   3: 229403,170 ops/s
                 Â·gc.alloc.rate:      3981,709 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           618,000 counts
                 Â·gc.time:            8203,000 ms

Iteration   4: 232154,798 ops/s
                 Â·gc.alloc.rate:      4029,414 MB/sec
                 Â·gc.alloc.rate.norm: 18200,005 B/op
                 Â·gc.count:           620,000 counts
                 Â·gc.time:            8113,000 ms

Iteration   5: 235970,849 ops/s
                 Â·gc.alloc.rate:      4095,784 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           613,000 counts
                 Â·gc.time:            8087,000 ms


# Run progress: 86,67% complete, ETA 00:03:29
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
237479,700 ops/s
# Warmup Iteration   2: 234528,431 ops/s
# Warmup Iteration   3: 234831,426 ops/s
# Warmup Iteration   4: 231496,102 ops/s
# Warmup Iteration   5: 234067,921 ops/s
Iteration   1: 238068,213 ops/s
                 Â·gc.alloc.rate:      4132,164 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           626,000 counts
                 Â·gc.time:            8148,000 ms

Iteration   2: 237264,347 ops/s
                 Â·gc.alloc.rate:      4118,157 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           628,000 counts
                 Â·gc.time:            8101,000 ms

Iteration   3: 241986,093 ops/s
                 Â·gc.alloc.rate:      4200,063 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           627,000 counts
                 Â·gc.time:            8026,000 ms

Iteration   4: 231682,506 ops/s
                 Â·gc.alloc.rate:      4021,173 MB/sec
                 Â·gc.alloc.rate.norm: 18200,005 B/op
                 Â·gc.count:           622,000 counts
                 Â·gc.time:            8146,000 ms

Iteration   5: 233707,044 ops/s
                 Â·gc.alloc.rate:      4055,797 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           620,000 counts
                 Â·gc.time:            8128,000 ms


# Run progress: 93,33% complete, ETA 00:01:44
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
234515,101 ops/s
# Warmup Iteration   2: 233638,901 ops/s
# Warmup Iteration   3: 234768,289 ops/s
# Warmup Iteration   4: 235526,482 ops/s
# Warmup Iteration   5: 236468,698 ops/s
Iteration   1: 235362,120 ops/s
                 Â·gc.alloc.rate:      4085,106 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           607,000 counts
                 Â·gc.time:            8074,000 ms

Iteration   2: 237501,251 ops/s
                 Â·gc.alloc.rate:      4122,294 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           621,000 counts
                 Â·gc.time:            8110,000 ms

Iteration   3: 232178,993 ops/s
                 Â·gc.alloc.rate:      4029,915 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           611,000 counts
                 Â·gc.time:            8107,000 ms

Iteration   4: 234835,855 ops/s
                 Â·gc.alloc.rate:      4075,859 MB/sec
                 Â·gc.alloc.rate.norm: 18200,005 B/op
                 Â·gc.count:           613,000 counts
                 Â·gc.time:            8102,000 ms

Iteration   5: 228422,169 ops/s
                 Â·gc.alloc.rate:      3964,223 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           606,000 counts
                 Â·gc.time:            8164,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc":
  233504,590 Â±(99.9%) 2497,745 ops/s [Average]
  (min, avg, max) = (226891,794, 233504,590, 241986,093), stdev = 3334,419
  CI (99.9%): [231006,844, 236002,335] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate":
  4052,834 Â±(99.9%) 43,380 MB/sec [Average]
  (min, avg, max) = (3938,016, 4052,834, 4200,063), stdev = 57,911
  CI (99.9%): [4009,454, 4096,215] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm":
  18200,001 Â±(99.9%) 0,001 B/op [Average]
  (min, avg, max) = (18200,000, 18200,001, 18200,005), stdev = 0,002
  CI (99.9%): [18200,000, 18200,003] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.count":
  15356,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (597,000, 614,240, 628,000), stdev = 8,575
  CI (99.9%): [15356,000, 15356,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.time":
  203075,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (8026,000, 8123,000, 8203,000), stdev = 37,119
  CI (99.9%): [203075,000, 203075,000] (assumes normal distribution)


# Run complete. Total time: 00:26:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                                     (percentageOfRetainedHeap)   Mode  Cnt       Score       Error   Units
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc                                            P_25  thrpt   25  427096,060 Â± 10995,230   ops/s
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate                             P_25  thrpt   25    7412,884 Â±   190,885  MB/sec
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm                        P_25  thrpt   25   18200,001 Â±     0,001    B/op
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.count                                  P_25  thrpt   25   12204,000              counts
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.time                                   P_25  thrpt   25  171044,000                  ms
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc                                            P_50  thrpt   25  354502,774 Â±  5332,924   ops/s
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate                             P_50  thrpt   25    6152,965 Â±    92,569  MB/sec
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm                        P_50  thrpt   25   18200,001 Â±     0,001    B/op
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.count                                  P_50  thrpt   25   14319,000              counts
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.time                                   P_50  thrpt   25  178550,000                  ms
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc                                            P_75  thrpt   25  233504,590 Â±  2497,745   ops/s
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate                             P_75  thrpt   25    4052,834 Â±    43,380  MB/sec
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm                        P_75  thrpt   25   18200,001 Â±     0,001    B/op
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.count                                  P_75  thrpt   25   15356,000              counts
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.time                                   P_75  thrpt   25  203075,000                  ms

Benchmark result is saved to results/jdk-17/arm64/openjdk-hotspot-vm/HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark_g1GC_2threads.csv

Running HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark benchmark ...
java  -jar benchmarks/target/benchmarks.jar .*HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.* -foe true -wi 5 -w 10 -i 5 -r 10 -f 5 -rf csv -rff results/jdk-17/arm64/openjdk-hotspot-vm/HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark_shenandoahGC_1thread.csv -t 1 -prof gc -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseShenandoahGC"

# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseShenandoahGC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc
# Parameters: (percentageOfRetainedHeap = P_25)

# Run progress: 0,00% complete, ETA 00:25:00
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
926303,888 ops/s
# Warmup Iteration   2: 903933,160 ops/s
# Warmup Iteration   3: 949652,482 ops/s
# Warmup Iteration   4: 950364,422 ops/s
# Warmup Iteration   5: 948559,183 ops/s
Iteration   1: 950367,675 ops/s
                 Â·gc.alloc.rate:      16495,184 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           393,000 counts
                 Â·gc.time:            5833,000 ms

Iteration   2: 955427,164 ops/s
                 Â·gc.alloc.rate:      16582,999 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           396,000 counts
                 Â·gc.time:            5852,000 ms

Iteration   3: 955679,409 ops/s
                 Â·gc.alloc.rate:      16587,388 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           399,000 counts
                 Â·gc.time:            5921,000 ms

Iteration   4: 954760,722 ops/s
                 Â·gc.alloc.rate:      16571,434 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           397,000 counts
                 Â·gc.time:            5854,000 ms

Iteration   5: 955476,040 ops/s
                 Â·gc.alloc.rate:      16583,801 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           400,000 counts
                 Â·gc.time:            5925,000 ms


# Run progress: 6,67% complete, ETA 00:23:56
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
946073,993 ops/s
# Warmup Iteration   2: 960208,194 ops/s
# Warmup Iteration   3: 977774,845 ops/s
# Warmup Iteration   4: 981255,229 ops/s
# Warmup Iteration   5: 975805,428 ops/s
Iteration   1: 982336,975 ops/s
                 Â·gc.alloc.rate:      17050,068 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           407,000 counts
                 Â·gc.time:            5893,000 ms

Iteration   2: 983111,947 ops/s
                 Â·gc.alloc.rate:      17063,551 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           408,000 counts
                 Â·gc.time:            5875,000 ms

Iteration   3: 983785,680 ops/s
                 Â·gc.alloc.rate:      17075,206 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           408,000 counts
                 Â·gc.time:            5876,000 ms

Iteration   4: 978311,352 ops/s
                 Â·gc.alloc.rate:      16980,184 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           405,000 counts
                 Â·gc.time:            5843,000 ms

Iteration   5: 982175,670 ops/s
                 Â·gc.alloc.rate:      17047,206 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           408,000 counts
                 Â·gc.time:            5889,000 ms


# Run progress: 13,33% complete, ETA 00:22:13
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
952878,686 ops/s
# Warmup Iteration   2: 941973,732 ops/s
# Warmup Iteration   3: 985260,021 ops/s
# Warmup Iteration   4: 983819,359 ops/s
# Warmup Iteration   5: 984224,048 ops/s
Iteration   1: 982335,927 ops/s
                 Â·gc.alloc.rate:      17050,086 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           408,000 counts
                 Â·gc.time:            5887,000 ms

Iteration   2: 985694,902 ops/s
                 Â·gc.alloc.rate:      17108,397 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           408,000 counts
                 Â·gc.time:            5861,000 ms

Iteration   3: 981531,651 ops/s
                 Â·gc.alloc.rate:      17035,916 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           409,000 counts
                 Â·gc.time:            5923,000 ms

Iteration   4: 982618,512 ops/s
                 Â·gc.alloc.rate:      17054,854 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           408,000 counts
                 Â·gc.time:            5876,000 ms

Iteration   5: 984084,754 ops/s
                 Â·gc.alloc.rate:      17080,315 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           411,000 counts
                 Â·gc.time:            5913,000 ms


# Run progress: 20,00% complete, ETA 00:20:44
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
963202,050 ops/s
# Warmup Iteration   2: 966334,648 ops/s
# Warmup Iteration   3: 986057,830 ops/s
# Warmup Iteration   4: 984465,216 ops/s
# Warmup Iteration   5: 985467,924 ops/s
Iteration   1: 982384,695 ops/s
                 Â·gc.alloc.rate:      17050,903 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           404,000 counts
                 Â·gc.time:            5827,000 ms

Iteration   2: 984227,896 ops/s
                 Â·gc.alloc.rate:      17082,886 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           405,000 counts
                 Â·gc.time:            5804,000 ms

Iteration   3: 982318,596 ops/s
                 Â·gc.alloc.rate:      17049,740 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           407,000 counts
                 Â·gc.time:            5901,000 ms

Iteration   4: 983916,528 ops/s
                 Â·gc.alloc.rate:      17077,477 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           405,000 counts
                 Â·gc.time:            5813,000 ms

Iteration   5: 978651,464 ops/s
                 Â·gc.alloc.rate:      16986,072 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           407,000 counts
                 Â·gc.time:            5912,000 ms


# Run progress: 26,67% complete, ETA 00:19:06
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
970558,183 ops/s
# Warmup Iteration   2: 937216,570 ops/s
# Warmup Iteration   3: 984541,273 ops/s
# Warmup Iteration   4: 983712,147 ops/s
# Warmup Iteration   5: 980094,451 ops/s
Iteration   1: 984226,112 ops/s
                 Â·gc.alloc.rate:      17082,865 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           405,000 counts
                 Â·gc.time:            5826,000 ms

Iteration   2: 984202,631 ops/s
                 Â·gc.alloc.rate:      17082,386 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           408,000 counts
                 Â·gc.time:            5875,000 ms

Iteration   3: 969855,586 ops/s
                 Â·gc.alloc.rate:      16833,422 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           403,000 counts
                 Â·gc.time:            5890,000 ms

Iteration   4: 952819,244 ops/s
                 Â·gc.alloc.rate:      16537,727 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           394,000 counts
                 Â·gc.time:            5770,000 ms

Iteration   5: 951769,935 ops/s
                 Â·gc.alloc.rate:      16519,381 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           395,000 counts
                 Â·gc.time:            5813,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc":
  974082,843 Â±(99.9%) 9977,126 ops/s [Average]
  (min, avg, max) = (950367,675, 974082,843, 985694,902), stdev = 13319,178
  CI (99.9%): [964105,716, 984059,969] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate":
  16906,778 Â±(99.9%) 173,173 MB/sec [Average]
  (min, avg, max) = (16495,184, 16906,778, 17108,397), stdev = 231,180
  CI (99.9%): [16733,605, 17079,950] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm":
  18200,000 Â±(99.9%) 0,001 B/op [Average]
  (min, avg, max) = (18200,000, 18200,000, 18200,000), stdev = 0,001
  CI (99.9%): [18200,000, 18200,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.count":
  10098,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (393,000, 403,920, 411,000), stdev = 5,299
  CI (99.9%): [10098,000, 10098,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.time":
  146652,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (5770,000, 5866,080, 5925,000), stdev = 41,695
  CI (99.9%): [146652,000, 146652,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseShenandoahGC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc
# Parameters: (percentageOfRetainedHeap = P_50)

# Run progress: 33,33% complete, ETA 00:17:15
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
384754,953 ops/s
# Warmup Iteration   2: 385685,071 ops/s
# Warmup Iteration   3: 395233,508 ops/s
# Warmup Iteration   4: 395673,389 ops/s
# Warmup Iteration   5: 391536,462 ops/s
Iteration   1: 390065,173 ops/s
                 Â·gc.alloc.rate:      6770,233 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           224,000 counts
                 Â·gc.time:            7770,000 ms

Iteration   2: 389155,772 ops/s
                 Â·gc.alloc.rate:      6754,430 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           225,000 counts
                 Â·gc.time:            7771,000 ms

Iteration   3: 388172,859 ops/s
                 Â·gc.alloc.rate:      6737,353 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           224,000 counts
                 Â·gc.time:            7768,000 ms

Iteration   4: 390880,821 ops/s
                 Â·gc.alloc.rate:      6784,351 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           224,000 counts
                 Â·gc.time:            7780,000 ms

Iteration   5: 388291,146 ops/s
                 Â·gc.alloc.rate:      6739,390 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           228,000 counts
                 Â·gc.time:            7907,000 ms


# Run progress: 40,00% complete, ETA 00:15:35
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
381885,151 ops/s
# Warmup Iteration   2: 388118,667 ops/s
# Warmup Iteration   3: 391913,504 ops/s
# Warmup Iteration   4: 389476,566 ops/s
# Warmup Iteration   5: 392079,880 ops/s
Iteration   1: 392213,465 ops/s
                 Â·gc.alloc.rate:      6807,503 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           225,000 counts
                 Â·gc.time:            7767,000 ms

Iteration   2: 389981,024 ops/s
                 Â·gc.alloc.rate:      6768,738 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           220,000 counts
                 Â·gc.time:            7649,000 ms

Iteration   3: 390961,015 ops/s
                 Â·gc.alloc.rate:      6785,767 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           227,000 counts
                 Â·gc.time:            7894,000 ms

Iteration   4: 388194,910 ops/s
                 Â·gc.alloc.rate:      6737,735 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           225,000 counts
                 Â·gc.time:            7781,000 ms

Iteration   5: 384033,945 ops/s
                 Â·gc.alloc.rate:      6665,531 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           227,000 counts
                 Â·gc.time:            7907,000 ms


# Run progress: 46,67% complete, ETA 00:13:54
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
380949,268 ops/s
# Warmup Iteration   2: 387705,690 ops/s
# Warmup Iteration   3: 394416,906 ops/s
# Warmup Iteration   4: 395687,926 ops/s
# Warmup Iteration   5: 392457,235 ops/s
Iteration   1: 393105,100 ops/s
                 Â·gc.alloc.rate:      6822,970 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           225,000 counts
                 Â·gc.time:            7736,000 ms

Iteration   2: 391102,142 ops/s
                 Â·gc.alloc.rate:      6788,221 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           228,000 counts
                 Â·gc.time:            7865,000 ms

Iteration   3: 390391,517 ops/s
                 Â·gc.alloc.rate:      6775,881 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           228,000 counts
                 Â·gc.time:            7885,000 ms

Iteration   4: 386969,140 ops/s
                 Â·gc.alloc.rate:      6716,465 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           228,000 counts
                 Â·gc.time:            7900,000 ms

Iteration   5: 387197,258 ops/s
                 Â·gc.alloc.rate:      6720,409 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           228,000 counts
                 Â·gc.time:            7914,000 ms


# Run progress: 53,33% complete, ETA 00:12:11
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
384634,347 ops/s
# Warmup Iteration   2: 387383,189 ops/s
# Warmup Iteration   3: 396179,423 ops/s
# Warmup Iteration   4: 394362,324 ops/s
# Warmup Iteration   5: 394716,368 ops/s
Iteration   1: 393185,098 ops/s
                 Â·gc.alloc.rate:      6824,328 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           227,000 counts
                 Â·gc.time:            7873,000 ms

Iteration   2: 399366,696 ops/s
                 Â·gc.alloc.rate:      6931,673 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           236,000 counts
                 Â·gc.time:            7982,000 ms

Iteration   3: 397750,524 ops/s
                 Â·gc.alloc.rate:      6903,603 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           233,000 counts
                 Â·gc.time:            7824,000 ms

Iteration   4: 400694,844 ops/s
                 Â·gc.alloc.rate:      6954,711 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           235,000 counts
                 Â·gc.time:            7972,000 ms

Iteration   5: 398464,420 ops/s
                 Â·gc.alloc.rate:      6915,973 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           233,000 counts
                 Â·gc.time:            7825,000 ms


# Run progress: 60,00% complete, ETA 00:10:27
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
392604,258 ops/s
# Warmup Iteration   2: 394906,114 ops/s
# Warmup Iteration   3: 405650,130 ops/s
# Warmup Iteration   4: 405017,313 ops/s
# Warmup Iteration   5: 405501,882 ops/s
Iteration   1: 402917,888 ops/s
                 Â·gc.alloc.rate:      6993,304 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           232,000 counts
                 Â·gc.time:            7840,000 ms

Iteration   2: 401182,205 ops/s
                 Â·gc.alloc.rate:      6963,189 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           232,000 counts
                 Â·gc.time:            7837,000 ms

Iteration   3: 400107,442 ops/s
                 Â·gc.alloc.rate:      6944,511 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           233,000 counts
                 Â·gc.time:            7822,000 ms

Iteration   4: 399414,465 ops/s
                 Â·gc.alloc.rate:      6932,479 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           236,000 counts
                 Â·gc.time:            7962,000 ms

Iteration   5: 398561,340 ops/s
                 Â·gc.alloc.rate:      6917,648 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           232,000 counts
                 Â·gc.time:            7835,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc":
  393294,408 Â±(99.9%) 4071,787 ops/s [Average]
  (min, avg, max) = (384033,945, 393294,408, 402917,888), stdev = 5435,719
  CI (99.9%): [389222,621, 397366,195] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate":
  6826,256 Â±(99.9%) 70,676 MB/sec [Average]
  (min, avg, max) = (6665,531, 6826,256, 6993,304), stdev = 94,351
  CI (99.9%): [6755,580, 6896,932] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm":
  18200,000 Â±(99.9%) 0,001 B/op [Average]
  (min, avg, max) = (18200,000, 18200,000, 18200,000), stdev = 0,001
  CI (99.9%): [18200,000, 18200,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.count":
  5715,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (220,000, 228,600, 236,000), stdev = 4,291
  CI (99.9%): [5715,000, 5715,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.time":
  196066,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (7649,000, 7842,640, 7982,000), stdev = 79,686
  CI (99.9%): [196066,000, 196066,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseShenandoahGC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc
# Parameters: (percentageOfRetainedHeap = P_75)

# Run progress: 66,67% complete, ETA 00:08:42
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
107666,356 ops/s
# Warmup Iteration   2: 103429,660 ops/s
# Warmup Iteration   3: 103050,909 ops/s
# Warmup Iteration   4: 105846,261 ops/s
# Warmup Iteration   5: 104843,950 ops/s
Iteration   1: 103742,757 ops/s
                 Â·gc.alloc.rate:      1800,622 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           196,000 counts
                 Â·gc.time:            10120,000 ms

Iteration   2: 103129,636 ops/s
                 Â·gc.alloc.rate:      1789,957 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           192,000 counts
                 Â·gc.time:            9937,000 ms

Iteration   3: 103022,702 ops/s
                 Â·gc.alloc.rate:      1788,118 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           192,000 counts
                 Â·gc.time:            9904,000 ms

Iteration   4: 103196,703 ops/s
                 Â·gc.alloc.rate:      1791,134 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           192,000 counts
                 Â·gc.time:            9930,000 ms

Iteration   5: 104530,356 ops/s
                 Â·gc.alloc.rate:      1814,240 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           193,000 counts
                 Â·gc.time:            10022,000 ms


# Run progress: 73,33% complete, ETA 00:06:57
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
107753,518 ops/s
# Warmup Iteration   2: 103073,366 ops/s
# Warmup Iteration   3: 104457,700 ops/s
# Warmup Iteration   4: 105135,037 ops/s
# Warmup Iteration   5: 104136,586 ops/s
Iteration   1: 103737,720 ops/s
                 Â·gc.alloc.rate:      1800,528 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           186,000 counts
                 Â·gc.time:            9816,000 ms

Iteration   2: 111513,589 ops/s
                 Â·gc.alloc.rate:      1935,499 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           182,000 counts
                 Â·gc.time:            9931,000 ms

Iteration   3: 102883,467 ops/s
                 Â·gc.alloc.rate:      1785,701 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           188,000 counts
                 Â·gc.time:            9942,000 ms

Iteration   4: 103354,162 ops/s
                 Â·gc.alloc.rate:      1793,878 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           188,000 counts
                 Â·gc.time:            9948,000 ms

Iteration   5: 103495,130 ops/s
                 Â·gc.alloc.rate:      1796,310 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           188,000 counts
                 Â·gc.time:            9950,000 ms


# Run progress: 80,00% complete, ETA 00:05:12
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
118220,676 ops/s
# Warmup Iteration   2: 105933,671 ops/s
# Warmup Iteration   3: 104017,768 ops/s
# Warmup Iteration   4: 103115,703 ops/s
# Warmup Iteration   5: 102608,581 ops/s
Iteration   1: 103479,703 ops/s
                 Â·gc.alloc.rate:      1796,047 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           188,000 counts
                 Â·gc.time:            9958,000 ms

Iteration   2: 102609,181 ops/s
                 Â·gc.alloc.rate:      1780,943 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           188,000 counts
                 Â·gc.time:            9948,000 ms

Iteration   3: 102130,007 ops/s
                 Â·gc.alloc.rate:      1772,630 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           188,000 counts
                 Â·gc.time:            9969,000 ms

Iteration   4: 103099,161 ops/s
                 Â·gc.alloc.rate:      1789,453 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           188,000 counts
                 Â·gc.time:            9971,000 ms

Iteration   5: 101732,599 ops/s
                 Â·gc.alloc.rate:      1765,737 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           187,000 counts
                 Â·gc.time:            9969,000 ms


# Run progress: 86,67% complete, ETA 00:03:28
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
114731,065 ops/s
# Warmup Iteration   2: 106599,453 ops/s
# Warmup Iteration   3: 103633,808 ops/s
# Warmup Iteration   4: 104258,759 ops/s
# Warmup Iteration   5: 103063,914 ops/s
Iteration   1: 102594,690 ops/s
                 Â·gc.alloc.rate:      1780,696 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           188,000 counts
                 Â·gc.time:            9962,000 ms

Iteration   2: 101835,107 ops/s
                 Â·gc.alloc.rate:      1767,514 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           188,000 counts
                 Â·gc.time:            9954,000 ms

Iteration   3: 101385,605 ops/s
                 Â·gc.alloc.rate:      1759,710 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           188,000 counts
                 Â·gc.time:            9970,000 ms

Iteration   4: 101294,845 ops/s
                 Â·gc.alloc.rate:      1758,119 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           188,000 counts
                 Â·gc.time:            9963,000 ms

Iteration   5: 100937,884 ops/s
                 Â·gc.alloc.rate:      1751,933 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           188,000 counts
                 Â·gc.time:            9963,000 ms


# Run progress: 93,33% complete, ETA 00:01:44
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
111926,291 ops/s
# Warmup Iteration   2: 103146,606 ops/s
# Warmup Iteration   3: 102769,699 ops/s
# Warmup Iteration   4: 101998,164 ops/s
# Warmup Iteration   5: 102609,589 ops/s
Iteration   1: 102117,173 ops/s
                 Â·gc.alloc.rate:      1772,414 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           188,000 counts
                 Â·gc.time:            9968,000 ms

Iteration   2: 101896,176 ops/s
                 Â·gc.alloc.rate:      1768,569 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           187,000 counts
                 Â·gc.time:            9955,000 ms

Iteration   3: 100870,463 ops/s
                 Â·gc.alloc.rate:      1750,769 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           185,000 counts
                 Â·gc.time:            9751,000 ms

Iteration   4: 101873,522 ops/s
                 Â·gc.alloc.rate:      1768,177 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           188,000 counts
                 Â·gc.time:            9956,000 ms

Iteration   5: 103931,219 ops/s
                 Â·gc.alloc.rate:      1803,883 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           189,000 counts
                 Â·gc.time:            10057,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc":
  102975,742 Â±(99.9%) 1521,824 ops/s [Average]
  (min, avg, max) = (100870,463, 102975,742, 111513,589), stdev = 2031,591
  CI (99.9%): [101453,918, 104497,566] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate":
  1787,303 Â±(99.9%) 26,413 MB/sec [Average]
  (min, avg, max) = (1750,769, 1787,303, 1935,499), stdev = 35,260
  CI (99.9%): [1760,891, 1813,716] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm":
  18200,000 Â±(99.9%) 0,001 B/op [Average]
  (min, avg, max) = (18200,000, 18200,000, 18200,000), stdev = 0,001
  CI (99.9%): [18200,000, 18200,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.count":
  4713,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (182,000, 188,520, 196,000), stdev = 2,756
  CI (99.9%): [4713,000, 4713,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.time":
  248814,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (9751,000, 9952,560, 10120,000), stdev = 67,254
  CI (99.9%): [248814,000, 248814,000] (assumes normal distribution)


# Run complete. Total time: 00:26:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                                     (percentageOfRetainedHeap)   Mode  Cnt       Score      Error   Units
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc                                            P_25  thrpt   25  974082,843 Â± 9977,126   ops/s
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate                             P_25  thrpt   25   16906,778 Â±  173,173  MB/sec
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm                        P_25  thrpt   25   18200,000 Â±    0,001    B/op
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.count                                  P_25  thrpt   25   10098,000             counts
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.time                                   P_25  thrpt   25  146652,000                 ms
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc                                            P_50  thrpt   25  393294,408 Â± 4071,787   ops/s
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate                             P_50  thrpt   25    6826,256 Â±   70,676  MB/sec
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm                        P_50  thrpt   25   18200,000 Â±    0,001    B/op
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.count                                  P_50  thrpt   25    5715,000             counts
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.time                                   P_50  thrpt   25  196066,000                 ms
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc                                            P_75  thrpt   25  102975,742 Â± 1521,824   ops/s
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate                             P_75  thrpt   25    1787,303 Â±   26,413  MB/sec
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm                        P_75  thrpt   25   18200,000 Â±    0,001    B/op
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.count                                  P_75  thrpt   25    4713,000             counts
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.time                                   P_75  thrpt   25  248814,000                 ms

Benchmark result is saved to results/jdk-17/arm64/openjdk-hotspot-vm/HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark_shenandoahGC_1thread.csv

Running HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark benchmark ...
java  -jar benchmarks/target/benchmarks.jar .*HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.* -foe true -wi 5 -w 10 -i 5 -r 10 -f 5 -rf csv -rff results/jdk-17/arm64/openjdk-hotspot-vm/HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark_shenandoahGC_2threads.csv -t 2 -prof gc -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseShenandoahGC"

# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseShenandoahGC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc
# Parameters: (percentageOfRetainedHeap = P_25)

# Run progress: 0,00% complete, ETA 00:25:00
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
890252,059 ops/s
# Warmup Iteration   2: 909776,837 ops/s
# Warmup Iteration   3: 914259,945 ops/s
# Warmup Iteration   4: 912470,158 ops/s
# Warmup Iteration   5: 914836,338 ops/s
Iteration   1: 916107,330 ops/s
                 Â·gc.alloc.rate:      15900,385 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           412,000 counts
                 Â·gc.time:            7763,000 ms

Iteration   2: 916195,150 ops/s
                 Â·gc.alloc.rate:      15901,968 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           419,000 counts
                 Â·gc.time:            7908,000 ms

Iteration   3: 914763,253 ops/s
                 Â·gc.alloc.rate:      15876,986 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           412,000 counts
                 Â·gc.time:            7770,000 ms

Iteration   4: 916352,599 ops/s
                 Â·gc.alloc.rate:      15904,742 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           412,000 counts
                 Â·gc.time:            7783,000 ms

Iteration   5: 918750,965 ops/s
                 Â·gc.alloc.rate:      15943,812 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           413,000 counts
                 Â·gc.time:            7769,000 ms


# Run progress: 6,67% complete, ETA 00:23:56
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
893539,329 ops/s
# Warmup Iteration   2: 911412,797 ops/s
# Warmup Iteration   3: 907639,272 ops/s
# Warmup Iteration   4: 909878,514 ops/s
# Warmup Iteration   5: 914691,911 ops/s
Iteration   1: 908052,090 ops/s
                 Â·gc.alloc.rate:      15760,632 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           412,000 counts
                 Â·gc.time:            7795,000 ms

Iteration   2: 914476,952 ops/s
                 Â·gc.alloc.rate:      15872,096 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           412,000 counts
                 Â·gc.time:            7757,000 ms

Iteration   3: 913524,490 ops/s
                 Â·gc.alloc.rate:      15855,419 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           413,000 counts
                 Â·gc.time:            7748,000 ms

Iteration   4: 912480,065 ops/s
                 Â·gc.alloc.rate:      15837,063 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           410,000 counts
                 Â·gc.time:            7756,000 ms

Iteration   5: 907840,640 ops/s
                 Â·gc.alloc.rate:      15756,886 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           408,000 counts
                 Â·gc.time:            7681,000 ms


# Run progress: 13,33% complete, ETA 00:22:06
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
903847,686 ops/s
# Warmup Iteration   2: 923917,664 ops/s
# Warmup Iteration   3: 912650,171 ops/s
# Warmup Iteration   4: 918307,769 ops/s
# Warmup Iteration   5: 911699,602 ops/s
Iteration   1: 915071,386 ops/s
                 Â·gc.alloc.rate:      15882,496 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           412,000 counts
                 Â·gc.time:            7770,000 ms

Iteration   2: 922193,441 ops/s
                 Â·gc.alloc.rate:      16006,036 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           421,000 counts
                 Â·gc.time:            7928,000 ms

Iteration   3: 949745,647 ops/s
                 Â·gc.alloc.rate:      16484,220 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           432,000 counts
                 Â·gc.time:            8012,000 ms

Iteration   4: 943086,675 ops/s
                 Â·gc.alloc.rate:      16364,556 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           432,000 counts
                 Â·gc.time:            8032,000 ms

Iteration   5: 954787,355 ops/s
                 Â·gc.alloc.rate:      16569,593 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           432,000 counts
                 Â·gc.time:            7951,000 ms


# Run progress: 20,00% complete, ETA 00:20:28
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
947667,178 ops/s
# Warmup Iteration   2: 951707,869 ops/s
# Warmup Iteration   3: 957375,772 ops/s
# Warmup Iteration   4: 959658,197 ops/s
# Warmup Iteration   5: 958651,799 ops/s
Iteration   1: 956063,047 ops/s
                 Â·gc.alloc.rate:      16593,954 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           428,000 counts
                 Â·gc.time:            7875,000 ms

Iteration   2: 956688,003 ops/s
                 Â·gc.alloc.rate:      16604,806 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           428,000 counts
                 Â·gc.time:            7867,000 ms

Iteration   3: 954767,741 ops/s
                 Â·gc.alloc.rate:      16571,461 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           429,000 counts
                 Â·gc.time:            7882,000 ms

Iteration   4: 956005,844 ops/s
                 Â·gc.alloc.rate:      16592,508 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           432,000 counts
                 Â·gc.time:            7952,000 ms

Iteration   5: 953666,521 ops/s
                 Â·gc.alloc.rate:      16550,159 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           431,000 counts
                 Â·gc.time:            7952,000 ms


# Run progress: 26,67% complete, ETA 00:18:55
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
882927,584 ops/s
# Warmup Iteration   2: 922270,330 ops/s
# Warmup Iteration   3: 927410,626 ops/s
# Warmup Iteration   4: 930053,135 ops/s
# Warmup Iteration   5: 925329,026 ops/s
Iteration   1: 921519,873 ops/s
                 Â·gc.alloc.rate:      15994,353 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           464,000 counts
                 Â·gc.time:            8522,000 ms

Iteration   2: 921378,324 ops/s
                 Â·gc.alloc.rate:      15991,877 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           468,000 counts
                 Â·gc.time:            8586,000 ms

Iteration   3: 919541,534 ops/s
                 Â·gc.alloc.rate:      15959,630 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           468,000 counts
                 Â·gc.time:            8574,000 ms

Iteration   4: 913403,982 ops/s
                 Â·gc.alloc.rate:      15853,358 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           467,000 counts
                 Â·gc.time:            8590,000 ms

Iteration   5: 909353,228 ops/s
                 Â·gc.alloc.rate:      15783,069 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           465,000 counts
                 Â·gc.time:            8520,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc":
  927432,645 Â±(99.9%) 13857,929 ops/s [Average]
  (min, avg, max) = (907840,640, 927432,645, 956688,003), stdev = 18499,939
  CI (99.9%): [913574,716, 941290,575] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate":
  16096,483 Â±(99.9%) 240,271 MB/sec [Average]
  (min, avg, max) = (15756,886, 16096,483, 16604,806), stdev = 320,755
  CI (99.9%): [15856,212, 16336,754] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm":
  18200,000 Â±(99.9%) 0,001 B/op [Average]
  (min, avg, max) = (18200,000, 18200,000, 18200,001), stdev = 0,001
  CI (99.9%): [18200,000, 18200,001] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.count":
  10732,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (408,000, 429,280, 468,000), stdev = 20,675
  CI (99.9%): [10732,000, 10732,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.time":
  199743,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (7681,000, 7989,720, 8590,000), stdev = 304,040
  CI (99.9%): [199743,000, 199743,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseShenandoahGC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc
# Parameters: (percentageOfRetainedHeap = P_50)

# Run progress: 33,33% complete, ETA 00:17:17
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
401809,012 ops/s
# Warmup Iteration   2: 425205,353 ops/s
# Warmup Iteration   3: 424017,517 ops/s
# Warmup Iteration   4: 427935,174 ops/s
# Warmup Iteration   5: 427029,162 ops/s
Iteration   1: 427049,805 ops/s
                 Â·gc.alloc.rate:      7412,057 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           236,000 counts
                 Â·gc.time:            8443,000 ms

Iteration   2: 424886,996 ops/s
                 Â·gc.alloc.rate:      7374,561 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           232,000 counts
                 Â·gc.time:            8305,000 ms

Iteration   3: 422676,351 ops/s
                 Â·gc.alloc.rate:      7336,154 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           236,000 counts
                 Â·gc.time:            8437,000 ms

Iteration   4: 418985,550 ops/s
                 Â·gc.alloc.rate:      7271,882 MB/sec
                 Â·gc.alloc.rate.norm: 18200,003 B/op
                 Â·gc.count:           235,000 counts
                 Â·gc.time:            8448,000 ms

Iteration   5: 402090,395 ops/s
                 Â·gc.alloc.rate:      6978,900 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           233,000 counts
                 Â·gc.time:            8474,000 ms


# Run progress: 40,00% complete, ETA 00:15:37
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
388568,786 ops/s
# Warmup Iteration   2: 409975,838 ops/s
# Warmup Iteration   3: 407216,810 ops/s
# Warmup Iteration   4: 408518,461 ops/s
# Warmup Iteration   5: 407373,524 ops/s
Iteration   1: 404061,945 ops/s
                 Â·gc.alloc.rate:      7013,135 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           228,000 counts
                 Â·gc.time:            8364,000 ms

Iteration   2: 407406,456 ops/s
                 Â·gc.alloc.rate:      7071,110 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           232,000 counts
                 Â·gc.time:            8509,000 ms

Iteration   3: 405267,421 ops/s
                 Â·gc.alloc.rate:      7033,885 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           232,000 counts
                 Â·gc.time:            8509,000 ms

Iteration   4: 398915,855 ops/s
                 Â·gc.alloc.rate:      6923,571 MB/sec
                 Â·gc.alloc.rate.norm: 18200,003 B/op
                 Â·gc.count:           232,000 counts
                 Â·gc.time:            8505,000 ms

Iteration   5: 404719,223 ops/s
                 Â·gc.alloc.rate:      7024,473 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           232,000 counts
                 Â·gc.time:            8540,000 ms


# Run progress: 46,67% complete, ETA 00:13:55
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
392068,535 ops/s
# Warmup Iteration   2: 421236,021 ops/s
# Warmup Iteration   3: 422749,935 ops/s
# Warmup Iteration   4: 426177,764 ops/s
# Warmup Iteration   5: 427231,351 ops/s
Iteration   1: 423262,139 ops/s
                 Â·gc.alloc.rate:      7346,343 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           236,000 counts
                 Â·gc.time:            8443,000 ms

Iteration   2: 423121,373 ops/s
                 Â·gc.alloc.rate:      7343,896 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           236,000 counts
                 Â·gc.time:            8434,000 ms

Iteration   3: 418633,235 ops/s
                 Â·gc.alloc.rate:      7265,900 MB/sec
                 Â·gc.alloc.rate.norm: 18200,003 B/op
                 Â·gc.count:           235,000 counts
                 Â·gc.time:            8440,000 ms

Iteration   4: 423117,706 ops/s
                 Â·gc.alloc.rate:      7344,481 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           233,000 counts
                 Â·gc.time:            8290,000 ms

Iteration   5: 417904,613 ops/s
                 Â·gc.alloc.rate:      7252,454 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           235,000 counts
                 Â·gc.time:            8438,000 ms


# Run progress: 53,33% complete, ETA 00:12:12
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
388574,534 ops/s
# Warmup Iteration   2: 417783,218 ops/s
# Warmup Iteration   3: 428104,764 ops/s
# Warmup Iteration   4: 427309,745 ops/s
# Warmup Iteration   5: 431130,682 ops/s
Iteration   1: 415318,165 ops/s
                 Â·gc.alloc.rate:      7208,483 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           240,000 counts
                 Â·gc.time:            8579,000 ms

Iteration   2: 406771,220 ops/s
                 Â·gc.alloc.rate:      7060,102 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           244,000 counts
                 Â·gc.time:            8730,000 ms

Iteration   3: 420753,357 ops/s
                 Â·gc.alloc.rate:      7302,658 MB/sec
                 Â·gc.alloc.rate.norm: 18200,003 B/op
                 Â·gc.count:           236,000 counts
                 Â·gc.time:            8434,000 ms

Iteration   4: 419000,448 ops/s
                 Â·gc.alloc.rate:      7272,815 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           235,000 counts
                 Â·gc.time:            8434,000 ms

Iteration   5: 428399,740 ops/s
                 Â·gc.alloc.rate:      7435,576 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           233,000 counts
                 Â·gc.time:            8296,000 ms


# Run progress: 60,00% complete, ETA 00:10:28
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
397492,141 ops/s
# Warmup Iteration   2: 415478,653 ops/s
# Warmup Iteration   3: 409451,098 ops/s
# Warmup Iteration   4: 406099,682 ops/s
# Warmup Iteration   5: 430136,056 ops/s
Iteration   1: 426772,601 ops/s
                 Â·gc.alloc.rate:      7407,288 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           236,000 counts
                 Â·gc.time:            8428,000 ms

Iteration   2: 423237,366 ops/s
                 Â·gc.alloc.rate:      7345,897 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           235,000 counts
                 Â·gc.time:            8428,000 ms

Iteration   3: 428042,325 ops/s
                 Â·gc.alloc.rate:      7429,195 MB/sec
                 Â·gc.alloc.rate.norm: 18200,003 B/op
                 Â·gc.count:           233,000 counts
                 Â·gc.time:            8289,000 ms

Iteration   4: 424951,565 ops/s
                 Â·gc.alloc.rate:      7375,668 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           236,000 counts
                 Â·gc.time:            8430,000 ms

Iteration   5: 422156,953 ops/s
                 Â·gc.alloc.rate:      7327,146 MB/sec
                 Â·gc.alloc.rate.norm: 18200,000 B/op
                 Â·gc.count:           232,000 counts
                 Â·gc.time:            8283,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc":
  417500,112 Â±(99.9%) 6854,536 ops/s [Average]
  (min, avg, max) = (398915,855, 417500,112, 428399,740), stdev = 9150,609
  CI (99.9%): [410645,576, 424354,648] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate":
  7246,305 Â±(99.9%) 118,997 MB/sec [Average]
  (min, avg, max) = (6923,571, 7246,305, 7435,576), stdev = 158,857
  CI (99.9%): [7127,309, 7365,302] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm":
  18200,001 Â±(99.9%) 0,001 B/op [Average]
  (min, avg, max) = (18200,000, 18200,001, 18200,003), stdev = 0,001
  CI (99.9%): [18200,000, 18200,002] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.count":
  5863,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (228,000, 234,520, 244,000), stdev = 3,070
  CI (99.9%): [5863,000, 5863,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.time":
  210910,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (8283,000, 8436,400, 8730,000), stdev = 100,681
  CI (99.9%): [210910,000, 210910,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseShenandoahGC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc
# Parameters: (percentageOfRetainedHeap = P_75)

# Run progress: 66,67% complete, ETA 00:08:44
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
105865,332 ops/s
# Warmup Iteration   2: 103764,696 ops/s
# Warmup Iteration   3: 102481,832 ops/s
# Warmup Iteration   4: 103160,485 ops/s
# Warmup Iteration   5: 103584,479 ops/s
Iteration   1: 102197,765 ops/s
                 Â·gc.alloc.rate:      1773,824 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           181,000 counts
                 Â·gc.time:            9924,000 ms

Iteration   2: 104009,702 ops/s
                 Â·gc.alloc.rate:      1805,275 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           181,000 counts
                 Â·gc.time:            9917,000 ms

Iteration   3: 101961,793 ops/s
                 Â·gc.alloc.rate:      1769,742 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           180,000 counts
                 Â·gc.time:            9820,000 ms

Iteration   4: 102934,184 ops/s
                 Â·gc.alloc.rate:      1786,563 MB/sec
                 Â·gc.alloc.rate.norm: 18200,012 B/op
                 Â·gc.count:           181,000 counts
                 Â·gc.time:            9902,000 ms

Iteration   5: 101670,918 ops/s
                 Â·gc.alloc.rate:      1764,674 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           180,000 counts
                 Â·gc.time:            9819,000 ms


# Run progress: 73,33% complete, ETA 00:06:58
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
103458,060 ops/s
# Warmup Iteration   2: 99180,784 ops/s
# Warmup Iteration   3: 102560,974 ops/s
# Warmup Iteration   4: 103457,892 ops/s
# Warmup Iteration   5: 101318,456 ops/s
Iteration   1: 103019,173 ops/s
                 Â·gc.alloc.rate:      1788,108 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           181,000 counts
                 Â·gc.time:            9918,000 ms

Iteration   2: 100755,314 ops/s
                 Â·gc.alloc.rate:      1748,761 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           181,000 counts
                 Â·gc.time:            9802,000 ms

Iteration   3: 103802,540 ops/s
                 Â·gc.alloc.rate:      1801,762 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           181,000 counts
                 Â·gc.time:            9920,000 ms

Iteration   4: 101825,254 ops/s
                 Â·gc.alloc.rate:      1767,334 MB/sec
                 Â·gc.alloc.rate.norm: 18200,012 B/op
                 Â·gc.count:           181,000 counts
                 Â·gc.time:            9810,000 ms

Iteration   5: 102149,697 ops/s
                 Â·gc.alloc.rate:      1772,992 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           181,000 counts
                 Â·gc.time:            9918,000 ms


# Run progress: 80,00% complete, ETA 00:05:13
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
101782,080 ops/s
# Warmup Iteration   2: 98829,260 ops/s
# Warmup Iteration   3: 99104,186 ops/s
# Warmup Iteration   4: 100289,304 ops/s
# Warmup Iteration   5: 101493,848 ops/s
Iteration   1: 113002,472 ops/s
                 Â·gc.alloc.rate:      1961,385 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           168,000 counts
                 Â·gc.time:            9632,000 ms

Iteration   2: 103650,380 ops/s
                 Â·gc.alloc.rate:      1799,070 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           188,000 counts
                 Â·gc.time:            9960,000 ms

Iteration   3: 106995,639 ops/s
                 Â·gc.alloc.rate:      1857,056 MB/sec
                 Â·gc.alloc.rate.norm: 18200,011 B/op
                 Â·gc.count:           185,000 counts
                 Â·gc.time:            9848,000 ms

Iteration   4: 103888,311 ops/s
                 Â·gc.alloc.rate:      1803,164 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           188,000 counts
                 Â·gc.time:            10001,000 ms

Iteration   5: 104070,326 ops/s
                 Â·gc.alloc.rate:      1806,293 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           188,000 counts
                 Â·gc.time:            10001,000 ms


# Run progress: 86,67% complete, ETA 00:03:28
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
106592,807 ops/s
# Warmup Iteration   2: 102007,560 ops/s
# Warmup Iteration   3: 100170,760 ops/s
# Warmup Iteration   4: 102090,587 ops/s
# Warmup Iteration   5: 101707,771 ops/s
Iteration   1: 100278,948 ops/s
                 Â·gc.alloc.rate:      1740,524 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           184,000 counts
                 Â·gc.time:            9879,000 ms

Iteration   2: 100717,627 ops/s
                 Â·gc.alloc.rate:      1748,152 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           188,000 counts
                 Â·gc.time:            10094,000 ms

Iteration   3: 111268,688 ops/s
                 Â·gc.alloc.rate:      1931,273 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           178,000 counts
                 Â·gc.time:            9908,000 ms

Iteration   4: 104130,673 ops/s
                 Â·gc.alloc.rate:      1807,321 MB/sec
                 Â·gc.alloc.rate.norm: 18200,011 B/op
                 Â·gc.count:           188,000 counts
                 Â·gc.time:            9935,000 ms

Iteration   5: 103414,314 ops/s
                 Â·gc.alloc.rate:      1794,905 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           184,000 counts
                 Â·gc.time:            9792,000 ms


# Run progress: 93,33% complete, ETA 00:01:44
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
105220,641 ops/s
# Warmup Iteration   2: 100853,287 ops/s
# Warmup Iteration   3: 102941,814 ops/s
# Warmup Iteration   4: 100237,121 ops/s
# Warmup Iteration   5: 101813,959 ops/s
Iteration   1: 100721,733 ops/s
                 Â·gc.alloc.rate:      1748,209 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           184,000 counts
                 Â·gc.time:            9869,000 ms

Iteration   2: 99651,488 ops/s
                 Â·gc.alloc.rate:      1729,629 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           184,000 counts
                 Â·gc.time:            9883,000 ms

Iteration   3: 102011,445 ops/s
                 Â·gc.alloc.rate:      1770,691 MB/sec
                 Â·gc.alloc.rate.norm: 18200,012 B/op
                 Â·gc.count:           185,000 counts
                 Â·gc.time:            9977,000 ms

Iteration   4: 101443,895 ops/s
                 Â·gc.alloc.rate:      1760,737 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           184,000 counts
                 Â·gc.time:            9875,000 ms

Iteration   5: 100984,975 ops/s
                 Â·gc.alloc.rate:      1752,774 MB/sec
                 Â·gc.alloc.rate.norm: 18200,001 B/op
                 Â·gc.count:           184,000 counts
                 Â·gc.time:            9898,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc":
  103222,290 Â±(99.9%) 2347,638 ops/s [Average]
  (min, avg, max) = (99651,488, 103222,290, 113002,472), stdev = 3134,030
  CI (99.9%): [100874,652, 105569,929] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate":
  1791,609 Â±(99.9%) 40,748 MB/sec [Average]
  (min, avg, max) = (1729,629, 1791,609, 1961,385), stdev = 54,397
  CI (99.9%): [1750,861, 1832,357] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm":
  18200,003 Â±(99.9%) 0,003 B/op [Average]
  (min, avg, max) = (18200,001, 18200,003, 18200,012), stdev = 0,004
  CI (99.9%): [18200,000, 18200,006] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.count":
  4568,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (168,000, 182,720, 188,000), stdev = 4,267
  CI (99.9%): [4568,000, 4568,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.time":
  247302,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (9632,000, 9892,080, 10094,000), stdev = 88,596
  CI (99.9%): [247302,000, 247302,000] (assumes normal distribution)


# Run complete. Total time: 00:26:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                                     (percentageOfRetainedHeap)   Mode  Cnt       Score       Error   Units
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc                                            P_25  thrpt   25  927432,645 Â± 13857,929   ops/s
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate                             P_25  thrpt   25   16096,483 Â±   240,271  MB/sec
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm                        P_25  thrpt   25   18200,000 Â±     0,001    B/op
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.count                                  P_25  thrpt   25   10732,000              counts
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.time                                   P_25  thrpt   25  199743,000                  ms
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc                                            P_50  thrpt   25  417500,112 Â±  6854,536   ops/s
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate                             P_50  thrpt   25    7246,305 Â±   118,997  MB/sec
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm                        P_50  thrpt   25   18200,001 Â±     0,001    B/op
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.count                                  P_50  thrpt   25    5863,000              counts
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.time                                   P_50  thrpt   25  210910,000                  ms
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc                                            P_75  thrpt   25  103222,290 Â±  2347,638   ops/s
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate                             P_75  thrpt   25    1791,609 Â±    40,748  MB/sec
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm                        P_75  thrpt   25   18200,003 Â±     0,003    B/op
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.count                                  P_75  thrpt   25    4568,000              counts
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.time                                   P_75  thrpt   25  247302,000                  ms

Benchmark result is saved to results/jdk-17/arm64/openjdk-hotspot-vm/HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark_shenandoahGC_2threads.csv

Running HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark benchmark ...
java  -jar benchmarks/target/benchmarks.jar .*HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.* -foe true -wi 5 -w 10 -i 5 -r 10 -f 5 -rf csv -rff results/jdk-17/arm64/openjdk-hotspot-vm/HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark_zGC_1thread.csv -t 1 -prof gc -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseZGC"

# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc
# Parameters: (percentageOfRetainedHeap = P_25)

# Run progress: 0,00% complete, ETA 00:25:00
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
734955,606 ops/s
# Warmup Iteration   2: 719362,492 ops/s
# Warmup Iteration   3: 726825,134 ops/s
# Warmup Iteration   4: 724622,929 ops/s
# Warmup Iteration   5: 725892,899 ops/s
Iteration   1: 729567,220 ops/s
                 Â·gc.alloc.rate:      13030,179 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           357,000 counts
                 Â·gc.time:            4091,000 ms

Iteration   2: 699504,437 ops/s
                 Â·gc.alloc.rate:      12493,266 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           328,000 counts
                 Â·gc.time:            4474,000 ms

Iteration   3: 708454,810 ops/s
                 Â·gc.alloc.rate:      12653,097 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           388,000 counts
                 Â·gc.time:            6025,000 ms

Iteration   4: 706954,330 ops/s
                 Â·gc.alloc.rate:      12626,306 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           384,000 counts
                 Â·gc.time:            5996,000 ms

Iteration   5: 701474,688 ops/s
                 Â·gc.alloc.rate:      12528,409 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           324,000 counts
                 Â·gc.time:            4538,000 ms


# Run progress: 6,67% complete, ETA 00:24:46
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
697264,709 ops/s
# Warmup Iteration   2: 693373,027 ops/s
# Warmup Iteration   3: 694624,008 ops/s
# Warmup Iteration   4: 680582,014 ops/s
# Warmup Iteration   5: 696511,979 ops/s
Iteration   1: 690578,835 ops/s
                 Â·gc.alloc.rate:      12333,758 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           336,000 counts
                 Â·gc.time:            5116,000 ms

Iteration   2: 696864,683 ops/s
                 Â·gc.alloc.rate:      12445,972 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           344,000 counts
                 Â·gc.time:            5243,000 ms

Iteration   3: 695697,687 ops/s
                 Â·gc.alloc.rate:      12425,246 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           361,000 counts
                 Â·gc.time:            5614,000 ms

Iteration   4: 699090,482 ops/s
                 Â·gc.alloc.rate:      12485,738 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           392,000 counts
                 Â·gc.time:            6197,000 ms

Iteration   5: 696283,647 ops/s
                 Â·gc.alloc.rate:      12435,684 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           372,000 counts
                 Â·gc.time:            5967,000 ms


# Run progress: 13,33% complete, ETA 00:22:33
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
711471,391 ops/s
# Warmup Iteration   2: 694572,672 ops/s
# Warmup Iteration   3: 695157,089 ops/s
# Warmup Iteration   4: 697248,605 ops/s
# Warmup Iteration   5: 694521,396 ops/s
Iteration   1: 699616,372 ops/s
                 Â·gc.alloc.rate:      12495,181 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           382,000 counts
                 Â·gc.time:            5985,000 ms

Iteration   2: 695154,376 ops/s
                 Â·gc.alloc.rate:      12415,468 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           356,000 counts
                 Â·gc.time:            5545,000 ms

Iteration   3: 696077,196 ops/s
                 Â·gc.alloc.rate:      12431,932 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           376,000 counts
                 Â·gc.time:            5929,000 ms

Iteration   4: 697459,805 ops/s
                 Â·gc.alloc.rate:      12456,722 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           372,000 counts
                 Â·gc.time:            5828,000 ms

Iteration   5: 691898,330 ops/s
                 Â·gc.alloc.rate:      12357,362 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           340,000 counts
                 Â·gc.time:            5186,000 ms


# Run progress: 20,00% complete, ETA 00:20:47
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
703550,242 ops/s
# Warmup Iteration   2: 687518,659 ops/s
# Warmup Iteration   3: 694573,744 ops/s
# Warmup Iteration   4: 700625,158 ops/s
# Warmup Iteration   5: 698553,191 ops/s
Iteration   1: 699325,767 ops/s
                 Â·gc.alloc.rate:      12490,051 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           368,000 counts
                 Â·gc.time:            5674,000 ms

Iteration   2: 699535,155 ops/s
                 Â·gc.alloc.rate:      12493,696 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           364,000 counts
                 Â·gc.time:            5725,000 ms

Iteration   3: 700701,116 ops/s
                 Â·gc.alloc.rate:      12514,525 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           359,000 counts
                 Â·gc.time:            5511,000 ms

Iteration   4: 698892,048 ops/s
                 Â·gc.alloc.rate:      12482,212 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           361,000 counts
                 Â·gc.time:            5688,000 ms

Iteration   5: 697447,666 ops/s
                 Â·gc.alloc.rate:      12456,467 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           364,000 counts
                 Â·gc.time:            5541,000 ms


# Run progress: 26,67% complete, ETA 00:18:59
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
702102,410 ops/s
# Warmup Iteration   2: 681986,538 ops/s
# Warmup Iteration   3: 692622,255 ops/s
# Warmup Iteration   4: 700227,504 ops/s
# Warmup Iteration   5: 695932,673 ops/s
Iteration   1: 697458,303 ops/s
                 Â·gc.alloc.rate:      12456,638 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           268,000 counts
                 Â·gc.time:            3340,000 ms

Iteration   2: 690177,825 ops/s
                 Â·gc.alloc.rate:      12326,582 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           263,000 counts
                 Â·gc.time:            3307,000 ms

Iteration   3: 678514,713 ops/s
                 Â·gc.alloc.rate:      12118,263 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           248,000 counts
                 Â·gc.time:            3164,000 ms

Iteration   4: 691276,106 ops/s
                 Â·gc.alloc.rate:      12346,203 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           288,000 counts
                 Â·gc.time:            4107,000 ms

Iteration   5: 696148,641 ops/s
                 Â·gc.alloc.rate:      12433,209 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           372,000 counts
                 Â·gc.time:            5977,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc":
  698166,169 Â±(99.9%) 6522,539 ops/s [Average]
  (min, avg, max) = (678514,713, 698166,169, 729567,220), stdev = 8707,402
  CI (99.9%): [691643,631, 704688,708] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate":
  12469,287 Â±(99.9%) 116,510 MB/sec [Average]
  (min, avg, max) = (12118,263, 12469,287, 13030,179), stdev = 155,538
  CI (99.9%): [12352,776, 12585,797] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm":
  18728,000 Â±(99.9%) 0,001 B/op [Average]
  (min, avg, max) = (18728,000, 18728,000, 18728,000), stdev = 0,001
  CI (99.9%): [18728,000, 18728,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.count":
  8667,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (248,000, 346,680, 392,000), stdev = 39,999
  CI (99.9%): [8667,000, 8667,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.time":
  129768,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (3164,000, 5190,720, 6197,000), stdev = 932,500
  CI (99.9%): [129768,000, 129768,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc
# Parameters: (percentageOfRetainedHeap = P_50)

# Run progress: 33,33% complete, ETA 00:17:21
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
569827,407 ops/s
# Warmup Iteration   2: 572816,902 ops/s
# Warmup Iteration   3: 557766,349 ops/s
# Warmup Iteration   4: 554039,817 ops/s
# Warmup Iteration   5: 581675,645 ops/s
Iteration   1: 561490,324 ops/s
                 Â·gc.alloc.rate:      10028,267 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           284,000 counts
                 Â·gc.time:            6674,000 ms

Iteration   2: 566956,204 ops/s
                 Â·gc.alloc.rate:      10125,883 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           288,000 counts
                 Â·gc.time:            6765,000 ms

Iteration   3: 537778,612 ops/s
                 Â·gc.alloc.rate:      9604,854 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           257,000 counts
                 Â·gc.time:            6172,000 ms

Iteration   4: 555714,908 ops/s
                 Â·gc.alloc.rate:      9925,086 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           279,000 counts
                 Â·gc.time:            6719,000 ms

Iteration   5: 562862,411 ops/s
                 Â·gc.alloc.rate:      10052,806 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           289,000 counts
                 Â·gc.time:            6754,000 ms


# Run progress: 40,00% complete, ETA 00:15:40
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
565667,479 ops/s
# Warmup Iteration   2: 541657,708 ops/s
# Warmup Iteration   3: 553604,941 ops/s
# Warmup Iteration   4: 568138,702 ops/s
# Warmup Iteration   5: 565510,485 ops/s
Iteration   1: 545421,384 ops/s
                 Â·gc.alloc.rate:      9741,214 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           275,000 counts
                 Â·gc.time:            6636,000 ms

Iteration   2: 544642,325 ops/s
                 Â·gc.alloc.rate:      9727,304 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           264,000 counts
                 Â·gc.time:            6414,000 ms

Iteration   3: 529499,598 ops/s
                 Â·gc.alloc.rate:      9456,941 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           262,000 counts
                 Â·gc.time:            6356,000 ms

Iteration   4: 555498,130 ops/s
                 Â·gc.alloc.rate:      9921,186 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           275,000 counts
                 Â·gc.time:            6620,000 ms

Iteration   5: 562637,735 ops/s
                 Â·gc.alloc.rate:      10048,710 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           292,000 counts
                 Â·gc.time:            6925,000 ms


# Run progress: 46,67% complete, ETA 00:13:58
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
556432,907 ops/s
# Warmup Iteration   2: 548542,168 ops/s
# Warmup Iteration   3: 543912,796 ops/s
# Warmup Iteration   4: 533010,230 ops/s
# Warmup Iteration   5: 539114,330 ops/s
Iteration   1: 549576,093 ops/s
                 Â·gc.alloc.rate:      9815,424 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           260,000 counts
                 Â·gc.time:            6206,000 ms

Iteration   2: 554891,867 ops/s
                 Â·gc.alloc.rate:      9910,498 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           278,000 counts
                 Â·gc.time:            6555,000 ms

Iteration   3: 560180,471 ops/s
                 Â·gc.alloc.rate:      10004,792 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           278,000 counts
                 Â·gc.time:            6674,000 ms

Iteration   4: 545196,470 ops/s
                 Â·gc.alloc.rate:      9737,199 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           264,000 counts
                 Â·gc.time:            6353,000 ms

Iteration   5: 564163,423 ops/s
                 Â·gc.alloc.rate:      10075,914 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           289,000 counts
                 Â·gc.time:            6881,000 ms


# Run progress: 53,33% complete, ETA 00:12:15
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
568531,077 ops/s
# Warmup Iteration   2: 545280,245 ops/s
# Warmup Iteration   3: 560099,300 ops/s
# Warmup Iteration   4: 566655,061 ops/s
# Warmup Iteration   5: 549362,663 ops/s
Iteration   1: 552992,821 ops/s
                 Â·gc.alloc.rate:      9876,575 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           281,000 counts
                 Â·gc.time:            6701,000 ms

Iteration   2: 556978,911 ops/s
                 Â·gc.alloc.rate:      9947,433 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           270,000 counts
                 Â·gc.time:            6492,000 ms

Iteration   3: 583362,542 ops/s
                 Â·gc.alloc.rate:      10418,902 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           313,000 counts
                 Â·gc.time:            7243,000 ms

Iteration   4: 568433,051 ops/s
                 Â·gc.alloc.rate:      10152,266 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           288,000 counts
                 Â·gc.time:            6771,000 ms

Iteration   5: 552036,285 ops/s
                 Â·gc.alloc.rate:      9859,344 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           275,000 counts
                 Â·gc.time:            6673,000 ms


# Run progress: 60,00% complete, ETA 00:10:31
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
537498,275 ops/s
# Warmup Iteration   2: 542673,522 ops/s
# Warmup Iteration   3: 537081,681 ops/s
# Warmup Iteration   4: 542732,867 ops/s
# Warmup Iteration   5: 568841,003 ops/s
Iteration   1: 560641,058 ops/s
                 Â·gc.alloc.rate:      10013,106 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           284,000 counts
                 Â·gc.time:            6830,000 ms

Iteration   2: 551010,284 ops/s
                 Â·gc.alloc.rate:      9841,109 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           268,000 counts
                 Â·gc.time:            6424,000 ms

Iteration   3: 554295,966 ops/s
                 Â·gc.alloc.rate:      9899,814 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           273,000 counts
                 Â·gc.time:            6469,000 ms

Iteration   4: 555375,502 ops/s
                 Â·gc.alloc.rate:      9918,989 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           274,000 counts
                 Â·gc.time:            6670,000 ms

Iteration   5: 544376,226 ops/s
                 Â·gc.alloc.rate:      9722,532 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           272,000 counts
                 Â·gc.time:            6542,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc":
  555040,504 Â±(99.9%) 8164,366 ops/s [Average]
  (min, avg, max) = (529499,598, 555040,504, 583362,542), stdev = 10899,195
  CI (99.9%): [546876,138, 563204,870] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate":
  9913,046 Â±(99.9%) 145,812 MB/sec [Average]
  (min, avg, max) = (9456,941, 9913,046, 10418,902), stdev = 194,655
  CI (99.9%): [9767,234, 10058,858] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm":
  18728,000 Â±(99.9%) 0,001 B/op [Average]
  (min, avg, max) = (18728,000, 18728,000, 18728,000), stdev = 0,001
  CI (99.9%): [18728,000, 18728,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.count":
  6932,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (257,000, 277,280, 313,000), stdev = 12,270
  CI (99.9%): [6932,000, 6932,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.time":
  165519,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (6172,000, 6620,760, 7243,000), stdev = 235,083
  CI (99.9%): [165519,000, 165519,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc
# Parameters: (percentageOfRetainedHeap = P_75)

# Run progress: 66,67% complete, ETA 00:08:46
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
283922,920 ops/s
# Warmup Iteration   2: 293722,795 ops/s
# Warmup Iteration   3: 285893,874 ops/s
# Warmup Iteration   4: 286394,994 ops/s
# Warmup Iteration   5: 285368,689 ops/s
Iteration   1: 279599,390 ops/s
                 Â·gc.alloc.rate:      4993,711 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           201,000 counts
                 Â·gc.time:            7514,000 ms

Iteration   2: 285154,892 ops/s
                 Â·gc.alloc.rate:      5092,786 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           200,000 counts
                 Â·gc.time:            7488,000 ms

Iteration   3: 287168,700 ops/s
                 Â·gc.alloc.rate:      5128,837 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           200,000 counts
                 Â·gc.time:            7471,000 ms

Iteration   4: 282893,117 ops/s
                 Â·gc.alloc.rate:      5052,466 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           200,000 counts
                 Â·gc.time:            7501,000 ms

Iteration   5: 285339,074 ops/s
                 Â·gc.alloc.rate:      5096,185 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           201,000 counts
                 Â·gc.time:            7474,000 ms


# Run progress: 73,33% complete, ETA 00:07:01
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
285204,427 ops/s
# Warmup Iteration   2: 286558,042 ops/s
# Warmup Iteration   3: 278699,516 ops/s
# Warmup Iteration   4: 281451,410 ops/s
# Warmup Iteration   5: 285601,805 ops/s
Iteration   1: 285195,470 ops/s
                 Â·gc.alloc.rate:      5093,606 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           200,000 counts
                 Â·gc.time:            7494,000 ms

Iteration   2: 285267,901 ops/s
                 Â·gc.alloc.rate:      5094,910 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           200,000 counts
                 Â·gc.time:            7466,000 ms

Iteration   3: 283178,091 ops/s
                 Â·gc.alloc.rate:      5057,598 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           201,000 counts
                 Â·gc.time:            7480,000 ms

Iteration   4: 288139,181 ops/s
                 Â·gc.alloc.rate:      5146,154 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           202,000 counts
                 Â·gc.time:            7597,000 ms

Iteration   5: 286517,509 ops/s
                 Â·gc.alloc.rate:      5117,183 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           200,000 counts
                 Â·gc.time:            7468,000 ms


# Run progress: 80,00% complete, ETA 00:05:15
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
286158,823 ops/s
# Warmup Iteration   2: 284532,192 ops/s
# Warmup Iteration   3: 287557,920 ops/s
# Warmup Iteration   4: 287307,389 ops/s
# Warmup Iteration   5: 287545,970 ops/s
Iteration   1: 282561,307 ops/s
                 Â·gc.alloc.rate:      5046,585 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           201,000 counts
                 Â·gc.time:            7489,000 ms

Iteration   2: 286034,391 ops/s
                 Â·gc.alloc.rate:      5108,577 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           200,000 counts
                 Â·gc.time:            7477,000 ms

Iteration   3: 282061,174 ops/s
                 Â·gc.alloc.rate:      5037,663 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           201,000 counts
                 Â·gc.time:            7468,000 ms

Iteration   4: 284747,465 ops/s
                 Â·gc.alloc.rate:      5085,641 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           200,000 counts
                 Â·gc.time:            7466,000 ms

Iteration   5: 284421,715 ops/s
                 Â·gc.alloc.rate:      5079,768 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           202,000 counts
                 Â·gc.time:            7646,000 ms


# Run progress: 86,67% complete, ETA 00:03:30
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
283274,411 ops/s
# Warmup Iteration   2: 284498,017 ops/s
# Warmup Iteration   3: 287671,655 ops/s
# Warmup Iteration   4: 286743,309 ops/s
# Warmup Iteration   5: 286019,723 ops/s
Iteration   1: 290192,223 ops/s
                 Â·gc.alloc.rate:      5182,851 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           200,000 counts
                 Â·gc.time:            7447,000 ms

Iteration   2: 284045,798 ops/s
                 Â·gc.alloc.rate:      5073,083 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           200,000 counts
                 Â·gc.time:            7495,000 ms

Iteration   3: 284494,250 ops/s
                 Â·gc.alloc.rate:      5081,117 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           201,000 counts
                 Â·gc.time:            7431,000 ms

Iteration   4: 286221,862 ops/s
                 Â·gc.alloc.rate:      5111,915 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           202,000 counts
                 Â·gc.time:            7631,000 ms

Iteration   5: 278369,930 ops/s
                 Â·gc.alloc.rate:      4971,675 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           200,000 counts
                 Â·gc.time:            7589,000 ms


# Run progress: 93,33% complete, ETA 00:01:44
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
286257,926 ops/s
# Warmup Iteration   2: 282240,126 ops/s
# Warmup Iteration   3: 286836,994 ops/s
# Warmup Iteration   4: 284655,692 ops/s
# Warmup Iteration   5: 284770,022 ops/s
Iteration   1: 285327,193 ops/s
                 Â·gc.alloc.rate:      5095,986 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           201,000 counts
                 Â·gc.time:            7490,000 ms

Iteration   2: 288753,816 ops/s
                 Â·gc.alloc.rate:      5157,160 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           200,000 counts
                 Â·gc.time:            7452,000 ms

Iteration   3: 282592,190 ops/s
                 Â·gc.alloc.rate:      5047,137 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           201,000 counts
                 Â·gc.time:            7477,000 ms

Iteration   4: 285932,375 ops/s
                 Â·gc.alloc.rate:      5106,793 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           200,000 counts
                 Â·gc.time:            7473,000 ms

Iteration   5: 287125,429 ops/s
                 Â·gc.alloc.rate:      5128,048 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           202,000 counts
                 Â·gc.time:            7633,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc":
  284853,378 Â±(99.9%) 1984,871 ops/s [Average]
  (min, avg, max) = (278369,930, 284853,378, 290192,223), stdev = 2649,747
  CI (99.9%): [282868,506, 286838,249] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate":
  5087,497 Â±(99.9%) 35,443 MB/sec [Average]
  (min, avg, max) = (4971,675, 5087,497, 5182,851), stdev = 47,316
  CI (99.9%): [5052,054, 5122,941] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm":
  18728,000 Â±(99.9%) 0,001 B/op [Average]
  (min, avg, max) = (18728,000, 18728,000, 18728,000), stdev = 0,001
  CI (99.9%): [18728,000, 18728,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.count":
  5016,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (200,000, 200,640, 202,000), stdev = 0,757
  CI (99.9%): [5016,000, 5016,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.time":
  187617,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (7431,000, 7504,680, 7646,000), stdev = 61,749
  CI (99.9%): [187617,000, 187617,000] (assumes normal distribution)


# Run complete. Total time: 00:26:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                                     (percentageOfRetainedHeap)   Mode  Cnt       Score      Error   Units
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc                                            P_25  thrpt   25  698166,169 Â± 6522,539   ops/s
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate                             P_25  thrpt   25   12469,287 Â±  116,510  MB/sec
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm                        P_25  thrpt   25   18728,000 Â±    0,001    B/op
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.count                                  P_25  thrpt   25    8667,000             counts
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.time                                   P_25  thrpt   25  129768,000                 ms
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc                                            P_50  thrpt   25  555040,504 Â± 8164,366   ops/s
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate                             P_50  thrpt   25    9913,046 Â±  145,812  MB/sec
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm                        P_50  thrpt   25   18728,000 Â±    0,001    B/op
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.count                                  P_50  thrpt   25    6932,000             counts
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.time                                   P_50  thrpt   25  165519,000                 ms
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc                                            P_75  thrpt   25  284853,378 Â± 1984,871   ops/s
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate                             P_75  thrpt   25    5087,497 Â±   35,443  MB/sec
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm                        P_75  thrpt   25   18728,000 Â±    0,001    B/op
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.count                                  P_75  thrpt   25    5016,000             counts
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.time                                   P_75  thrpt   25  187617,000                 ms

Benchmark result is saved to results/jdk-17/arm64/openjdk-hotspot-vm/HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark_zGC_1thread.csv

Running HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark benchmark ...
java  -jar benchmarks/target/benchmarks.jar .*HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.* -foe true -wi 5 -w 10 -i 5 -r 10 -f 5 -rf csv -rff results/jdk-17/arm64/openjdk-hotspot-vm/HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark_zGC_2threads.csv -t 2 -prof gc -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseZGC"

# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc
# Parameters: (percentageOfRetainedHeap = P_25)

# Run progress: 0,00% complete, ETA 00:25:00
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
1148031,078 ops/s
# Warmup Iteration   2: 1140427,867 ops/s
# Warmup Iteration   3: 1138374,115 ops/s
# Warmup Iteration   4: 1136923,071 ops/s
# Warmup Iteration   5: 1139281,863 ops/s
Iteration   1: 1138537,426 ops/s
                 Â·gc.alloc.rate:      20334,283 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           400,000 counts
                 Â·gc.time:            4124,000 ms

Iteration   2: 1138078,495 ops/s
                 Â·gc.alloc.rate:      20326,061 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           400,000 counts
                 Â·gc.time:            4122,000 ms

Iteration   3: 1138854,832 ops/s
                 Â·gc.alloc.rate:      20339,852 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           403,000 counts
                 Â·gc.time:            4207,000 ms

Iteration   4: 1138604,741 ops/s
                 Â·gc.alloc.rate:      20334,902 MB/sec
                 Â·gc.alloc.rate.norm: 18728,001 B/op
                 Â·gc.count:           400,000 counts
                 Â·gc.time:            4174,000 ms

Iteration   5: 1134378,003 ops/s
                 Â·gc.alloc.rate:      20259,789 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           400,000 counts
                 Â·gc.time:            4168,000 ms


# Run progress: 6,67% complete, ETA 00:23:38
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
1205181,473 ops/s
# Warmup Iteration   2: 1205010,312 ops/s
# Warmup Iteration   3: 1204637,909 ops/s
# Warmup Iteration   4: 1206011,833 ops/s
# Warmup Iteration   5: 1205105,617 ops/s
Iteration   1: 1206473,182 ops/s
                 Â·gc.alloc.rate:      21547,504 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           401,000 counts
                 Â·gc.time:            4088,000 ms

Iteration   2: 1203377,617 ops/s
                 Â·gc.alloc.rate:      21492,208 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           402,000 counts
                 Â·gc.time:            4238,000 ms

Iteration   3: 1205966,584 ops/s
                 Â·gc.alloc.rate:      21538,452 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           400,000 counts
                 Â·gc.time:            4076,000 ms

Iteration   4: 1204680,593 ops/s
                 Â·gc.alloc.rate:      21514,843 MB/sec
                 Â·gc.alloc.rate.norm: 18728,001 B/op
                 Â·gc.count:           400,000 counts
                 Â·gc.time:            4229,000 ms

Iteration   5: 1210722,750 ops/s
                 Â·gc.alloc.rate:      21620,143 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           400,000 counts
                 Â·gc.time:            4118,000 ms


# Run progress: 13,33% complete, ETA 00:22:12
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
1203527,012 ops/s
# Warmup Iteration   2: 1203573,586 ops/s
# Warmup Iteration   3: 1203209,655 ops/s
# Warmup Iteration   4: 1205682,856 ops/s
# Warmup Iteration   5: 1205980,112 ops/s
Iteration   1: 1205008,626 ops/s
                 Â·gc.alloc.rate:      21521,315 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           403,000 counts
                 Â·gc.time:            4401,000 ms

Iteration   2: 1206760,993 ops/s
                 Â·gc.alloc.rate:      21552,737 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           400,000 counts
                 Â·gc.time:            4301,000 ms

Iteration   3: 1207553,145 ops/s
                 Â·gc.alloc.rate:      21566,854 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           400,000 counts
                 Â·gc.time:            4334,000 ms

Iteration   4: 1206338,486 ops/s
                 Â·gc.alloc.rate:      21544,627 MB/sec
                 Â·gc.alloc.rate.norm: 18728,001 B/op
                 Â·gc.count:           400,000 counts
                 Â·gc.time:            4305,000 ms

Iteration   5: 1211096,196 ops/s
                 Â·gc.alloc.rate:      21626,933 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           401,000 counts
                 Â·gc.time:            4345,000 ms


# Run progress: 20,00% complete, ETA 00:20:32
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
1206362,943 ops/s
# Warmup Iteration   2: 1207779,304 ops/s
# Warmup Iteration   3: 1208142,623 ops/s
# Warmup Iteration   4: 1207382,520 ops/s
# Warmup Iteration   5: 1209297,212 ops/s
Iteration   1: 1209320,681 ops/s
                 Â·gc.alloc.rate:      21598,548 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           401,000 counts
                 Â·gc.time:            4331,000 ms

Iteration   2: 1208690,884 ops/s
                 Â·gc.alloc.rate:      21587,184 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           400,000 counts
                 Â·gc.time:            4247,000 ms

Iteration   3: 1209764,913 ops/s
                 Â·gc.alloc.rate:      21606,162 MB/sec
                 Â·gc.alloc.rate.norm: 18728,001 B/op
                 Â·gc.count:           400,000 counts
                 Â·gc.time:            4257,000 ms

Iteration   4: 1212092,121 ops/s
                 Â·gc.alloc.rate:      21647,942 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           400,000 counts
                 Â·gc.time:            4390,000 ms

Iteration   5: 1212126,381 ops/s
                 Â·gc.alloc.rate:      21645,156 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           403,000 counts
                 Â·gc.time:            4365,000 ms


# Run progress: 26,67% complete, ETA 00:18:51
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
1204153,024 ops/s
# Warmup Iteration   2: 1201823,961 ops/s
# Warmup Iteration   3: 1205342,883 ops/s
# Warmup Iteration   4: 1204641,350 ops/s
# Warmup Iteration   5: 1206931,474 ops/s
Iteration   1: 1203577,295 ops/s
                 Â·gc.alloc.rate:      21495,900 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           400,000 counts
                 Â·gc.time:            4133,000 ms

Iteration   2: 1203843,055 ops/s
                 Â·gc.alloc.rate:      21500,490 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           400,000 counts
                 Â·gc.time:            4196,000 ms

Iteration   3: 1203568,198 ops/s
                 Â·gc.alloc.rate:      21495,175 MB/sec
                 Â·gc.alloc.rate.norm: 18728,001 B/op
                 Â·gc.count:           403,000 counts
                 Â·gc.time:            4181,000 ms

Iteration   4: 1208772,478 ops/s
                 Â·gc.alloc.rate:      21588,286 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           400,000 counts
                 Â·gc.time:            4100,000 ms

Iteration   5: 1207794,412 ops/s
                 Â·gc.alloc.rate:      21571,018 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           400,000 counts
                 Â·gc.time:            4148,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc":
  1193439,283 Â±(99.9%) 21404,652 ops/s [Average]
  (min, avg, max) = (1134378,003, 1193439,283, 1212126,381), stdev = 28574,597
  CI (99.9%): [1172034,632, 1214843,935] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate":
  21314,255 Â±(99.9%) 382,101 MB/sec [Average]
  (min, avg, max) = (20259,789, 21314,255, 21647,942), stdev = 510,094
  CI (99.9%): [20932,154, 21696,355] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm":
  18728,000 Â±(99.9%) 0,001 B/op [Average]
  (min, avg, max) = (18728,000, 18728,000, 18728,001), stdev = 0,001
  CI (99.9%): [18728,000, 18728,001] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.count":
  10017,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (400,000, 400,680, 403,000), stdev = 1,145
  CI (99.9%): [10017,000, 10017,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.time":
  105578,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (4076,000, 4223,120, 4401,000), stdev = 100,270
  CI (99.9%): [105578,000, 105578,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc
# Parameters: (percentageOfRetainedHeap = P_50)

# Run progress: 33,33% complete, ETA 00:17:08
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
903097,061 ops/s
# Warmup Iteration   2: 896245,936 ops/s
# Warmup Iteration   3: 886971,827 ops/s
# Warmup Iteration   4: 902932,445 ops/s
# Warmup Iteration   5: 888832,962 ops/s
Iteration   1: 926266,690 ops/s
                 Â·gc.alloc.rate:      16543,152 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           392,000 counts
                 Â·gc.time:            7605,000 ms

Iteration   2: 880131,200 ops/s
                 Â·gc.alloc.rate:      15719,178 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           384,000 counts
                 Â·gc.time:            7798,000 ms

Iteration   3: 928992,151 ops/s
                 Â·gc.alloc.rate:      16591,785 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           396,000 counts
                 Â·gc.time:            7674,000 ms

Iteration   4: 868762,655 ops/s
                 Â·gc.alloc.rate:      15515,628 MB/sec
                 Â·gc.alloc.rate.norm: 18728,002 B/op
                 Â·gc.count:           384,000 counts
                 Â·gc.time:            7781,000 ms

Iteration   5: 843067,900 ops/s
                 Â·gc.alloc.rate:      15057,254 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           373,000 counts
                 Â·gc.time:            7629,000 ms


# Run progress: 40,00% complete, ETA 00:15:31
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
775316,897 ops/s
# Warmup Iteration   2: 897928,789 ops/s
# Warmup Iteration   3: 923015,287 ops/s
# Warmup Iteration   4: 915078,897 ops/s
# Warmup Iteration   5: 917527,618 ops/s
Iteration   1: 937440,208 ops/s
                 Â·gc.alloc.rate:      16742,728 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           396,000 counts
                 Â·gc.time:            7606,000 ms

Iteration   2: 842076,473 ops/s
                 Â·gc.alloc.rate:      15039,544 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           361,000 counts
                 Â·gc.time:            7444,000 ms

Iteration   3: 885403,914 ops/s
                 Â·gc.alloc.rate:      15813,221 MB/sec
                 Â·gc.alloc.rate.norm: 18728,001 B/op
                 Â·gc.count:           383,000 counts
                 Â·gc.time:            7710,000 ms

Iteration   4: 911231,165 ops/s
                 Â·gc.alloc.rate:      16274,562 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           388,000 counts
                 Â·gc.time:            7631,000 ms

Iteration   5: 903962,965 ops/s
                 Â·gc.alloc.rate:      16142,302 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           392,000 counts
                 Â·gc.time:            7820,000 ms


# Run progress: 46,67% complete, ETA 00:13:51
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
907011,813 ops/s
# Warmup Iteration   2: 874986,918 ops/s
# Warmup Iteration   3: 912175,651 ops/s
# Warmup Iteration   4: 905222,833 ops/s
# Warmup Iteration   5: 916379,952 ops/s
Iteration   1: 938464,862 ops/s
                 Â·gc.alloc.rate:      16761,007 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           401,000 counts
                 Â·gc.time:            7710,000 ms

Iteration   2: 912443,036 ops/s
                 Â·gc.alloc.rate:      16296,197 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           380,000 counts
                 Â·gc.time:            7419,000 ms

Iteration   3: 885419,732 ops/s
                 Â·gc.alloc.rate:      15813,506 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           380,000 counts
                 Â·gc.time:            7645,000 ms

Iteration   4: 890230,477 ops/s
                 Â·gc.alloc.rate:      15899,113 MB/sec
                 Â·gc.alloc.rate.norm: 18728,001 B/op
                 Â·gc.count:           381,000 counts
                 Â·gc.time:            7557,000 ms

Iteration   5: 875330,963 ops/s
                 Â·gc.alloc.rate:      15630,977 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           374,000 counts
                 Â·gc.time:            7629,000 ms


# Run progress: 53,33% complete, ETA 00:12:09
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
816734,279 ops/s
# Warmup Iteration   2: 908112,387 ops/s
# Warmup Iteration   3: 887517,458 ops/s
# Warmup Iteration   4: 874430,499 ops/s
# Warmup Iteration   5: 885015,191 ops/s
Iteration   1: 899840,495 ops/s
                 Â·gc.alloc.rate:      16071,131 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           384,000 counts
                 Â·gc.time:            7633,000 ms

Iteration   2: 895838,108 ops/s
                 Â·gc.alloc.rate:      15999,743 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           392,000 counts
                 Â·gc.time:            7841,000 ms

Iteration   3: 812934,555 ops/s
                 Â·gc.alloc.rate:      14519,152 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           345,000 counts
                 Â·gc.time:            7306,000 ms

Iteration   4: 914760,438 ops/s
                 Â·gc.alloc.rate:      16337,457 MB/sec
                 Â·gc.alloc.rate.norm: 18728,001 B/op
                 Â·gc.count:           396,000 counts
                 Â·gc.time:            7800,000 ms

Iteration   5: 917958,344 ops/s
                 Â·gc.alloc.rate:      16394,574 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           394,000 counts
                 Â·gc.time:            7774,000 ms


# Run progress: 60,00% complete, ETA 00:10:26
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
897089,048 ops/s
# Warmup Iteration   2: 894352,473 ops/s
# Warmup Iteration   3: 872086,694 ops/s
# Warmup Iteration   4: 899831,972 ops/s
# Warmup Iteration   5: 908964,139 ops/s
Iteration   1: 887680,934 ops/s
                 Â·gc.alloc.rate:      15853,923 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           380,000 counts
                 Â·gc.time:            7622,000 ms

Iteration   2: 905526,173 ops/s
                 Â·gc.alloc.rate:      16172,616 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           384,000 counts
                 Â·gc.time:            7613,000 ms

Iteration   3: 900012,827 ops/s
                 Â·gc.alloc.rate:      16073,971 MB/sec
                 Â·gc.alloc.rate.norm: 18728,001 B/op
                 Â·gc.count:           380,000 counts
                 Â·gc.time:            7526,000 ms

Iteration   4: 877228,580 ops/s
                 Â·gc.alloc.rate:      15667,227 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           376,000 counts
                 Â·gc.time:            7627,000 ms

Iteration   5: 881973,949 ops/s
                 Â·gc.alloc.rate:      15749,262 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           383,000 counts
                 Â·gc.time:            7785,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc":
  892919,152 Â±(99.9%) 22532,379 ops/s [Average]
  (min, avg, max) = (812934,555, 892919,152, 938464,862), stdev = 30080,082
  CI (99.9%): [870386,772, 915451,531] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate":
  15947,168 Â±(99.9%) 402,466 MB/sec [Average]
  (min, avg, max) = (14519,152, 15947,168, 16761,007), stdev = 537,280
  CI (99.9%): [15544,703, 16349,634] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm":
  18728,000 Â±(99.9%) 0,001 B/op [Average]
  (min, avg, max) = (18728,000, 18728,000, 18728,002), stdev = 0,001
  CI (99.9%): [18728,000, 18728,001] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.count":
  9579,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (345,000, 383,160, 401,000), stdev = 11,940
  CI (99.9%): [9579,000, 9579,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.time":
  191185,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (7306,000, 7647,400, 7841,000), stdev = 131,420
  CI (99.9%): [191185,000, 191185,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseZGC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc
# Parameters: (percentageOfRetainedHeap = P_75)

# Run progress: 66,67% complete, ETA 00:08:40
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
299338,107 ops/s
# Warmup Iteration   2: 299907,246 ops/s
# Warmup Iteration   3: 300026,473 ops/s
# Warmup Iteration   4: 298122,318 ops/s
# Warmup Iteration   5: 294137,656 ops/s
Iteration   1: 298178,426 ops/s
                 Â·gc.alloc.rate:      5325,521 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           200,000 counts
                 Â·gc.time:            7982,000 ms

Iteration   2: 296095,168 ops/s
                 Â·gc.alloc.rate:      5288,224 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           200,000 counts
                 Â·gc.time:            7972,000 ms

Iteration   3: 297921,696 ops/s
                 Â·gc.alloc.rate:      5320,872 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           202,000 counts
                 Â·gc.time:            8156,000 ms

Iteration   4: 293316,386 ops/s
                 Â·gc.alloc.rate:      5238,563 MB/sec
                 Â·gc.alloc.rate.norm: 18728,004 B/op
                 Â·gc.count:           198,000 counts
                 Â·gc.time:            7856,000 ms

Iteration   5: 303336,361 ops/s
                 Â·gc.alloc.rate:      5416,732 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           202,000 counts
                 Â·gc.time:            8096,000 ms


# Run progress: 73,33% complete, ETA 00:06:57
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
297992,412 ops/s
# Warmup Iteration   2: 298492,085 ops/s
# Warmup Iteration   3: 299514,781 ops/s
# Warmup Iteration   4: 295640,443 ops/s
# Warmup Iteration   5: 299268,039 ops/s
Iteration   1: 299427,256 ops/s
                 Â·gc.alloc.rate:      5347,754 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           202,000 counts
                 Â·gc.time:            8051,000 ms

Iteration   2: 300069,151 ops/s
                 Â·gc.alloc.rate:      5359,212 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           200,000 counts
                 Â·gc.time:            7865,000 ms

Iteration   3: 298735,914 ops/s
                 Â·gc.alloc.rate:      5335,365 MB/sec
                 Â·gc.alloc.rate.norm: 18728,004 B/op
                 Â·gc.count:           200,000 counts
                 Â·gc.time:            7918,000 ms

Iteration   4: 295741,852 ops/s
                 Â·gc.alloc.rate:      5282,003 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           202,000 counts
                 Â·gc.time:            7894,000 ms

Iteration   5: 299355,381 ops/s
                 Â·gc.alloc.rate:      5345,667 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           202,000 counts
                 Â·gc.time:            8034,000 ms


# Run progress: 80,00% complete, ETA 00:05:13
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
297525,114 ops/s
# Warmup Iteration   2: 298570,072 ops/s
# Warmup Iteration   3: 299424,007 ops/s
# Warmup Iteration   4: 301686,031 ops/s
# Warmup Iteration   5: 296815,242 ops/s
Iteration   1: 297814,215 ops/s
                 Â·gc.alloc.rate:      5318,929 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           200,000 counts
                 Â·gc.time:            7914,000 ms

Iteration   2: 295495,333 ops/s
                 Â·gc.alloc.rate:      5277,554 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           202,000 counts
                 Â·gc.time:            7894,000 ms

Iteration   3: 298517,446 ops/s
                 Â·gc.alloc.rate:      5331,496 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           202,000 counts
                 Â·gc.time:            8050,000 ms

Iteration   4: 298837,346 ops/s
                 Â·gc.alloc.rate:      5337,097 MB/sec
                 Â·gc.alloc.rate.norm: 18728,004 B/op
                 Â·gc.count:           200,000 counts
                 Â·gc.time:            7872,000 ms

Iteration   5: 298116,633 ops/s
                 Â·gc.alloc.rate:      5323,521 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           200,000 counts
                 Â·gc.time:            7899,000 ms


# Run progress: 86,67% complete, ETA 00:03:28
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
301513,064 ops/s
# Warmup Iteration   2: 301450,621 ops/s
# Warmup Iteration   3: 294784,829 ops/s
# Warmup Iteration   4: 299612,444 ops/s
# Warmup Iteration   5: 300282,898 ops/s
Iteration   1: 301352,699 ops/s
                 Â·gc.alloc.rate:      5382,184 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           200,000 counts
                 Â·gc.time:            7870,000 ms

Iteration   2: 293859,831 ops/s
                 Â·gc.alloc.rate:      5248,409 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           202,000 counts
                 Â·gc.time:            7903,000 ms

Iteration   3: 299321,878 ops/s
                 Â·gc.alloc.rate:      5345,881 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           202,000 counts
                 Â·gc.time:            8081,000 ms

Iteration   4: 300287,903 ops/s
                 Â·gc.alloc.rate:      5362,992 MB/sec
                 Â·gc.alloc.rate.norm: 18728,004 B/op
                 Â·gc.count:           200,000 counts
                 Â·gc.time:            7880,000 ms

Iteration   5: 295076,540 ops/s
                 Â·gc.alloc.rate:      5269,154 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           204,000 counts
                 Â·gc.time:            8067,000 ms


# Run progress: 93,33% complete, ETA 00:01:44
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
298424,054 ops/s
# Warmup Iteration   2: 301462,530 ops/s
# Warmup Iteration   3: 297691,334 ops/s
# Warmup Iteration   4: 300068,573 ops/s
# Warmup Iteration   5: 291645,038 ops/s
Iteration   1: 298140,136 ops/s
                 Â·gc.alloc.rate:      5324,759 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           202,000 counts
                 Â·gc.time:            8057,000 ms

Iteration   2: 298096,165 ops/s
                 Â·gc.alloc.rate:      5323,991 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           200,000 counts
                 Â·gc.time:            7931,000 ms

Iteration   3: 301084,338 ops/s
                 Â·gc.alloc.rate:      5377,358 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           200,000 counts
                 Â·gc.time:            7881,000 ms

Iteration   4: 298791,313 ops/s
                 Â·gc.alloc.rate:      5336,287 MB/sec
                 Â·gc.alloc.rate.norm: 18728,004 B/op
                 Â·gc.count:           200,000 counts
                 Â·gc.time:            7882,000 ms

Iteration   5: 297284,424 ops/s
                 Â·gc.alloc.rate:      5308,699 MB/sec
                 Â·gc.alloc.rate.norm: 18728,000 B/op
                 Â·gc.count:           201,000 counts
                 Â·gc.time:            7905,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc":
  298170,152 Â±(99.9%) 1736,889 ops/s [Average]
  (min, avg, max) = (293316,386, 298170,152, 303336,361), stdev = 2318,697
  CI (99.9%): [296433,263, 299907,041] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate":
  5325,129 Â±(99.9%) 30,989 MB/sec [Average]
  (min, avg, max) = (5238,563, 5325,129, 5416,732), stdev = 41,370
  CI (99.9%): [5294,140, 5356,118] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm":
  18728,001 Â±(99.9%) 0,001 B/op [Average]
  (min, avg, max) = (18728,000, 18728,001, 18728,004), stdev = 0,002
  CI (99.9%): [18728,000, 18728,002] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.count":
  5023,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (198,000, 200,920, 204,000), stdev = 1,288
  CI (99.9%): [5023,000, 5023,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.time":
  198910,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (7856,000, 7956,400, 8156,000), stdev = 89,538
  CI (99.9%): [198910,000, 198910,000] (assumes normal distribution)


# Run complete. Total time: 00:26:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                                     (percentageOfRetainedHeap)   Mode  Cnt        Score       Error   Units
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc                                            P_25  thrpt   25  1193439,283 Â± 21404,652   ops/s
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate                             P_25  thrpt   25    21314,255 Â±   382,101  MB/sec
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm                        P_25  thrpt   25    18728,000 Â±     0,001    B/op
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.count                                  P_25  thrpt   25    10017,000              counts
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.time                                   P_25  thrpt   25   105578,000                  ms
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc                                            P_50  thrpt   25   892919,152 Â± 22532,379   ops/s
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate                             P_50  thrpt   25    15947,168 Â±   402,466  MB/sec
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm                        P_50  thrpt   25    18728,000 Â±     0,001    B/op
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.count                                  P_50  thrpt   25     9579,000              counts
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.time                                   P_50  thrpt   25   191185,000                  ms
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc                                            P_75  thrpt   25   298170,152 Â±  1736,889   ops/s
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate                             P_75  thrpt   25     5325,129 Â±    30,989  MB/sec
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm                        P_75  thrpt   25    18728,001 Â±     0,001    B/op
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.count                                  P_75  thrpt   25     5023,000              counts
HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark.gc:Â·gc.time                                   P_75  thrpt   25   198910,000                  ms

Benchmark result is saved to results/jdk-17/arm64/openjdk-hotspot-vm/HeapMemoryAllocatorWithConstantRetrainedHeapBenchmark_zGC_2threads.csv

Running HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark benchmark ...
java  -jar benchmarks/target/benchmarks.jar .*HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.* -foe true -wi 5 -w 10 -i 5 -r 10 -f 5 -rf csv -rff results/jdk-17/arm64/openjdk-hotspot-vm/HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark_serialGC_1thread.csv -t 1 -prof gc -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseSerialGC"

# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc
# Parameters: (percentageOfRetainedHeap = P_0)

# Run progress: 0,00% complete, ETA 00:25:00
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,242 ops/s
# Warmup Iteration   2: 0,269 ops/s
# Warmup Iteration   3: 0,237 ops/s
# Warmup Iteration   4: 0,232 ops/s
# Warmup Iteration   5: 0,229 ops/s
Iteration   1: 0,223 ops/s
                 Â·gc.alloc.rate:      850,467 MB/sec
                 Â·gc.alloc.rate.norm: 4006573128,000 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            12720,000 ms

Iteration   2: 0,212 ops/s
                 Â·gc.alloc.rate:      809,407 MB/sec
                 Â·gc.alloc.rate.norm: 4006573128,000 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            13404,000 ms

Iteration   3: 0,216 ops/s
                 Â·gc.alloc.rate:      825,369 MB/sec
                 Â·gc.alloc.rate.norm: 4006573128,000 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            13131,000 ms

Iteration   4: 0,222 ops/s
                 Â·gc.alloc.rate:      850,085 MB/sec
                 Â·gc.alloc.rate.norm: 4006573138,667 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            12726,000 ms

Iteration   5: 0,215 ops/s
                 Â·gc.alloc.rate:      821,380 MB/sec
                 Â·gc.alloc.rate.norm: 4006573149,333 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            13199,000 ms


# Run progress: 6,67% complete, ETA 00:31:09
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,222 ops/s
# Warmup Iteration   2: 0,220 ops/s
# Warmup Iteration   3: 0,239 ops/s
# Warmup Iteration   4: 0,290 ops/s
# Warmup Iteration   5: 0,221 ops/s
Iteration   1: 0,210 ops/s
                 Â·gc.alloc.rate:      802,737 MB/sec
                 Â·gc.alloc.rate.norm: 4006573128,000 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            13514,000 ms

Iteration   2: 0,228 ops/s
                 Â·gc.alloc.rate:      872,173 MB/sec
                 Â·gc.alloc.rate.norm: 4006573128,000 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            12377,000 ms

Iteration   3: 0,226 ops/s
                 Â·gc.alloc.rate:      862,197 MB/sec
                 Â·gc.alloc.rate.norm: 4006573128,000 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            12529,000 ms

Iteration   4: 0,253 ops/s
                 Â·gc.alloc.rate:      964,899 MB/sec
                 Â·gc.alloc.rate.norm: 4006573138,667 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            11102,000 ms

Iteration   5: 0,249 ops/s
                 Â·gc.alloc.rate:      950,333 MB/sec
                 Â·gc.alloc.rate.norm: 4006573138,667 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            11291,000 ms


# Run progress: 13,33% complete, ETA 00:28:44
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,238 ops/s
# Warmup Iteration   2: 0,234 ops/s
# Warmup Iteration   3: 0,214 ops/s
# Warmup Iteration   4: 0,219 ops/s
# Warmup Iteration   5: 0,284 ops/s
Iteration   1: 0,215 ops/s
                 Â·gc.alloc.rate:      821,881 MB/sec
                 Â·gc.alloc.rate.norm: 4006573128,000 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            13174,000 ms

Iteration   2: 0,209 ops/s
                 Â·gc.alloc.rate:      799,399 MB/sec
                 Â·gc.alloc.rate.norm: 4006573128,000 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            13570,000 ms

Iteration   3: 0,209 ops/s
                 Â·gc.alloc.rate:      799,030 MB/sec
                 Â·gc.alloc.rate.norm: 4006573128,000 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            13575,000 ms

Iteration   4: 0,212 ops/s
                 Â·gc.alloc.rate:      810,003 MB/sec
                 Â·gc.alloc.rate.norm: 4006573138,667 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            13378,000 ms

Iteration   5: 0,214 ops/s
                 Â·gc.alloc.rate:      817,969 MB/sec
                 Â·gc.alloc.rate.norm: 4006573138,667 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            13241,000 ms


# Run progress: 20,00% complete, ETA 00:26:43
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,223 ops/s
# Warmup Iteration   2: 0,213 ops/s
# Warmup Iteration   3: 0,216 ops/s
# Warmup Iteration   4: 0,222 ops/s
# Warmup Iteration   5: 0,210 ops/s
Iteration   1: 0,214 ops/s
                 Â·gc.alloc.rate:      816,572 MB/sec
                 Â·gc.alloc.rate.norm: 4006573128,000 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            13279,000 ms

Iteration   2: 0,212 ops/s
                 Â·gc.alloc.rate:      808,563 MB/sec
                 Â·gc.alloc.rate.norm: 4006573138,667 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            13420,000 ms

Iteration   3: 0,217 ops/s
                 Â·gc.alloc.rate:      827,453 MB/sec
                 Â·gc.alloc.rate.norm: 4006573128,000 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            13091,000 ms

Iteration   4: 0,226 ops/s
                 Â·gc.alloc.rate:      861,779 MB/sec
                 Â·gc.alloc.rate.norm: 4006573149,333 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            12543,000 ms

Iteration   5: 0,212 ops/s
                 Â·gc.alloc.rate:      810,195 MB/sec
                 Â·gc.alloc.rate.norm: 4006573128,000 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            13390,000 ms


# Run progress: 26,67% complete, ETA 00:24:49
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,230 ops/s
# Warmup Iteration   2: 0,214 ops/s
# Warmup Iteration   3: 0,229 ops/s
# Warmup Iteration   4: 0,229 ops/s
# Warmup Iteration   5: 0,228 ops/s
Iteration   1: 0,231 ops/s
                 Â·gc.alloc.rate:      882,841 MB/sec
                 Â·gc.alloc.rate.norm: 4006573128,000 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            12196,000 ms

Iteration   2: 0,229 ops/s
                 Â·gc.alloc.rate:      876,763 MB/sec
                 Â·gc.alloc.rate.norm: 4006573128,000 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            12285,000 ms

Iteration   3: 0,230 ops/s
                 Â·gc.alloc.rate:      879,042 MB/sec
                 Â·gc.alloc.rate.norm: 4006573128,000 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            12251,000 ms

Iteration   4: 0,231 ops/s
                 Â·gc.alloc.rate:      882,123 MB/sec
                 Â·gc.alloc.rate.norm: 4006573149,333 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            12210,000 ms

Iteration   5: 0,237 ops/s
                 Â·gc.alloc.rate:      905,087 MB/sec
                 Â·gc.alloc.rate.norm: 4006573138,667 B/op
                 Â·gc.count:           15,000 counts
                 Â·gc.time:            11879,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc":
  0,222 Â±(99.9%) 0,009 ops/s [Average]
  (min, avg, max) = (0,209, 0,222, 0,253), stdev = 0,012
  CI (99.9%): [0,213, 0,231] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.alloc.rate":
  848,310 Â±(99.9%) 34,016 MB/sec [Average]
  (min, avg, max) = (799,030, 848,310, 964,899), stdev = 45,410
  CI (99.9%): [814,294, 882,326] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm":
  4006573133,547 Â±(99.9%) 5,706 B/op [Average]
  (min, avg, max) = (4006573128,000, 4006573133,547, 4006573149,333), stdev = 7,618
  CI (99.9%): [4006573127,841, 4006573139,253] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.count":
  375,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (15,000, 15,000, 15,000), stdev = 0,001
  CI (99.9%): [375,000, 375,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.time":
  319475,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (11102,000, 12779,000, 13575,000), stdev = 696,997
  CI (99.9%): [319475,000, 319475,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc
# Parameters: (percentageOfRetainedHeap = P_25)

# Run progress: 33,33% complete, ETA 00:22:34
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,247 ops/s
# Warmup Iteration   2: 0,250 ops/s
# Warmup Iteration   3: 0,231 ops/s
# Warmup Iteration   4: 0,241 ops/s
# Warmup Iteration   5: 0,238 ops/s
Iteration   1: 0,246 ops/s
                 Â·gc.alloc.rate:      704,698 MB/sec
                 Â·gc.alloc.rate.norm: 3004916232,000 B/op
                 Â·gc.count:           12,000 counts
                 Â·gc.time:            11573,000 ms

Iteration   2: 0,238 ops/s
                 Â·gc.alloc.rate:      681,569 MB/sec
                 Â·gc.alloc.rate.norm: 3004916232,000 B/op
                 Â·gc.count:           12,000 counts
                 Â·gc.time:            11986,000 ms

Iteration   3: 0,241 ops/s
                 Â·gc.alloc.rate:      691,779 MB/sec
                 Â·gc.alloc.rate.norm: 3004916232,000 B/op
                 Â·gc.count:           12,000 counts
                 Â·gc.time:            11798,000 ms

Iteration   4: 0,256 ops/s
                 Â·gc.alloc.rate:      734,719 MB/sec
                 Â·gc.alloc.rate.norm: 3004916242,667 B/op
                 Â·gc.count:           12,000 counts
                 Â·gc.time:            11073,000 ms

Iteration   5: 0,240 ops/s
                 Â·gc.alloc.rate:      687,134 MB/sec
                 Â·gc.alloc.rate.norm: 3004916242,667 B/op
                 Â·gc.count:           12,000 counts
                 Â·gc.time:            11877,000 ms


# Run progress: 40,00% complete, ETA 00:20:05
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,253 ops/s
# Warmup Iteration   2: 0,258 ops/s
# Warmup Iteration   3: 0,275 ops/s
# Warmup Iteration   4: 0,239 ops/s
# Warmup Iteration   5: 0,242 ops/s
Iteration   1: 0,238 ops/s
                 Â·gc.alloc.rate:      681,687 MB/sec
                 Â·gc.alloc.rate.norm: 3004916232,000 B/op
                 Â·gc.count:           12,000 counts
                 Â·gc.time:            11990,000 ms

Iteration   2: 0,259 ops/s
                 Â·gc.alloc.rate:      743,470 MB/sec
                 Â·gc.alloc.rate.norm: 3004916242,667 B/op
                 Â·gc.count:           12,000 counts
                 Â·gc.time:            10939,000 ms

Iteration   3: 0,239 ops/s
                 Â·gc.alloc.rate:      684,290 MB/sec
                 Â·gc.alloc.rate.norm: 3004916232,000 B/op
                 Â·gc.count:           12,000 counts
                 Â·gc.time:            11941,000 ms

Iteration   4: 0,240 ops/s
                 Â·gc.alloc.rate:      688,242 MB/sec
                 Â·gc.alloc.rate.norm: 3004916242,667 B/op
                 Â·gc.count:           12,000 counts
                 Â·gc.time:            11872,000 ms

Iteration   5: 0,245 ops/s
                 Â·gc.alloc.rate:      703,203 MB/sec
                 Â·gc.alloc.rate.norm: 3004916242,667 B/op
                 Â·gc.count:           12,000 counts
                 Â·gc.time:            11604,000 ms


# Run progress: 46,67% complete, ETA 00:17:41
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,251 ops/s
# Warmup Iteration   2: 0,262 ops/s
# Warmup Iteration   3: 0,250 ops/s
# Warmup Iteration   4: 0,261 ops/s
# Warmup Iteration   5: 0,264 ops/s
Iteration   1: 0,268 ops/s
                 Â·gc.alloc.rate:      766,724 MB/sec
                 Â·gc.alloc.rate.norm: 3004916232,000 B/op
                 Â·gc.count:           12,000 counts
                 Â·gc.time:            10594,000 ms

Iteration   2: 0,294 ops/s
                 Â·gc.alloc.rate:      841,743 MB/sec
                 Â·gc.alloc.rate.norm: 3004916232,000 B/op
                 Â·gc.count:           12,000 counts
                 Â·gc.time:            9595,000 ms

Iteration   3: 0,295 ops/s
                 Â·gc.alloc.rate:      846,637 MB/sec
                 Â·gc.alloc.rate.norm: 3004916232,000 B/op
                 Â·gc.count:           12,000 counts
                 Â·gc.time:            9532,000 ms

Iteration   4: 0,272 ops/s
                 Â·gc.alloc.rate:      778,406 MB/sec
                 Â·gc.alloc.rate.norm: 3004916242,667 B/op
                 Â·gc.count:           12,000 counts
                 Â·gc.time:            10423,000 ms

Iteration   5: 0,295 ops/s
                 Â·gc.alloc.rate:      844,691 MB/sec
                 Â·gc.alloc.rate.norm: 3004916242,667 B/op
                 Â·gc.count:           12,000 counts
                 Â·gc.time:            9561,000 ms


# Run progress: 53,33% complete, ETA 00:15:12
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,255 ops/s
# Warmup Iteration   2: 0,240 ops/s
# Warmup Iteration   3: 0,254 ops/s
# Warmup Iteration   4: 0,242 ops/s
# Warmup Iteration   5: 0,245 ops/s
Iteration   1: 0,258 ops/s
                 Â·gc.alloc.rate:      738,004 MB/sec
                 Â·gc.alloc.rate.norm: 3004916232,000 B/op
                 Â·gc.count:           12,000 counts
                 Â·gc.time:            11025,000 ms

Iteration   2: 0,245 ops/s
                 Â·gc.alloc.rate:      702,691 MB/sec
                 Â·gc.alloc.rate.norm: 3004916232,000 B/op
                 Â·gc.count:           12,000 counts
                 Â·gc.time:            11613,000 ms

Iteration   3: 0,256 ops/s
                 Â·gc.alloc.rate:      734,899 MB/sec
                 Â·gc.alloc.rate.norm: 3004916232,000 B/op
                 Â·gc.count:           12,000 counts
                 Â·gc.time:            11073,000 ms

Iteration   4: 0,244 ops/s
                 Â·gc.alloc.rate:      698,655 MB/sec
                 Â·gc.alloc.rate.norm: 3004916242,667 B/op
                 Â·gc.count:           12,000 counts
                 Â·gc.time:            11684,000 ms

Iteration   5: 0,256 ops/s
                 Â·gc.alloc.rate:      734,645 MB/sec
                 Â·gc.alloc.rate.norm: 3004916242,667 B/op
                 Â·gc.count:           12,000 counts
                 Â·gc.time:            11080,000 ms


# Run progress: 60,00% complete, ETA 00:12:57
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,270 ops/s
# Warmup Iteration   2: 0,265 ops/s
# Warmup Iteration   3: 0,239 ops/s
# Warmup Iteration   4: 0,244 ops/s
# Warmup Iteration   5: 0,285 ops/s
Iteration   1: 0,262 ops/s
                 Â·gc.alloc.rate:      749,998 MB/sec
                 Â·gc.alloc.rate.norm: 3004916232,000 B/op
                 Â·gc.count:           12,000 counts
                 Â·gc.time:            10837,000 ms

Iteration   2: 0,262 ops/s
                 Â·gc.alloc.rate:      749,517 MB/sec
                 Â·gc.alloc.rate.norm: 3004916232,000 B/op
                 Â·gc.count:           12,000 counts
                 Â·gc.time:            10847,000 ms

Iteration   3: 0,260 ops/s
                 Â·gc.alloc.rate:      745,452 MB/sec
                 Â·gc.alloc.rate.norm: 3004916242,667 B/op
                 Â·gc.count:           12,000 counts
                 Â·gc.time:            10911,000 ms

Iteration   4: 0,244 ops/s
                 Â·gc.alloc.rate:      699,744 MB/sec
                 Â·gc.alloc.rate.norm: 3004916232,000 B/op
                 Â·gc.count:           12,000 counts
                 Â·gc.time:            11660,000 ms

Iteration   5: 0,243 ops/s
                 Â·gc.alloc.rate:      695,383 MB/sec
                 Â·gc.alloc.rate.norm: 3004916242,667 B/op
                 Â·gc.count:           12,000 counts
                 Â·gc.time:            11740,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc":
  0,256 Â±(99.9%) 0,013 ops/s [Average]
  (min, avg, max) = (0,238, 0,256, 0,295), stdev = 0,018
  CI (99.9%): [0,243, 0,269] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.alloc.rate":
  733,119 Â±(99.9%) 37,777 MB/sec [Average]
  (min, avg, max) = (681,569, 733,119, 846,637), stdev = 50,431
  CI (99.9%): [695,343, 770,896] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm":
  3004916236,693 Â±(99.9%) 4,048 B/op [Average]
  (min, avg, max) = (3004916232,000, 3004916236,693, 3004916242,667), stdev = 5,404
  CI (99.9%): [3004916232,645, 3004916240,741] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.count":
  300,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (12,000, 12,000, 12,000), stdev = 0,001
  CI (99.9%): [300,000, 300,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.time":
  278828,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (9532,000, 11153,120, 11990,000), stdev = 755,942
  CI (99.9%): [278828,000, 278828,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc
# Parameters: (percentageOfRetainedHeap = P_50)

# Run progress: 66,67% complete, ETA 00:10:42
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,227 ops/s
# Warmup Iteration   2: 0,226 ops/s
# Warmup Iteration   3: 0,211 ops/s
# Warmup Iteration   4: 0,214 ops/s
# Warmup Iteration   5: 0,231 ops/s
Iteration   1: 0,211 ops/s
                 Â·gc.alloc.rate:      403,350 MB/sec
                 Â·gc.alloc.rate.norm: 2003277536,000 B/op
                 Â·gc.count:           9,000 counts
                 Â·gc.time:            13742,000 ms

Iteration   2: 0,240 ops/s
                 Â·gc.alloc.rate:      457,787 MB/sec
                 Â·gc.alloc.rate.norm: 2003277536,000 B/op
                 Â·gc.count:           9,000 counts
                 Â·gc.time:            12050,000 ms

Iteration   3: 0,219 ops/s
                 Â·gc.alloc.rate:      418,584 MB/sec
                 Â·gc.alloc.rate.norm: 2003277536,000 B/op
                 Â·gc.count:           9,000 counts
                 Â·gc.time:            13225,000 ms

Iteration   4: 0,239 ops/s
                 Â·gc.alloc.rate:      456,633 MB/sec
                 Â·gc.alloc.rate.norm: 2003277546,667 B/op
                 Â·gc.count:           9,000 counts
                 Â·gc.time:            12082,000 ms

Iteration   5: 0,241 ops/s
                 Â·gc.alloc.rate:      459,703 MB/sec
                 Â·gc.alloc.rate.norm: 2003277546,667 B/op
                 Â·gc.count:           9,000 counts
                 Â·gc.time:            12000,000 ms


# Run progress: 73,33% complete, ETA 00:08:37
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,265 ops/s
# Warmup Iteration   2: 0,221 ops/s
# Warmup Iteration   3: 0,207 ops/s
# Warmup Iteration   4: 0,213 ops/s
# Warmup Iteration   5: 0,241 ops/s
Iteration   1: 0,214 ops/s
                 Â·gc.alloc.rate:      409,054 MB/sec
                 Â·gc.alloc.rate.norm: 2003277546,667 B/op
                 Â·gc.count:           9,000 counts
                 Â·gc.time:            13546,000 ms

Iteration   2: 0,240 ops/s
                 Â·gc.alloc.rate:      458,610 MB/sec
                 Â·gc.alloc.rate.norm: 2003277536,000 B/op
                 Â·gc.count:           9,000 counts
                 Â·gc.time:            12033,000 ms

Iteration   3: 0,219 ops/s
                 Â·gc.alloc.rate:      419,160 MB/sec
                 Â·gc.alloc.rate.norm: 2003277557,333 B/op
                 Â·gc.count:           9,000 counts
                 Â·gc.time:            13209,000 ms

Iteration   4: 0,251 ops/s
                 Â·gc.alloc.rate:      480,053 MB/sec
                 Â·gc.alloc.rate.norm: 2003277546,667 B/op
                 Â·gc.count:           9,000 counts
                 Â·gc.time:            11475,000 ms

Iteration   5: 0,227 ops/s
                 Â·gc.alloc.rate:      434,139 MB/sec
                 Â·gc.alloc.rate.norm: 2003277546,667 B/op
                 Â·gc.count:           9,000 counts
                 Â·gc.time:            12734,000 ms


# Run progress: 80,00% complete, ETA 00:06:29
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,231 ops/s
# Warmup Iteration   2: 0,218 ops/s
# Warmup Iteration   3: 0,218 ops/s
# Warmup Iteration   4: 0,232 ops/s
# Warmup Iteration   5: 0,243 ops/s
Iteration   1: 0,228 ops/s
                 Â·gc.alloc.rate:      435,702 MB/sec
                 Â·gc.alloc.rate.norm: 2003277546,667 B/op
                 Â·gc.count:           9,000 counts
                 Â·gc.time:            12700,000 ms

Iteration   2: 0,254 ops/s
                 Â·gc.alloc.rate:      486,179 MB/sec
                 Â·gc.alloc.rate.norm: 2003277546,667 B/op
                 Â·gc.count:           9,000 counts
                 Â·gc.time:            11329,000 ms

Iteration   3: 0,223 ops/s
                 Â·gc.alloc.rate:      426,098 MB/sec
                 Â·gc.alloc.rate.norm: 2003277557,333 B/op
                 Â·gc.count:           9,000 counts
                 Â·gc.time:            12991,000 ms

Iteration   4: 0,268 ops/s
                 Â·gc.alloc.rate:      511,071 MB/sec
                 Â·gc.alloc.rate.norm: 2003277536,000 B/op
                 Â·gc.count:           9,000 counts
                 Â·gc.time:            10759,000 ms

Iteration   5: 0,228 ops/s
                 Â·gc.alloc.rate:      436,511 MB/sec
                 Â·gc.alloc.rate.norm: 2003277557,333 B/op
                 Â·gc.count:           9,000 counts
                 Â·gc.time:            12677,000 ms


# Run progress: 86,67% complete, ETA 00:04:19
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,219 ops/s
# Warmup Iteration   2: 0,215 ops/s
# Warmup Iteration   3: 0,191 ops/s
# Warmup Iteration   4: 0,236 ops/s
# Warmup Iteration   5: 0,215 ops/s
Iteration   1: 0,221 ops/s
                 Â·gc.alloc.rate:      423,063 MB/sec
                 Â·gc.alloc.rate.norm: 2003277536,000 B/op
                 Â·gc.count:           9,000 counts
                 Â·gc.time:            13092,000 ms

Iteration   2: 0,215 ops/s
                 Â·gc.alloc.rate:      410,979 MB/sec
                 Â·gc.alloc.rate.norm: 2003277536,000 B/op
                 Â·gc.count:           9,000 counts
                 Â·gc.time:            13488,000 ms

Iteration   3: 0,193 ops/s
                 Â·gc.alloc.rate:      368,909 MB/sec
                 Â·gc.alloc.rate.norm: 2003277604,000 B/op
                 Â·gc.count:           6,000 counts
                 Â·gc.time:            10054,000 ms

Iteration   4: 0,228 ops/s
                 Â·gc.alloc.rate:      434,956 MB/sec
                 Â·gc.alloc.rate.norm: 2003277536,000 B/op
                 Â·gc.count:           9,000 counts
                 Â·gc.time:            12720,000 ms

Iteration   5: 0,218 ops/s
                 Â·gc.alloc.rate:      416,203 MB/sec
                 Â·gc.alloc.rate.norm: 2003277546,667 B/op
                 Â·gc.count:           9,000 counts
                 Â·gc.time:            13314,000 ms


# Run progress: 93,33% complete, ETA 00:02:10
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,211 ops/s
# Warmup Iteration   2: 0,187 ops/s
# Warmup Iteration   3: 0,187 ops/s
# Warmup Iteration   4: 0,221 ops/s
# Warmup Iteration   5: 0,181 ops/s
Iteration   1: 0,184 ops/s
                 Â·gc.alloc.rate:      351,454 MB/sec
                 Â·gc.alloc.rate.norm: 2003277536,000 B/op
                 Â·gc.count:           9,000 counts
                 Â·gc.time:            15850,000 ms

Iteration   2: 0,199 ops/s
                 Â·gc.alloc.rate:      381,021 MB/sec
                 Â·gc.alloc.rate.norm: 2003277536,000 B/op
                 Â·gc.count:           9,000 counts
                 Â·gc.time:            14585,000 ms

Iteration   3: 0,192 ops/s
                 Â·gc.alloc.rate:      367,181 MB/sec
                 Â·gc.alloc.rate.norm: 2003277536,000 B/op
                 Â·gc.count:           9,000 counts
                 Â·gc.time:            15155,000 ms

Iteration   4: 0,210 ops/s
                 Â·gc.alloc.rate:      400,435 MB/sec
                 Â·gc.alloc.rate.norm: 2003277557,333 B/op
                 Â·gc.count:           9,000 counts
                 Â·gc.time:            13856,000 ms

Iteration   5: 0,220 ops/s
                 Â·gc.alloc.rate:      420,226 MB/sec
                 Â·gc.alloc.rate.norm: 2003277546,667 B/op
                 Â·gc.count:           9,000 counts
                 Â·gc.time:            13179,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc":
  0,223 Â±(99.9%) 0,015 ops/s [Average]
  (min, avg, max) = (0,184, 0,223, 0,268), stdev = 0,020
  CI (99.9%): [0,208, 0,238] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.alloc.rate":
  426,682 Â±(99.9%) 28,395 MB/sec [Average]
  (min, avg, max) = (351,454, 426,682, 511,071), stdev = 37,907
  CI (99.9%): [398,287, 455,078] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm":
  2003277545,973 Â±(99.9%) 10,792 B/op [Average]
  (min, avg, max) = (2003277536,000, 2003277545,973, 2003277604,000), stdev = 14,407
  CI (99.9%): [2003277535,181, 2003277556,766] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.count":
  222,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (6,000, 8,880, 9,000), stdev = 0,600
  CI (99.9%): [222,000, 222,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.time":
  321845,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (10054,000, 12873,800, 15850,000), stdev = 1287,379
  CI (99.9%): [321845,000, 321845,000] (assumes normal distribution)


# Run complete. Total time: 00:32:51

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                                  (percentageOfRetainedHeap)   Mode  Cnt           Score    Error   Units
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc                                             P_0  thrpt   25           0,222 Â±  0,009   ops/s
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.alloc.rate                              P_0  thrpt   25         848,310 Â± 34,016  MB/sec
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm                         P_0  thrpt   25  4006573133,547 Â±  5,706    B/op
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.count                                   P_0  thrpt   25         375,000           counts
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.time                                    P_0  thrpt   25      319475,000               ms
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc                                            P_25  thrpt   25           0,256 Â±  0,013   ops/s
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.alloc.rate                             P_25  thrpt   25         733,119 Â± 37,777  MB/sec
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm                        P_25  thrpt   25  3004916236,693 Â±  4,048    B/op
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.count                                  P_25  thrpt   25         300,000           counts
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.time                                   P_25  thrpt   25      278828,000               ms
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc                                            P_50  thrpt   25           0,223 Â±  0,015   ops/s
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.alloc.rate                             P_50  thrpt   25         426,682 Â± 28,395  MB/sec
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm                        P_50  thrpt   25  2003277545,973 Â± 10,792    B/op
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.count                                  P_50  thrpt   25         222,000           counts
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.time                                   P_50  thrpt   25      321845,000               ms

Benchmark result is saved to results/jdk-17/arm64/openjdk-hotspot-vm/HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark_serialGC_1thread.csv

Running HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark benchmark ...
java  -jar benchmarks/target/benchmarks.jar .*HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.* -foe true -wi 5 -w 10 -i 5 -r 10 -f 5 -rf csv -rff results/jdk-17/arm64/openjdk-hotspot-vm/HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark_serialGC_2threads.csv -t 2 -prof gc -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseSerialGC"

# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc
# Parameters: (percentageOfRetainedHeap = P_0)

# Run progress: 0,00% complete, ETA 00:25:00
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,461 ops/s
# Warmup Iteration   2: 0,481 ops/s
# Warmup Iteration   3: 0,502 ops/s
# Warmup Iteration   4: 0,497 ops/s
# Warmup Iteration   5: 0,466 ops/s
Iteration   1: 0,468 ops/s
                 Â·gc.alloc.rate:      979,668 MB/sec
                 Â·gc.alloc.rate.norm: 2003277539,429 B/op
                 Â·gc.count:           18,000 counts
                 Â·gc.time:            12821,000 ms

Iteration   2: 0,482 ops/s
                 Â·gc.alloc.rate:      1002,203 MB/sec
                 Â·gc.alloc.rate.norm: 2003277539,429 B/op
                 Â·gc.count:           18,000 counts
                 Â·gc.time:            12502,000 ms

Iteration   3: 0,503 ops/s
                 Â·gc.alloc.rate:      1033,141 MB/sec
                 Â·gc.alloc.rate.norm: 2003279090,286 B/op
                 Â·gc.count:           18,000 counts
                 Â·gc.time:            12134,000 ms

Iteration   4: 0,477 ops/s
                 Â·gc.alloc.rate:      996,554 MB/sec
                 Â·gc.alloc.rate.norm: 2003277539,429 B/op
                 Â·gc.count:           18,000 counts
                 Â·gc.time:            12613,000 ms

Iteration   5: 0,481 ops/s
                 Â·gc.alloc.rate:      1001,018 MB/sec
                 Â·gc.alloc.rate.norm: 2003277539,429 B/op
                 Â·gc.count:           18,000 counts
                 Â·gc.time:            12530,000 ms


# Run progress: 6,67% complete, ETA 00:32:32
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,501 ops/s
# Warmup Iteration   2: 0,517 ops/s
# Warmup Iteration   3: 0,489 ops/s
# Warmup Iteration   4: 0,472 ops/s
# Warmup Iteration   5: 0,489 ops/s
Iteration   1: 0,481 ops/s
                 Â·gc.alloc.rate:      999,875 MB/sec
                 Â·gc.alloc.rate.norm: 2003277539,429 B/op
                 Â·gc.count:           18,000 counts
                 Â·gc.time:            12567,000 ms

Iteration   2: 0,469 ops/s
                 Â·gc.alloc.rate:      984,646 MB/sec
                 Â·gc.alloc.rate.norm: 2003277539,429 B/op
                 Â·gc.count:           18,000 counts
                 Â·gc.time:            12785,000 ms

Iteration   3: 0,484 ops/s
                 Â·gc.alloc.rate:      1006,953 MB/sec
                 Â·gc.alloc.rate.norm: 2003277539,429 B/op
                 Â·gc.count:           18,000 counts
                 Â·gc.time:            12488,000 ms

Iteration   4: 0,524 ops/s
                 Â·gc.alloc.rate:      1067,809 MB/sec
                 Â·gc.alloc.rate.norm: 2003279090,286 B/op
                 Â·gc.count:           18,000 counts
                 Â·gc.time:            11709,000 ms

Iteration   5: 0,482 ops/s
                 Â·gc.alloc.rate:      1000,217 MB/sec
                 Â·gc.alloc.rate.norm: 2003277548,571 B/op
                 Â·gc.count:           18,000 counts
                 Â·gc.time:            12545,000 ms


# Run progress: 13,33% complete, ETA 00:29:58
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,522 ops/s
# Warmup Iteration   2: 0,468 ops/s
# Warmup Iteration   3: 0,519 ops/s
# Warmup Iteration   4: 0,472 ops/s
# Warmup Iteration   5: 0,474 ops/s
Iteration   1: 0,470 ops/s
                 Â·gc.alloc.rate:      984,411 MB/sec
                 Â·gc.alloc.rate.norm: 2003277539,429 B/op
                 Â·gc.count:           18,000 counts
                 Â·gc.time:            12749,000 ms

Iteration   2: 0,499 ops/s
                 Â·gc.alloc.rate:      997,213 MB/sec
                 Â·gc.alloc.rate.norm: 2003277539,429 B/op
                 Â·gc.count:           18,000 counts
                 Â·gc.time:            12556,000 ms

Iteration   3: 0,475 ops/s
                 Â·gc.alloc.rate:      991,185 MB/sec
                 Â·gc.alloc.rate.norm: 2003277539,429 B/op
                 Â·gc.count:           18,000 counts
                 Â·gc.time:            12682,000 ms

Iteration   4: 0,465 ops/s
                 Â·gc.alloc.rate:      976,034 MB/sec
                 Â·gc.alloc.rate.norm: 2003279090,286 B/op
                 Â·gc.count:           18,000 counts
                 Â·gc.time:            12859,000 ms

Iteration   5: 0,524 ops/s
                 Â·gc.alloc.rate:      1068,951 MB/sec
                 Â·gc.alloc.rate.norm: 2003277548,571 B/op
                 Â·gc.count:           18,000 counts
                 Â·gc.time:            11690,000 ms


# Run progress: 20,00% complete, ETA 00:27:38
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,546 ops/s
# Warmup Iteration   2: 0,474 ops/s
# Warmup Iteration   3: 0,466 ops/s
# Warmup Iteration   4: 0,468 ops/s
# Warmup Iteration   5: 0,467 ops/s
Iteration   1: 0,455 ops/s
                 Â·gc.alloc.rate:      931,971 MB/sec
                 Â·gc.alloc.rate.norm: 2003277539,429 B/op
                 Â·gc.count:           18,000 counts
                 Â·gc.time:            13531,000 ms

Iteration   2: 0,475 ops/s
                 Â·gc.alloc.rate:      993,212 MB/sec
                 Â·gc.alloc.rate.norm: 2003277539,429 B/op
                 Â·gc.count:           18,000 counts
                 Â·gc.time:            12668,000 ms

Iteration   3: 0,496 ops/s
                 Â·gc.alloc.rate:      1021,629 MB/sec
                 Â·gc.alloc.rate.norm: 2003277539,429 B/op
                 Â·gc.count:           18,000 counts
                 Â·gc.time:            12252,000 ms

Iteration   4: 0,476 ops/s
                 Â·gc.alloc.rate:      995,049 MB/sec
                 Â·gc.alloc.rate.norm: 2003279090,286 B/op
                 Â·gc.count:           18,000 counts
                 Â·gc.time:            12651,000 ms

Iteration   5: 0,472 ops/s
                 Â·gc.alloc.rate:      985,935 MB/sec
                 Â·gc.alloc.rate.norm: 2003277539,429 B/op
                 Â·gc.count:           18,000 counts
                 Â·gc.time:            12758,000 ms


# Run progress: 26,67% complete, ETA 00:25:12
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,488 ops/s
# Warmup Iteration   2: 0,491 ops/s
# Warmup Iteration   3: 0,509 ops/s
# Warmup Iteration   4: 0,495 ops/s
# Warmup Iteration   5: 0,494 ops/s
Iteration   1: 0,493 ops/s
                 Â·gc.alloc.rate:      1021,228 MB/sec
                 Â·gc.alloc.rate.norm: 2003277539,429 B/op
                 Â·gc.count:           18,000 counts
                 Â·gc.time:            12317,000 ms

Iteration   2: 0,510 ops/s
                 Â·gc.alloc.rate:      1042,339 MB/sec
                 Â·gc.alloc.rate.norm: 2003277539,429 B/op
                 Â·gc.count:           18,000 counts
                 Â·gc.time:            12007,000 ms

Iteration   3: 0,523 ops/s
                 Â·gc.alloc.rate:      1066,505 MB/sec
                 Â·gc.alloc.rate.norm: 2003277539,429 B/op
                 Â·gc.count:           18,000 counts
                 Â·gc.time:            11749,000 ms

Iteration   4: 0,512 ops/s
                 Â·gc.alloc.rate:      1052,390 MB/sec
                 Â·gc.alloc.rate.norm: 2003279090,286 B/op
                 Â·gc.count:           18,000 counts
                 Â·gc.time:            11913,000 ms

Iteration   5: 0,513 ops/s
                 Â·gc.alloc.rate:      1051,656 MB/sec
                 Â·gc.alloc.rate.norm: 2003277539,429 B/op
                 Â·gc.count:           18,000 counts
                 Â·gc.time:            11915,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc":
  0,488 Â±(99.9%) 0,015 ops/s [Average]
  (min, avg, max) = (0,455, 0,488, 0,524), stdev = 0,020
  CI (99.9%): [0,473, 0,503] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.alloc.rate":
  1010,072 Â±(99.9%) 25,114 MB/sec [Average]
  (min, avg, max) = (931,971, 1010,072, 1068,951), stdev = 33,526
  CI (99.9%): [984,958, 1035,186] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm":
  2003277850,331 Â±(99.9%) 473,993 B/op [Average]
  (min, avg, max) = (2003277539,429, 2003277850,331, 2003279090,286), stdev = 632,766
  CI (99.9%): [2003277376,339, 2003278324,324] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.count":
  450,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (18,000, 18,000, 18,000), stdev = 0,001
  CI (99.9%): [450,000, 450,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.time":
  310991,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (11690,000, 12439,640, 13531,000), stdev = 434,251
  CI (99.9%): [310991,000, 310991,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc
# Parameters: (percentageOfRetainedHeap = P_25)

# Run progress: 33,33% complete, ETA 00:22:43
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,520 ops/s
# Warmup Iteration   2: 0,498 ops/s
# Warmup Iteration   3: 0,550 ops/s
# Warmup Iteration   4: 0,608 ops/s
# Warmup Iteration   5: 0,570 ops/s
Iteration   1: 0,508 ops/s
                 Â·gc.alloc.rate:      778,548 MB/sec
                 Â·gc.alloc.rate.norm: 1502449091,429 B/op
                 Â·gc.count:           14,000 counts
                 Â·gc.time:            12191,000 ms

Iteration   2: 0,539 ops/s
                 Â·gc.alloc.rate:      825,359 MB/sec
                 Â·gc.alloc.rate.norm: 1502449091,429 B/op
                 Â·gc.count:           14,000 counts
                 Â·gc.time:            11434,000 ms

Iteration   3: 0,504 ops/s
                 Â·gc.alloc.rate:      769,237 MB/sec
                 Â·gc.alloc.rate.norm: 1502449091,429 B/op
                 Â·gc.count:           14,000 counts
                 Â·gc.time:            12354,000 ms

Iteration   4: 0,541 ops/s
                 Â·gc.alloc.rate:      838,159 MB/sec
                 Â·gc.alloc.rate.norm: 1502450642,286 B/op
                 Â·gc.count:           14,000 counts
                 Â·gc.time:            11269,000 ms

Iteration   5: 0,518 ops/s
                 Â·gc.alloc.rate:      779,702 MB/sec
                 Â·gc.alloc.rate.norm: 1502449091,429 B/op
                 Â·gc.count:           14,000 counts
                 Â·gc.time:            12183,000 ms


# Run progress: 40,00% complete, ETA 00:20:21
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,510 ops/s
# Warmup Iteration   2: 0,543 ops/s
# Warmup Iteration   3: 0,552 ops/s
# Warmup Iteration   4: 0,554 ops/s
# Warmup Iteration   5: 0,482 ops/s
Iteration   1: 0,504 ops/s
                 Â·gc.alloc.rate:      765,361 MB/sec
                 Â·gc.alloc.rate.norm: 1502449091,429 B/op
                 Â·gc.count:           14,000 counts
                 Â·gc.time:            12419,000 ms

Iteration   2: 0,561 ops/s
                 Â·gc.alloc.rate:      857,036 MB/sec
                 Â·gc.alloc.rate.norm: 1502449091,429 B/op
                 Â·gc.count:           14,000 counts
                 Â·gc.time:            11024,000 ms

Iteration   3: 0,499 ops/s
                 Â·gc.alloc.rate:      750,879 MB/sec
                 Â·gc.alloc.rate.norm: 1502449091,429 B/op
                 Â·gc.count:           14,000 counts
                 Â·gc.time:            12666,000 ms

Iteration   4: 0,530 ops/s
                 Â·gc.alloc.rate:      811,045 MB/sec
                 Â·gc.alloc.rate.norm: 1502450642,286 B/op
                 Â·gc.count:           14,000 counts
                 Â·gc.time:            11657,000 ms

Iteration   5: 0,506 ops/s
                 Â·gc.alloc.rate:      763,878 MB/sec
                 Â·gc.alloc.rate.norm: 1502449091,429 B/op
                 Â·gc.count:           14,000 counts
                 Â·gc.time:            12418,000 ms


# Run progress: 46,67% complete, ETA 00:18:02
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,483 ops/s
# Warmup Iteration   2: 0,581 ops/s
# Warmup Iteration   3: 0,553 ops/s
# Warmup Iteration   4: 0,571 ops/s
# Warmup Iteration   5: 0,515 ops/s
Iteration   1: 0,558 ops/s
                 Â·gc.alloc.rate:      818,767 MB/sec
                 Â·gc.alloc.rate.norm: 1502449091,429 B/op
                 Â·gc.count:           14,000 counts
                 Â·gc.time:            11553,000 ms

Iteration   2: 0,497 ops/s
                 Â·gc.alloc.rate:      753,358 MB/sec
                 Â·gc.alloc.rate.norm: 1502449091,429 B/op
                 Â·gc.count:           14,000 counts
                 Â·gc.time:            12572,000 ms

Iteration   3: 0,569 ops/s
                 Â·gc.alloc.rate:      845,084 MB/sec
                 Â·gc.alloc.rate.norm: 1502449091,429 B/op
                 Â·gc.count:           14,000 counts
                 Â·gc.time:            11171,000 ms

Iteration   4: 0,560 ops/s
                 Â·gc.alloc.rate:      820,532 MB/sec
                 Â·gc.alloc.rate.norm: 1502450642,286 B/op
                 Â·gc.count:           14,000 counts
                 Â·gc.time:            11533,000 ms

Iteration   5: 0,496 ops/s
                 Â·gc.alloc.rate:      744,494 MB/sec
                 Â·gc.alloc.rate.norm: 1502449091,429 B/op
                 Â·gc.count:           14,000 counts
                 Â·gc.time:            12791,000 ms


# Run progress: 53,33% complete, ETA 00:15:49
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,515 ops/s
# Warmup Iteration   2: 0,497 ops/s
# Warmup Iteration   3: 0,520 ops/s
# Warmup Iteration   4: 0,499 ops/s
# Warmup Iteration   5: 0,517 ops/s
Iteration   1: 0,559 ops/s
                 Â·gc.alloc.rate:      834,034 MB/sec
                 Â·gc.alloc.rate.norm: 1502449060,444 B/op
                 Â·gc.count:           18,000 counts
                 Â·gc.time:            14530,000 ms

Iteration   2: 0,548 ops/s
                 Â·gc.alloc.rate:      813,648 MB/sec
                 Â·gc.alloc.rate.norm: 1502449060,444 B/op
                 Â·gc.count:           18,000 counts
                 Â·gc.time:            14934,000 ms

Iteration   3: 0,507 ops/s
                 Â·gc.alloc.rate:      779,215 MB/sec
                 Â·gc.alloc.rate.norm: 1502449091,429 B/op
                 Â·gc.count:           14,000 counts
                 Â·gc.time:            12143,000 ms

Iteration   4: 0,485 ops/s
                 Â·gc.alloc.rate:      732,314 MB/sec
                 Â·gc.alloc.rate.norm: 1502450642,286 B/op
                 Â·gc.count:           14,000 counts
                 Â·gc.time:            12967,000 ms

Iteration   5: 0,506 ops/s
                 Â·gc.alloc.rate:      771,184 MB/sec
                 Â·gc.alloc.rate.norm: 1502449091,429 B/op
                 Â·gc.count:           14,000 counts
                 Â·gc.time:            12309,000 ms


# Run progress: 60,00% complete, ETA 00:13:37
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,486 ops/s
# Warmup Iteration   2: 0,506 ops/s
# Warmup Iteration   3: 0,510 ops/s
# Warmup Iteration   4: 0,504 ops/s
# Warmup Iteration   5: 0,521 ops/s
Iteration   1: 0,545 ops/s
                 Â·gc.alloc.rate:      824,236 MB/sec
                 Â·gc.alloc.rate.norm: 1502449091,429 B/op
                 Â·gc.count:           14,000 counts
                 Â·gc.time:            11449,000 ms

Iteration   2: 0,493 ops/s
                 Â·gc.alloc.rate:      748,961 MB/sec
                 Â·gc.alloc.rate.norm: 1502449091,429 B/op
                 Â·gc.count:           14,000 counts
                 Â·gc.time:            12659,000 ms

Iteration   3: 0,517 ops/s
                 Â·gc.alloc.rate:      772,276 MB/sec
                 Â·gc.alloc.rate.norm: 1502449091,429 B/op
                 Â·gc.count:           14,000 counts
                 Â·gc.time:            12265,000 ms

Iteration   4: 0,559 ops/s
                 Â·gc.alloc.rate:      850,868 MB/sec
                 Â·gc.alloc.rate.norm: 1502450642,286 B/op
                 Â·gc.count:           14,000 counts
                 Â·gc.time:            11076,000 ms

Iteration   5: 0,511 ops/s
                 Â·gc.alloc.rate:      789,571 MB/sec
                 Â·gc.alloc.rate.norm: 1502449091,429 B/op
                 Â·gc.count:           14,000 counts
                 Â·gc.time:            12005,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc":
  0,525 Â±(99.9%) 0,020 ops/s [Average]
  (min, avg, max) = (0,485, 0,525, 0,569), stdev = 0,026
  CI (99.9%): [0,505, 0,544] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.alloc.rate":
  793,510 Â±(99.9%) 27,804 MB/sec [Average]
  (min, avg, max) = (732,314, 793,510, 857,036), stdev = 37,118
  CI (99.9%): [765,705, 821,314] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm":
  1502449399,121 Â±(99.9%) 475,258 B/op [Average]
  (min, avg, max) = (1502449060,444, 1502449399,121, 1502450642,286), stdev = 634,456
  CI (99.9%): [1502448923,863, 1502449874,380] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.count":
  358,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (14,000, 14,320, 18,000), stdev = 1,108
  CI (99.9%): [358,000, 358,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.time":
  305572,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (11024,000, 12222,880, 14934,000), stdev = 945,436
  CI (99.9%): [305572,000, 305572,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseSerialGC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc
# Parameters: (percentageOfRetainedHeap = P_50)

# Run progress: 66,67% complete, ETA 00:11:19
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,438 ops/s
# Warmup Iteration   2: 0,414 ops/s
# Warmup Iteration   3: 0,457 ops/s
# Warmup Iteration   4: 0,446 ops/s
# Warmup Iteration   5: 0,415 ops/s
Iteration   1: 0,416 ops/s
                 Â·gc.alloc.rate:      414,158 MB/sec
                 Â·gc.alloc.rate.norm: 1001638851,429 B/op
                 Â·gc.count:           11,000 counts
                 Â·gc.time:            15568,000 ms

Iteration   2: 0,460 ops/s
                 Â·gc.alloc.rate:      454,318 MB/sec
                 Â·gc.alloc.rate.norm: 1001638851,429 B/op
                 Â·gc.count:           10,000 counts
                 Â·gc.time:            14022,000 ms

Iteration   3: 0,507 ops/s
                 Â·gc.alloc.rate:      494,500 MB/sec
                 Â·gc.alloc.rate.norm: 1001640402,286 B/op
                 Â·gc.count:           10,000 counts
                 Â·gc.time:            12774,000 ms

Iteration   4: 0,422 ops/s
                 Â·gc.alloc.rate:      426,459 MB/sec
                 Â·gc.alloc.rate.norm: 1001638851,429 B/op
                 Â·gc.count:           11,000 counts
                 Â·gc.time:            15068,000 ms

Iteration   5: 0,455 ops/s
                 Â·gc.alloc.rate:      439,529 MB/sec
                 Â·gc.alloc.rate.norm: 1001638851,429 B/op
                 Â·gc.count:           11,000 counts
                 Â·gc.time:            14625,000 ms


# Run progress: 73,33% complete, ETA 00:09:12
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,430 ops/s
# Warmup Iteration   2: 0,432 ops/s
# Warmup Iteration   3: 0,428 ops/s
# Warmup Iteration   4: 0,378 ops/s
# Warmup Iteration   5: 0,519 ops/s
Iteration   1: 0,490 ops/s
                 Â·gc.alloc.rate:      446,075 MB/sec
                 Â·gc.alloc.rate.norm: 1001638851,429 B/op
                 Â·gc.count:           11,000 counts
                 Â·gc.time:            14400,000 ms

Iteration   2: 0,392 ops/s
                 Â·gc.alloc.rate:      400,698 MB/sec
                 Â·gc.alloc.rate.norm: 1001638851,429 B/op
                 Â·gc.count:           11,000 counts
                 Â·gc.time:            16083,000 ms

Iteration   3: 0,491 ops/s
                 Â·gc.alloc.rate:      507,650 MB/sec
                 Â·gc.alloc.rate.norm: 1001638851,429 B/op
                 Â·gc.count:           11,000 counts
                 Â·gc.time:            12600,000 ms

Iteration   4: 0,432 ops/s
                 Â·gc.alloc.rate:      423,584 MB/sec
                 Â·gc.alloc.rate.norm: 1001640402,286 B/op
                 Â·gc.count:           11,000 counts
                 Â·gc.time:            15204,000 ms

Iteration   5: 0,413 ops/s
                 Â·gc.alloc.rate:      366,616 MB/sec
                 Â·gc.alloc.rate.norm: 1001638851,429 B/op
                 Â·gc.count:           10,000 counts
                 Â·gc.time:            17516,000 ms


# Run progress: 80,00% complete, ETA 00:06:59
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,405 ops/s
# Warmup Iteration   2: 0,456 ops/s
# Warmup Iteration   3: 0,415 ops/s
# Warmup Iteration   4: 0,400 ops/s
# Warmup Iteration   5: 0,376 ops/s
Iteration   1: 0,441 ops/s
                 Â·gc.alloc.rate:      422,789 MB/sec
                 Â·gc.alloc.rate.norm: 1001638851,429 B/op
                 Â·gc.count:           11,000 counts
                 Â·gc.time:            15229,000 ms

Iteration   2: 0,434 ops/s
                 Â·gc.alloc.rate:      420,339 MB/sec
                 Â·gc.alloc.rate.norm: 1001638851,429 B/op
                 Â·gc.count:           11,000 counts
                 Â·gc.time:            15306,000 ms

Iteration   3: 0,417 ops/s
                 Â·gc.alloc.rate:      395,057 MB/sec
                 Â·gc.alloc.rate.norm: 1001640402,286 B/op
                 Â·gc.count:           11,000 counts
                 Â·gc.time:            16349,000 ms

Iteration   4: 0,476 ops/s
                 Â·gc.alloc.rate:      454,635 MB/sec
                 Â·gc.alloc.rate.norm: 1001638851,429 B/op
                 Â·gc.count:           11,000 counts
                 Â·gc.time:            14116,000 ms

Iteration   5: 0,474 ops/s
                 Â·gc.alloc.rate:      438,933 MB/sec
                 Â·gc.alloc.rate.norm: 1001638851,429 B/op
                 Â·gc.count:           11,000 counts
                 Â·gc.time:            14654,000 ms


# Run progress: 86,67% complete, ETA 00:04:41
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,412 ops/s
# Warmup Iteration   2: 0,368 ops/s
# Warmup Iteration   3: 0,347 ops/s
# Warmup Iteration   4: 0,417 ops/s
# Warmup Iteration   5: 0,398 ops/s
Iteration   1: 0,410 ops/s
                 Â·gc.alloc.rate:      397,466 MB/sec
                 Â·gc.alloc.rate.norm: 1001638851,429 B/op
                 Â·gc.count:           11,000 counts
                 Â·gc.time:            16247,000 ms

Iteration   2: 0,350 ops/s
                 Â·gc.alloc.rate:      367,788 MB/sec
                 Â·gc.alloc.rate.norm: 1001638907,200 B/op
                 Â·gc.count:           8,000 counts
                 Â·gc.time:            12621,000 ms

Iteration   3: 0,442 ops/s
                 Â·gc.alloc.rate:      442,186 MB/sec
                 Â·gc.alloc.rate.norm: 1001638851,429 B/op
                 Â·gc.count:           11,000 counts
                 Â·gc.time:            14557,000 ms

Iteration   4: 0,416 ops/s
                 Â·gc.alloc.rate:      407,402 MB/sec
                 Â·gc.alloc.rate.norm: 1001640402,286 B/op
                 Â·gc.count:           11,000 counts
                 Â·gc.time:            15844,000 ms

Iteration   5: 0,421 ops/s
                 Â·gc.alloc.rate:      386,647 MB/sec
                 Â·gc.alloc.rate.norm: 1001638851,429 B/op
                 Â·gc.count:           10,000 counts
                 Â·gc.time:            16575,000 ms


# Run progress: 93,33% complete, ETA 00:02:22
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,400 ops/s
# Warmup Iteration   2: 0,394 ops/s
# Warmup Iteration   3: 0,396 ops/s
# Warmup Iteration   4: 0,442 ops/s
# Warmup Iteration   5: 0,393 ops/s
Iteration   1: 0,364 ops/s
                 Â·gc.alloc.rate:      372,259 MB/sec
                 Â·gc.alloc.rate.norm: 1001638851,429 B/op
                 Â·gc.count:           11,000 counts
                 Â·gc.time:            17395,000 ms

Iteration   2: 0,458 ops/s
                 Â·gc.alloc.rate:      390,069 MB/sec
                 Â·gc.alloc.rate.norm: 1001638851,429 B/op
                 Â·gc.count:           10,000 counts
                 Â·gc.time:            16421,000 ms

Iteration   3: 0,578 ops/s
                 Â·gc.alloc.rate:      389,363 MB/sec
                 Â·gc.alloc.rate.norm: 1001638907,200 B/op
                 Â·gc.count:           7,000 counts
                 Â·gc.time:            11767,000 ms

Iteration   4: 0,460 ops/s
                 Â·gc.alloc.rate:      386,573 MB/sec
                 Â·gc.alloc.rate.norm: 1001640402,286 B/op
                 Â·gc.count:           10,000 counts
                 Â·gc.time:            16572,000 ms

Iteration   5: 0,394 ops/s
                 Â·gc.alloc.rate:      368,203 MB/sec
                 Â·gc.alloc.rate.norm: 1001638907,200 B/op
                 Â·gc.count:           8,000 counts
                 Â·gc.time:            12584,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc":
  0,440 Â±(99.9%) 0,036 ops/s [Average]
  (min, avg, max) = (0,350, 0,440, 0,578), stdev = 0,048
  CI (99.9%): [0,405, 0,476] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.alloc.rate":
  416,532 Â±(99.9%) 28,020 MB/sec [Average]
  (min, avg, max) = (366,616, 416,532, 507,650), stdev = 37,406
  CI (99.9%): [388,512, 444,552] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm":
  1001639168,293 Â±(99.9%) 471,907 B/op [Average]
  (min, avg, max) = (1001638851,429, 1001639168,293, 1001640402,286), stdev = 629,982
  CI (99.9%): [1001638696,386, 1001639640,199] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.count":
  259,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (7,000, 10,360, 11,000), stdev = 1,114
  CI (99.9%): [259,000, 259,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.time":
  374097,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (11767,000, 14963,880, 17516,000), stdev = 1581,116
  CI (99.9%): [374097,000, 374097,000] (assumes normal distribution)


# Run complete. Total time: 00:35:49

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                                  (percentageOfRetainedHeap)   Mode  Cnt           Score     Error   Units
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc                                             P_0  thrpt   25           0,488 Â±   0,015   ops/s
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.alloc.rate                              P_0  thrpt   25        1010,072 Â±  25,114  MB/sec
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm                         P_0  thrpt   25  2003277850,331 Â± 473,993    B/op
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.count                                   P_0  thrpt   25         450,000            counts
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.time                                    P_0  thrpt   25      310991,000                ms
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc                                            P_25  thrpt   25           0,525 Â±   0,020   ops/s
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.alloc.rate                             P_25  thrpt   25         793,510 Â±  27,804  MB/sec
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm                        P_25  thrpt   25  1502449399,121 Â± 475,258    B/op
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.count                                  P_25  thrpt   25         358,000            counts
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.time                                   P_25  thrpt   25      305572,000                ms
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc                                            P_50  thrpt   25           0,440 Â±   0,036   ops/s
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.alloc.rate                             P_50  thrpt   25         416,532 Â±  28,020  MB/sec
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm                        P_50  thrpt   25  1001639168,293 Â± 471,907    B/op
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.count                                  P_50  thrpt   25         259,000            counts
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.time                                   P_50  thrpt   25      374097,000                ms

Benchmark result is saved to results/jdk-17/arm64/openjdk-hotspot-vm/HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark_serialGC_2threads.csv

Running HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark benchmark ...
java  -jar benchmarks/target/benchmarks.jar .*HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.* -foe true -wi 5 -w 10 -i 5 -r 10 -f 5 -rf csv -rff results/jdk-17/arm64/openjdk-hotspot-vm/HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark_parallelGC_1thread.csv -t 1 -prof gc -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseParallelGC"

# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc
# Parameters: (percentageOfRetainedHeap = P_0)

# Run progress: 0,00% complete, ETA 00:25:00
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
<failure>

java.lang.OutOfMemoryError: GC overhead limit exceeded
	at com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark$ObjectChain.<init>(HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.java:168)
	at com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.createChainedObjects(HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.java:138)
	at com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.allocate(HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.java:123)
	at com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc(HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.java:115)
	at com.ionutbalosin.jvm.performance.benchmarks.micro.gc.jmh_generated.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark_gc_jmhTest.gc_thrpt_jmhStub(HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark_gc_jmhTest.java:142)
	at com.ionutbalosin.jvm.performance.benchmarks.micro.gc.jmh_generated.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark_gc_jmhTest.gc_Throughput(HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark_gc_jmhTest.java:83)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)


Benchmark had encountered error, and fail on error was requested

Running HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark benchmark ...
java  -jar benchmarks/target/benchmarks.jar .*HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.* -foe true -wi 5 -w 10 -i 5 -r 10 -f 5 -rf csv -rff results/jdk-17/arm64/openjdk-hotspot-vm/HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark_parallelGC_2threads.csv -t 2 -prof gc -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseParallelGC"

# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseParallelGC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc
# Parameters: (percentageOfRetainedHeap = P_0)

# Run progress: 0,00% complete, ETA 00:25:00
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
<failure>

java.lang.OutOfMemoryError: GC overhead limit exceeded
	at com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.createChainedObjects(HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.java:138)
	at com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.allocate(HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.java:123)
	at com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc(HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.java:115)
	at com.ionutbalosin.jvm.performance.benchmarks.micro.gc.jmh_generated.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark_gc_jmhTest.gc_Throughput(HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark_gc_jmhTest.java:78)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)


Benchmark had encountered error, and fail on error was requested

Running HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark benchmark ...
java  -jar benchmarks/target/benchmarks.jar .*HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.* -foe true -wi 5 -w 10 -i 5 -r 10 -f 5 -rf csv -rff results/jdk-17/arm64/openjdk-hotspot-vm/HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark_g1GC_1thread.csv -t 1 -prof gc -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseG1GC"

# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc
# Parameters: (percentageOfRetainedHeap = P_0)

# Run progress: 0,00% complete, ETA 00:25:00
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
2,120 ops/s
# Warmup Iteration   2: 1,999 ops/s
# Warmup Iteration   3: 2,127 ops/s
# Warmup Iteration   4: 2,152 ops/s
# Warmup Iteration   5: 2,185 ops/s
Iteration   1: 1,970 ops/s
                 Â·gc.alloc.rate:      7785,446 MB/sec
                 Â·gc.alloc.rate.norm: 4144686759,600 B/op
                 Â·gc.count:           405,000 counts
                 Â·gc.time:            4976,000 ms

Iteration   2: 2,090 ops/s
                 Â·gc.alloc.rate:      8260,898 MB/sec
                 Â·gc.alloc.rate.norm: 4144686755,429 B/op
                 Â·gc.count:           429,000 counts
                 Â·gc.time:            5221,000 ms

Iteration   3: 2,042 ops/s
                 Â·gc.alloc.rate:      8071,181 MB/sec
                 Â·gc.alloc.rate.norm: 4144686755,429 B/op
                 Â·gc.count:           430,000 counts
                 Â·gc.time:            5421,000 ms

Iteration   4: 2,172 ops/s
                 Â·gc.alloc.rate:      8584,027 MB/sec
                 Â·gc.alloc.rate.norm: 4144686756,000 B/op
                 Â·gc.count:           441,000 counts
                 Â·gc.time:            5055,000 ms

Iteration   5: 2,210 ops/s
                 Â·gc.alloc.rate:      8736,871 MB/sec
                 Â·gc.alloc.rate.norm: 4144686755,130 B/op
                 Â·gc.count:           461,000 counts
                 Â·gc.time:            5013,000 ms


# Run progress: 6,67% complete, ETA 00:24:12
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
2,063 ops/s
# Warmup Iteration   2: 2,151 ops/s
# Warmup Iteration   3: 1,882 ops/s
# Warmup Iteration   4: 1,995 ops/s
# Warmup Iteration   5: 2,097 ops/s
Iteration   1: 2,147 ops/s
                 Â·gc.alloc.rate:      8487,000 MB/sec
                 Â·gc.alloc.rate.norm: 4144686757,455 B/op
                 Â·gc.count:           440,000 counts
                 Â·gc.time:            4644,000 ms

Iteration   2: 1,948 ops/s
                 Â·gc.alloc.rate:      7700,204 MB/sec
                 Â·gc.alloc.rate.norm: 4144686756,400 B/op
                 Â·gc.count:           406,000 counts
                 Â·gc.time:            5581,000 ms

Iteration   3: 2,037 ops/s
                 Â·gc.alloc.rate:      8051,572 MB/sec
                 Â·gc.alloc.rate.norm: 4144686755,429 B/op
                 Â·gc.count:           423,000 counts
                 Â·gc.time:            5399,000 ms

Iteration   4: 2,103 ops/s
                 Â·gc.alloc.rate:      8311,279 MB/sec
                 Â·gc.alloc.rate.norm: 4144686757,455 B/op
                 Â·gc.count:           450,000 counts
                 Â·gc.time:            5242,000 ms

Iteration   5: 2,250 ops/s
                 Â·gc.alloc.rate:      8894,146 MB/sec
                 Â·gc.alloc.rate.norm: 4144686755,130 B/op
                 Â·gc.count:           462,000 counts
                 Â·gc.time:            4749,000 ms


# Run progress: 13,33% complete, ETA 00:22:47
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
2,114 ops/s
# Warmup Iteration   2: 2,166 ops/s
# Warmup Iteration   3: 2,080 ops/s
# Warmup Iteration   4: 2,215 ops/s
# Warmup Iteration   5: 2,025 ops/s
Iteration   1: 1,981 ops/s
                 Â·gc.alloc.rate:      7829,485 MB/sec
                 Â·gc.alloc.rate.norm: 4144686756,400 B/op
                 Â·gc.count:           416,000 counts
                 Â·gc.time:            5456,000 ms

Iteration   2: 2,172 ops/s
                 Â·gc.alloc.rate:      8583,429 MB/sec
                 Â·gc.alloc.rate.norm: 4144686754,545 B/op
                 Â·gc.count:           448,000 counts
                 Â·gc.time:            5029,000 ms

Iteration   3: 2,085 ops/s
                 Â·gc.alloc.rate:      8240,849 MB/sec
                 Â·gc.alloc.rate.norm: 4144686755,429 B/op
                 Â·gc.count:           431,000 counts
                 Â·gc.time:            5204,000 ms

Iteration   4: 1,990 ops/s
                 Â·gc.alloc.rate:      7865,656 MB/sec
                 Â·gc.alloc.rate.norm: 4144686758,476 B/op
                 Â·gc.count:           424,000 counts
                 Â·gc.time:            5380,000 ms

Iteration   5: 1,896 ops/s
                 Â·gc.alloc.rate:      7493,746 MB/sec
                 Â·gc.alloc.rate.norm: 4144686759,158 B/op
                 Â·gc.count:           394,000 counts
                 Â·gc.time:            5610,000 ms


# Run progress: 20,00% complete, ETA 00:21:04
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
2,174 ops/s
# Warmup Iteration   2: 2,193 ops/s
# Warmup Iteration   3: 1,995 ops/s
# Warmup Iteration   4: 2,125 ops/s
# Warmup Iteration   5: 1,979 ops/s
Iteration   1: 2,166 ops/s
                 Â·gc.alloc.rate:      8562,667 MB/sec
                 Â·gc.alloc.rate.norm: 4144686754,545 B/op
                 Â·gc.count:           447,000 counts
                 Â·gc.time:            5037,000 ms

Iteration   2: 1,931 ops/s
                 Â·gc.alloc.rate:      7632,505 MB/sec
                 Â·gc.alloc.rate.norm: 4144686756,400 B/op
                 Â·gc.count:           404,000 counts
                 Â·gc.time:            5746,000 ms

Iteration   3: 2,062 ops/s
                 Â·gc.alloc.rate:      8152,305 MB/sec
                 Â·gc.alloc.rate.norm: 4144686755,429 B/op
                 Â·gc.count:           431,000 counts
                 Â·gc.time:            5319,000 ms

Iteration   4: 2,085 ops/s
                 Â·gc.alloc.rate:      8240,060 MB/sec
                 Â·gc.alloc.rate.norm: 4144686756,952 B/op
                 Â·gc.count:           424,000 counts
                 Â·gc.time:            5235,000 ms

Iteration   5: 2,189 ops/s
                 Â·gc.alloc.rate:      8652,019 MB/sec
                 Â·gc.alloc.rate.norm: 4144686756,000 B/op
                 Â·gc.count:           447,000 counts
                 Â·gc.time:            4966,000 ms


# Run progress: 26,67% complete, ETA 00:19:20
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
2,245 ops/s
# Warmup Iteration   2: 1,968 ops/s
# Warmup Iteration   3: 2,089 ops/s
# Warmup Iteration   4: 2,109 ops/s
# Warmup Iteration   5: 1,939 ops/s
Iteration   1: 2,078 ops/s
                 Â·gc.alloc.rate:      8210,748 MB/sec
                 Â·gc.alloc.rate.norm: 4144686755,429 B/op
                 Â·gc.count:           427,000 counts
                 Â·gc.time:            5286,000 ms

Iteration   2: 1,991 ops/s
                 Â·gc.alloc.rate:      7869,160 MB/sec
                 Â·gc.alloc.rate.norm: 4144686756,400 B/op
                 Â·gc.count:           405,000 counts
                 Â·gc.time:            5433,000 ms

Iteration   3: 1,982 ops/s
                 Â·gc.alloc.rate:      7833,359 MB/sec
                 Â·gc.alloc.rate.norm: 4144686756,400 B/op
                 Â·gc.count:           410,000 counts
                 Â·gc.time:            5500,000 ms

Iteration   4: 2,029 ops/s
                 Â·gc.alloc.rate:      8018,717 MB/sec
                 Â·gc.alloc.rate.norm: 4144686755,429 B/op
                 Â·gc.count:           429,000 counts
                 Â·gc.time:            5104,000 ms

Iteration   5: 2,071 ops/s
                 Â·gc.alloc.rate:      8184,173 MB/sec
                 Â·gc.alloc.rate.norm: 4144686756,000 B/op
                 Â·gc.count:           443,000 counts
                 Â·gc.time:            5515,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc":
  2,067 Â±(99.9%) 0,070 ops/s [Average]
  (min, avg, max) = (1,896, 2,067, 2,250), stdev = 0,094
  CI (99.9%): [1,997, 2,137] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.alloc.rate":
  8170,060 Â±(99.9%) 277,316 MB/sec [Average]
  (min, avg, max) = (7493,746, 8170,060, 8894,146), stdev = 370,209
  CI (99.9%): [7892,744, 8447,376] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm":
  4144686756,258 Â±(99.9%) 0,983 B/op [Average]
  (min, avg, max) = (4144686754,545, 4144686756,258, 4144686759,600), stdev = 1,313
  CI (99.9%): [4144686755,274, 4144686757,241] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.count":
  10727,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (394,000, 429,080, 462,000), stdev = 18,466
  CI (99.9%): [10727,000, 10727,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.time":
  131121,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (4644,000, 5244,840, 5746,000), stdev = 270,377
  CI (99.9%): [131121,000, 131121,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc
# Parameters: (percentageOfRetainedHeap = P_25)

# Run progress: 33,33% complete, ETA 00:17:36
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
2,529 ops/s
# Warmup Iteration   2: 2,374 ops/s
# Warmup Iteration   3: 2,594 ops/s
# Warmup Iteration   4: 2,488 ops/s
# Warmup Iteration   5: 2,553 ops/s
Iteration   1: 2,540 ops/s
                 Â·gc.alloc.rate:      7530,458 MB/sec
                 Â·gc.alloc.rate.norm: 3108515071,692 B/op
                 Â·gc.count:           502,000 counts
                 Â·gc.time:            5528,000 ms

Iteration   2: 2,478 ops/s
                 Â·gc.alloc.rate:      7346,304 MB/sec
                 Â·gc.alloc.rate.norm: 3108515074,880 B/op
                 Â·gc.count:           482,000 counts
                 Â·gc.time:            5410,000 ms

Iteration   3: 2,550 ops/s
                 Â·gc.alloc.rate:      7559,492 MB/sec
                 Â·gc.alloc.rate.norm: 3108515071,692 B/op
                 Â·gc.count:           513,000 counts
                 Â·gc.time:            5380,000 ms

Iteration   4: 2,476 ops/s
                 Â·gc.alloc.rate:      7339,668 MB/sec
                 Â·gc.alloc.rate.norm: 3108515073,600 B/op
                 Â·gc.count:           495,000 counts
                 Â·gc.time:            5378,000 ms

Iteration   5: 2,408 ops/s
                 Â·gc.alloc.rate:      7137,851 MB/sec
                 Â·gc.alloc.rate.norm: 3108515073,600 B/op
                 Â·gc.count:           484,000 counts
                 Â·gc.time:            5872,000 ms


# Run progress: 40,00% complete, ETA 00:15:48
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
2,556 ops/s
# Warmup Iteration   2: 2,434 ops/s
# Warmup Iteration   3: 2,585 ops/s
# Warmup Iteration   4: 2,654 ops/s
# Warmup Iteration   5: 2,600 ops/s
Iteration   1: 2,572 ops/s
                 Â·gc.alloc.rate:      7623,427 MB/sec
                 Â·gc.alloc.rate.norm: 3108515071,692 B/op
                 Â·gc.count:           498,000 counts
                 Â·gc.time:            5399,000 ms

Iteration   2: 2,612 ops/s
                 Â·gc.alloc.rate:      7744,479 MB/sec
                 Â·gc.alloc.rate.norm: 3108515072,296 B/op
                 Â·gc.count:           510,000 counts
                 Â·gc.time:            5350,000 ms

Iteration   3: 2,496 ops/s
                 Â·gc.alloc.rate:      7400,376 MB/sec
                 Â·gc.alloc.rate.norm: 3108515072,320 B/op
                 Â·gc.count:           476,000 counts
                 Â·gc.time:            5465,000 ms

Iteration   4: 2,630 ops/s
                 Â·gc.alloc.rate:      7796,376 MB/sec
                 Â·gc.alloc.rate.norm: 3108515073,481 B/op
                 Â·gc.count:           526,000 counts
                 Â·gc.time:            5248,000 ms

Iteration   5: 2,677 ops/s
                 Â·gc.alloc.rate:      7935,824 MB/sec
                 Â·gc.alloc.rate.norm: 3108515072,296 B/op
                 Â·gc.count:           516,000 counts
                 Â·gc.time:            5087,000 ms


# Run progress: 46,67% complete, ETA 00:14:02
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
2,537 ops/s
# Warmup Iteration   2: 2,579 ops/s
# Warmup Iteration   3: 2,471 ops/s
# Warmup Iteration   4: 2,484 ops/s
# Warmup Iteration   5: 2,413 ops/s
Iteration   1: 2,514 ops/s
                 Â·gc.alloc.rate:      7453,654 MB/sec
                 Â·gc.alloc.rate.norm: 3108515071,692 B/op
                 Â·gc.count:           498,000 counts
                 Â·gc.time:            5526,000 ms

Iteration   2: 2,539 ops/s
                 Â·gc.alloc.rate:      7527,926 MB/sec
                 Â·gc.alloc.rate.norm: 3108515071,692 B/op
                 Â·gc.count:           502,000 counts
                 Â·gc.time:            5381,000 ms

Iteration   3: 2,533 ops/s
                 Â·gc.alloc.rate:      7506,437 MB/sec
                 Â·gc.alloc.rate.norm: 3108515071,692 B/op
                 Â·gc.count:           505,000 counts
                 Â·gc.time:            5576,000 ms

Iteration   4: 2,565 ops/s
                 Â·gc.alloc.rate:      7604,142 MB/sec
                 Â·gc.alloc.rate.norm: 3108515072,923 B/op
                 Â·gc.count:           495,000 counts
                 Â·gc.time:            5362,000 ms

Iteration   5: 2,525 ops/s
                 Â·gc.alloc.rate:      7484,857 MB/sec
                 Â·gc.alloc.rate.norm: 3108515072,923 B/op
                 Â·gc.count:           508,000 counts
                 Â·gc.time:            5506,000 ms


# Run progress: 53,33% complete, ETA 00:12:19
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
2,497 ops/s
# Warmup Iteration   2: 2,651 ops/s
# Warmup Iteration   3: 2,622 ops/s
# Warmup Iteration   4: 2,608 ops/s
# Warmup Iteration   5: 2,459 ops/s
Iteration   1: 2,553 ops/s
                 Â·gc.alloc.rate:      7569,766 MB/sec
                 Â·gc.alloc.rate.norm: 3108515071,692 B/op
                 Â·gc.count:           507,000 counts
                 Â·gc.time:            5501,000 ms

Iteration   2: 2,636 ops/s
                 Â·gc.alloc.rate:      7814,062 MB/sec
                 Â·gc.alloc.rate.norm: 3108515071,111 B/op
                 Â·gc.count:           511,000 counts
                 Â·gc.time:            5230,000 ms

Iteration   3: 2,669 ops/s
                 Â·gc.alloc.rate:      7912,665 MB/sec
                 Â·gc.alloc.rate.norm: 3108515071,111 B/op
                 Â·gc.count:           513,000 counts
                 Â·gc.time:            5135,000 ms

Iteration   4: 2,478 ops/s
                 Â·gc.alloc.rate:      7345,375 MB/sec
                 Â·gc.alloc.rate.norm: 3108515072,320 B/op
                 Â·gc.count:           478,000 counts
                 Â·gc.time:            5474,000 ms

Iteration   5: 2,588 ops/s
                 Â·gc.alloc.rate:      7671,426 MB/sec
                 Â·gc.alloc.rate.norm: 3108515072,923 B/op
                 Â·gc.count:           504,000 counts
                 Â·gc.time:            5130,000 ms


# Run progress: 60,00% complete, ETA 00:10:32
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
2,478 ops/s
# Warmup Iteration   2: 2,456 ops/s
# Warmup Iteration   3: 2,593 ops/s
# Warmup Iteration   4: 2,613 ops/s
# Warmup Iteration   5: 2,525 ops/s
Iteration   1: 2,472 ops/s
                 Â·gc.alloc.rate:      7327,199 MB/sec
                 Â·gc.alloc.rate.norm: 3108515072,320 B/op
                 Â·gc.count:           480,000 counts
                 Â·gc.time:            5541,000 ms

Iteration   2: 2,376 ops/s
                 Â·gc.alloc.rate:      7044,420 MB/sec
                 Â·gc.alloc.rate.norm: 3108515073,000 B/op
                 Â·gc.count:           470,000 counts
                 Â·gc.time:            5658,000 ms

Iteration   3: 2,395 ops/s
                 Â·gc.alloc.rate:      7099,530 MB/sec
                 Â·gc.alloc.rate.norm: 3108515073,000 B/op
                 Â·gc.count:           457,000 counts
                 Â·gc.time:            5600,000 ms

Iteration   4: 2,608 ops/s
                 Â·gc.alloc.rate:      7732,669 MB/sec
                 Â·gc.alloc.rate.norm: 3108515073,481 B/op
                 Â·gc.count:           510,000 counts
                 Â·gc.time:            5266,000 ms

Iteration   5: 2,458 ops/s
                 Â·gc.alloc.rate:      7285,680 MB/sec
                 Â·gc.alloc.rate.norm: 3108515073,600 B/op
                 Â·gc.count:           485,000 counts
                 Â·gc.time:            5634,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc":
  2,534 Â±(99.9%) 0,061 ops/s [Average]
  (min, avg, max) = (2,376, 2,534, 2,677), stdev = 0,081
  CI (99.9%): [2,473, 2,595] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.alloc.rate":
  7511,763 Â±(99.9%) 179,831 MB/sec [Average]
  (min, avg, max) = (7044,420, 7511,763, 7935,824), stdev = 240,069
  CI (99.9%): [7331,932, 7691,593] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm":
  3108515072,521 Â±(99.9%) 0,698 B/op [Average]
  (min, avg, max) = (3108515071,111, 3108515072,521, 3108515074,880), stdev = 0,932
  CI (99.9%): [3108515071,823, 3108515073,220] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.count":
  12425,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (457,000, 497,000, 526,000), stdev = 16,583
  CI (99.9%): [12425,000, 12425,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.time":
  135637,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (5087,000, 5425,480, 5872,000), stdev = 182,400
  CI (99.9%): [135637,000, 135637,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc
# Parameters: (percentageOfRetainedHeap = P_50)

# Run progress: 66,67% complete, ETA 00:08:48
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
2,949 ops/s
# Warmup Iteration   2: 2,799 ops/s
# Warmup Iteration   3: 2,975 ops/s
# Warmup Iteration   4: 2,788 ops/s
# Warmup Iteration   5: 2,931 ops/s
Iteration   1: 2,933 ops/s
                 Â·gc.alloc.rate:      5797,317 MB/sec
                 Â·gc.alloc.rate.norm: 2072343389,600 B/op
                 Â·gc.count:           530,000 counts
                 Â·gc.time:            6279,000 ms

Iteration   2: 3,028 ops/s
                 Â·gc.alloc.rate:      5985,001 MB/sec
                 Â·gc.alloc.rate.norm: 2072343391,226 B/op
                 Â·gc.count:           546,000 counts
                 Â·gc.time:            6142,000 ms

Iteration   3: 2,704 ops/s
                 Â·gc.alloc.rate:      5344,415 MB/sec
                 Â·gc.alloc.rate.norm: 2072343390,571 B/op
                 Â·gc.count:           501,000 counts
                 Â·gc.time:            6703,000 ms

Iteration   4: 2,945 ops/s
                 Â·gc.alloc.rate:      5820,986 MB/sec
                 Â·gc.alloc.rate.norm: 2072343390,667 B/op
                 Â·gc.count:           534,000 counts
                 Â·gc.time:            6247,000 ms

Iteration   5: 2,944 ops/s
                 Â·gc.alloc.rate:      5818,995 MB/sec
                 Â·gc.alloc.rate.norm: 2072343390,667 B/op
                 Â·gc.count:           533,000 counts
                 Â·gc.time:            6200,000 ms


# Run progress: 73,33% complete, ETA 00:07:03
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
2,685 ops/s
# Warmup Iteration   2: 2,970 ops/s
# Warmup Iteration   3: 2,774 ops/s
# Warmup Iteration   4: 3,056 ops/s
# Warmup Iteration   5: 2,890 ops/s
Iteration   1: 3,041 ops/s
                 Â·gc.alloc.rate:      6009,497 MB/sec
                 Â·gc.alloc.rate.norm: 2072343389,161 B/op
                 Â·gc.count:           549,000 counts
                 Â·gc.time:            6028,000 ms

Iteration   2: 2,793 ops/s
                 Â·gc.alloc.rate:      5519,754 MB/sec
                 Â·gc.alloc.rate.norm: 2072343390,571 B/op
                 Â·gc.count:           500,000 counts
                 Â·gc.time:            6235,000 ms

Iteration   3: 2,878 ops/s
                 Â·gc.alloc.rate:      5686,947 MB/sec
                 Â·gc.alloc.rate.norm: 2072343389,600 B/op
                 Â·gc.count:           533,000 counts
                 Â·gc.time:            6292,000 ms

Iteration   4: 2,960 ops/s
                 Â·gc.alloc.rate:      5849,689 MB/sec
                 Â·gc.alloc.rate.norm: 2072343391,733 B/op
                 Â·gc.count:           531,000 counts
                 Â·gc.time:            6263,000 ms

Iteration   5: 2,935 ops/s
                 Â·gc.alloc.rate:      5801,136 MB/sec
                 Â·gc.alloc.rate.norm: 2072343390,667 B/op
                 Â·gc.count:           530,000 counts
                 Â·gc.time:            6228,000 ms


# Run progress: 80,00% complete, ETA 00:05:17
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
2,876 ops/s
# Warmup Iteration   2: 2,922 ops/s
# Warmup Iteration   3: 2,890 ops/s
# Warmup Iteration   4: 2,939 ops/s
# Warmup Iteration   5: 2,863 ops/s
Iteration   1: 3,041 ops/s
                 Â·gc.alloc.rate:      6010,270 MB/sec
                 Â·gc.alloc.rate.norm: 2072343389,161 B/op
                 Â·gc.count:           548,000 counts
                 Â·gc.time:            6065,000 ms

Iteration   2: 2,749 ops/s
                 Â·gc.alloc.rate:      5432,978 MB/sec
                 Â·gc.alloc.rate.norm: 2072343390,571 B/op
                 Â·gc.count:           505,000 counts
                 Â·gc.time:            6288,000 ms

Iteration   3: 2,955 ops/s
                 Â·gc.alloc.rate:      5837,884 MB/sec
                 Â·gc.alloc.rate.norm: 2072343389,600 B/op
                 Â·gc.count:           531,000 counts
                 Â·gc.time:            6167,000 ms

Iteration   4: 2,719 ops/s
                 Â·gc.alloc.rate:      5372,943 MB/sec
                 Â·gc.alloc.rate.norm: 2072343391,714 B/op
                 Â·gc.count:           501,000 counts
                 Â·gc.time:            6596,000 ms

Iteration   5: 2,899 ops/s
                 Â·gc.alloc.rate:      5728,795 MB/sec
                 Â·gc.alloc.rate.norm: 2072343390,667 B/op
                 Â·gc.count:           534,000 counts
                 Â·gc.time:            6430,000 ms


# Run progress: 86,67% complete, ETA 00:03:31
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
2,883 ops/s
# Warmup Iteration   2: 2,865 ops/s
# Warmup Iteration   3: 2,880 ops/s
# Warmup Iteration   4: 2,984 ops/s
# Warmup Iteration   5: 2,896 ops/s
Iteration   1: 2,920 ops/s
                 Â·gc.alloc.rate:      5771,313 MB/sec
                 Â·gc.alloc.rate.norm: 2072343389,600 B/op
                 Â·gc.count:           530,000 counts
                 Â·gc.time:            6260,000 ms

Iteration   2: 2,944 ops/s
                 Â·gc.alloc.rate:      5818,582 MB/sec
                 Â·gc.alloc.rate.norm: 2072343389,600 B/op
                 Â·gc.count:           534,000 counts
                 Â·gc.time:            6103,000 ms

Iteration   3: 2,948 ops/s
                 Â·gc.alloc.rate:      5826,303 MB/sec
                 Â·gc.alloc.rate.norm: 2072343389,600 B/op
                 Â·gc.count:           532,000 counts
                 Â·gc.time:            6202,000 ms

Iteration   4: 2,845 ops/s
                 Â·gc.alloc.rate:      5622,474 MB/sec
                 Â·gc.alloc.rate.norm: 2072343391,172 B/op
                 Â·gc.count:           520,000 counts
                 Â·gc.time:            6138,000 ms

Iteration   5: 2,931 ops/s
                 Â·gc.alloc.rate:      5793,286 MB/sec
                 Â·gc.alloc.rate.norm: 2072343390,667 B/op
                 Â·gc.count:           529,000 counts
                 Â·gc.time:            6324,000 ms


# Run progress: 93,33% complete, ETA 00:01:45
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
2,991 ops/s
# Warmup Iteration   2: 2,886 ops/s
# Warmup Iteration   3: 2,985 ops/s
# Warmup Iteration   4: 2,932 ops/s
# Warmup Iteration   5: 2,813 ops/s
Iteration   1: 2,877 ops/s
                 Â·gc.alloc.rate:      5686,822 MB/sec
                 Â·gc.alloc.rate.norm: 2072343390,069 B/op
                 Â·gc.count:           517,000 counts
                 Â·gc.time:            6202,000 ms

Iteration   2: 2,850 ops/s
                 Â·gc.alloc.rate:      5633,375 MB/sec
                 Â·gc.alloc.rate.norm: 2072343390,069 B/op
                 Â·gc.count:           518,000 counts
                 Â·gc.time:            6033,000 ms

Iteration   3: 2,811 ops/s
                 Â·gc.alloc.rate:      5556,007 MB/sec
                 Â·gc.alloc.rate.norm: 2072343390,069 B/op
                 Â·gc.count:           524,000 counts
                 Â·gc.time:            6355,000 ms

Iteration   4: 2,827 ops/s
                 Â·gc.alloc.rate:      5586,925 MB/sec
                 Â·gc.alloc.rate.norm: 2072343391,172 B/op
                 Â·gc.count:           514,000 counts
                 Â·gc.time:            6231,000 ms

Iteration   5: 2,850 ops/s
                 Â·gc.alloc.rate:      5631,825 MB/sec
                 Â·gc.alloc.rate.norm: 2072343391,172 B/op
                 Â·gc.count:           519,000 counts
                 Â·gc.time:            6052,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc":
  2,893 Â±(99.9%) 0,069 ops/s [Average]
  (min, avg, max) = (2,704, 2,893, 3,041), stdev = 0,092
  CI (99.9%): [2,825, 2,962] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.alloc.rate":
  5717,741 Â±(99.9%) 135,571 MB/sec [Average]
  (min, avg, max) = (5344,415, 5717,741, 6010,270), stdev = 180,983
  CI (99.9%): [5582,170, 5853,312] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm":
  2072343390,375 Â±(99.9%) 0,565 B/op [Average]
  (min, avg, max) = (2072343389,161, 2072343390,375, 2072343391,733), stdev = 0,754
  CI (99.9%): [2072343389,810, 2072343390,939] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.count":
  13143,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (500,000, 525,720, 549,000), stdev = 13,828
  CI (99.9%): [13143,000, 13143,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.time":
  156063,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (6028,000, 6242,520, 6703,000), stdev = 159,091
  CI (99.9%): [156063,000, 156063,000] (assumes normal distribution)


# Run complete. Total time: 00:26:25

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                                  (percentageOfRetainedHeap)   Mode  Cnt           Score     Error   Units
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc                                             P_0  thrpt   25           2,067 Â±   0,070   ops/s
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.alloc.rate                              P_0  thrpt   25        8170,060 Â± 277,316  MB/sec
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm                         P_0  thrpt   25  4144686756,258 Â±   0,983    B/op
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.count                                   P_0  thrpt   25       10727,000            counts
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.time                                    P_0  thrpt   25      131121,000                ms
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc                                            P_25  thrpt   25           2,534 Â±   0,061   ops/s
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.alloc.rate                             P_25  thrpt   25        7511,763 Â± 179,831  MB/sec
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm                        P_25  thrpt   25  3108515072,521 Â±   0,698    B/op
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.count                                  P_25  thrpt   25       12425,000            counts
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.time                                   P_25  thrpt   25      135637,000                ms
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc                                            P_50  thrpt   25           2,893 Â±   0,069   ops/s
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.alloc.rate                             P_50  thrpt   25        5717,741 Â± 135,571  MB/sec
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm                        P_50  thrpt   25  2072343390,375 Â±   0,565    B/op
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.count                                  P_50  thrpt   25       13143,000            counts
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.time                                   P_50  thrpt   25      156063,000                ms

Benchmark result is saved to results/jdk-17/arm64/openjdk-hotspot-vm/HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark_g1GC_1thread.csv

Running HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark benchmark ...
java  -jar benchmarks/target/benchmarks.jar .*HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.* -foe true -wi 5 -w 10 -i 5 -r 10 -f 5 -rf csv -rff results/jdk-17/arm64/openjdk-hotspot-vm/HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark_g1GC_2threads.csv -t 2 -prof gc -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseG1GC"

# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc
# Parameters: (percentageOfRetainedHeap = P_0)

# Run progress: 0,00% complete, ETA 00:25:00
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
3,240 ops/s
# Warmup Iteration   2: 3,912 ops/s
# Warmup Iteration   3: 3,234 ops/s
# Warmup Iteration   4: 3,243 ops/s
# Warmup Iteration   5: 3,655 ops/s
Iteration   1: 4,096 ops/s
                 Â·gc.alloc.rate:      7888,464 MB/sec
                 Â·gc.alloc.rate.norm: 2072343398,698 B/op
                 Â·gc.count:           492,000 counts
                 Â·gc.time:            7341,000 ms

Iteration   2: 3,210 ops/s
                 Â·gc.alloc.rate:      6181,751 MB/sec
                 Â·gc.alloc.rate.norm: 2072343405,576 B/op
                 Â·gc.count:           486,000 counts
                 Â·gc.time:            7767,000 ms

Iteration   3: 3,309 ops/s
                 Â·gc.alloc.rate:      6513,014 MB/sec
                 Â·gc.alloc.rate.norm: 2072343714,057 B/op
                 Â·gc.count:           530,000 counts
                 Â·gc.time:            7680,000 ms

Iteration   4: 3,220 ops/s
                 Â·gc.alloc.rate:      6266,508 MB/sec
                 Â·gc.alloc.rate.norm: 2072343404,706 B/op
                 Â·gc.count:           538,000 counts
                 Â·gc.time:            7819,000 ms

Iteration   5: 3,586 ops/s
                 Â·gc.alloc.rate:      7067,143 MB/sec
                 Â·gc.alloc.rate.norm: 2072343402,667 B/op
                 Â·gc.count:           499,000 counts
                 Â·gc.time:            7707,000 ms


# Run progress: 6,67% complete, ETA 00:26:22
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
3,514 ops/s
# Warmup Iteration   2: 3,494 ops/s
# Warmup Iteration   3: 3,314 ops/s
# Warmup Iteration   4: 3,663 ops/s
# Warmup Iteration   5: 3,708 ops/s
Iteration   1: 3,250 ops/s
                 Â·gc.alloc.rate:      6344,035 MB/sec
                 Â·gc.alloc.rate.norm: 2072343403,886 B/op
                 Â·gc.count:           480,000 counts
                 Â·gc.time:            7963,000 ms

Iteration   2: 3,585 ops/s
                 Â·gc.alloc.rate:      6967,653 MB/sec
                 Â·gc.alloc.rate.norm: 2072343401,846 B/op
                 Â·gc.count:           525,000 counts
                 Â·gc.time:            7868,000 ms

Iteration   3: 3,071 ops/s
                 Â·gc.alloc.rate:      6021,515 MB/sec
                 Â·gc.alloc.rate.norm: 2072343405,576 B/op
                 Â·gc.count:           512,000 counts
                 Â·gc.time:            7992,000 ms

Iteration   4: 3,263 ops/s
                 Â·gc.alloc.rate:      6389,592 MB/sec
                 Â·gc.alloc.rate.norm: 2072343715,886 B/op
                 Â·gc.count:           536,000 counts
                 Â·gc.time:            7829,000 ms

Iteration   5: 3,113 ops/s
                 Â·gc.alloc.rate:      6080,625 MB/sec
                 Â·gc.alloc.rate.norm: 2072343407,515 B/op
                 Â·gc.count:           518,000 counts
                 Â·gc.time:            7917,000 ms


# Run progress: 13,33% complete, ETA 00:24:18
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
3,354 ops/s
# Warmup Iteration   2: 4,364 ops/s
# Warmup Iteration   3: 2,968 ops/s
# Warmup Iteration   4: 3,135 ops/s
# Warmup Iteration   5: 2,827 ops/s
Iteration   1: 3,821 ops/s
                 Â·gc.alloc.rate:      7306,502 MB/sec
                 Â·gc.alloc.rate.norm: 2072343401,026 B/op
                 Â·gc.count:           473,000 counts
                 Â·gc.time:            7417,000 ms

Iteration   2: 3,634 ops/s
                 Â·gc.alloc.rate:      7046,193 MB/sec
                 Â·gc.alloc.rate.norm: 2072343401,684 B/op
                 Â·gc.count:           458,000 counts
                 Â·gc.time:            7613,000 ms

Iteration   3: 3,461 ops/s
                 Â·gc.alloc.rate:      6892,213 MB/sec
                 Â·gc.alloc.rate.norm: 2072343402,378 B/op
                 Â·gc.count:           500,000 counts
                 Â·gc.time:            7519,000 ms

Iteration   4: 2,818 ops/s
                 Â·gc.alloc.rate:      5603,454 MB/sec
                 Â·gc.alloc.rate.norm: 2072343772,533 B/op
                 Â·gc.count:           510,000 counts
                 Â·gc.time:            8006,000 ms

Iteration   5: 3,603 ops/s
                 Â·gc.alloc.rate:      7078,339 MB/sec
                 Â·gc.alloc.rate.norm: 2072343402,667 B/op
                 Â·gc.count:           552,000 counts
                 Â·gc.time:            7646,000 ms


# Run progress: 20,00% complete, ETA 00:22:14
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
3,614 ops/s
# Warmup Iteration   2: 3,602 ops/s
# Warmup Iteration   3: 3,766 ops/s
# Warmup Iteration   4: 3,579 ops/s
# Warmup Iteration   5: 2,977 ops/s
Iteration   1: 3,744 ops/s
                 Â·gc.alloc.rate:      7346,996 MB/sec
                 Â·gc.alloc.rate.norm: 2072343401,026 B/op
                 Â·gc.count:           448,000 counts
                 Â·gc.time:            7387,000 ms

Iteration   2: 2,775 ops/s
                 Â·gc.alloc.rate:      5396,616 MB/sec
                 Â·gc.alloc.rate.norm: 2072343409,655 B/op
                 Â·gc.count:           484,000 counts
                 Â·gc.time:            8090,000 ms

Iteration   3: 3,045 ops/s
                 Â·gc.alloc.rate:      6027,066 MB/sec
                 Â·gc.alloc.rate.norm: 2072343405,576 B/op
                 Â·gc.count:           527,000 counts
                 Â·gc.time:            7970,000 ms

Iteration   4: 3,919 ops/s
                 Â·gc.alloc.rate:      7689,028 MB/sec
                 Â·gc.alloc.rate.norm: 2072343666,146 B/op
                 Â·gc.count:           494,000 counts
                 Â·gc.time:            7165,000 ms

Iteration   5: 3,754 ops/s
                 Â·gc.alloc.rate:      7384,428 MB/sec
                 Â·gc.alloc.rate.norm: 2072343402,667 B/op
                 Â·gc.count:           473,000 counts
                 Â·gc.time:            7298,000 ms


# Run progress: 26,67% complete, ETA 00:20:18
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
3,689 ops/s
# Warmup Iteration   2: 2,988 ops/s
# Warmup Iteration   3: 3,389 ops/s
# Warmup Iteration   4: 3,707 ops/s
# Warmup Iteration   5: 3,624 ops/s
Iteration   1: 3,639 ops/s
                 Â·gc.alloc.rate:      7070,656 MB/sec
                 Â·gc.alloc.rate.norm: 2072343401,026 B/op
                 Â·gc.count:           528,000 counts
                 Â·gc.time:            7651,000 ms

Iteration   2: 3,893 ops/s
                 Â·gc.alloc.rate:      7685,454 MB/sec
                 Â·gc.alloc.rate.norm: 2072343399,805 B/op
                 Â·gc.count:           536,000 counts
                 Â·gc.time:            7103,000 ms

Iteration   3: 3,796 ops/s
                 Â·gc.alloc.rate:      7449,035 MB/sec
                 Â·gc.alloc.rate.norm: 2072343400,400 B/op
                 Â·gc.count:           522,000 counts
                 Â·gc.time:            7347,000 ms

Iteration   4: 3,778 ops/s
                 Â·gc.alloc.rate:      7468,922 MB/sec
                 Â·gc.alloc.rate.norm: 2072343681,026 B/op
                 Â·gc.count:           474,000 counts
                 Â·gc.time:            7164,000 ms

Iteration   5: 2,849 ops/s
                 Â·gc.alloc.rate:      5616,033 MB/sec
                 Â·gc.alloc.rate.norm: 2072343409,548 B/op
                 Â·gc.count:           525,000 counts
                 Â·gc.time:            8202,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc":
  3,449 Â±(99.9%) 0,280 ops/s [Average]
  (min, avg, max) = (2,775, 3,449, 4,096), stdev = 0,374
  CI (99.9%): [3,169, 3,729] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.alloc.rate":
  6751,249 Â±(99.9%) 539,185 MB/sec [Average]
  (min, avg, max) = (5396,616, 6751,249, 7888,464), stdev = 719,796
  CI (99.9%): [6212,065, 7290,434] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm":
  2072343464,703 Â±(99.9%) 94,598 B/op [Average]
  (min, avg, max) = (2072343398,698, 2072343464,703, 2072343772,533), stdev = 126,286
  CI (99.9%): [2072343370,105, 2072343559,301] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.count":
  12620,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (448,000, 504,800, 552,000), stdev = 27,714
  CI (99.9%): [12620,000, 12620,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.time":
  191461,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (7103,000, 7658,440, 8202,000), stdev = 313,693
  CI (99.9%): [191461,000, 191461,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc
# Parameters: (percentageOfRetainedHeap = P_25)

# Run progress: 33,33% complete, ETA 00:18:24
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
3,806 ops/s
# Warmup Iteration   2: 4,746 ops/s
# Warmup Iteration   3: 4,837 ops/s
# Warmup Iteration   4: 3,449 ops/s
# Warmup Iteration   5: 3,405 ops/s
Iteration   1: 3,847 ops/s
                 Â·gc.alloc.rate:      5673,203 MB/sec
                 Â·gc.alloc.rate.norm: 1554257559,805 B/op
                 Â·gc.count:           554,000 counts
                 Â·gc.time:            8110,000 ms

Iteration   2: 3,614 ops/s
                 Â·gc.alloc.rate:      5366,281 MB/sec
                 Â·gc.alloc.rate.norm: 1554257561,026 B/op
                 Â·gc.count:           584,000 counts
                 Â·gc.time:            8219,000 ms

Iteration   3: 3,653 ops/s
                 Â·gc.alloc.rate:      5475,799 MB/sec
                 Â·gc.alloc.rate.norm: 1554257561,026 B/op
                 Â·gc.count:           563,000 counts
                 Â·gc.time:            8017,000 ms

Iteration   4: 3,550 ops/s
                 Â·gc.alloc.rate:      5271,705 MB/sec
                 Â·gc.alloc.rate.norm: 1554257849,053 B/op
                 Â·gc.count:           590,000 counts
                 Â·gc.time:            8217,000 ms

Iteration   5: 4,656 ops/s
                 Â·gc.alloc.rate:      6967,936 MB/sec
                 Â·gc.alloc.rate.norm: 1554257556,571 B/op
                 Â·gc.count:           529,000 counts
                 Â·gc.time:            7467,000 ms


# Run progress: 40,00% complete, ETA 00:16:36
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
3,501 ops/s
# Warmup Iteration   2: 4,523 ops/s
# Warmup Iteration   3: 3,530 ops/s
# Warmup Iteration   4: 3,979 ops/s
# Warmup Iteration   5: 3,753 ops/s
Iteration   1: 4,780 ops/s
                 Â·gc.alloc.rate:      7052,069 MB/sec
                 Â·gc.alloc.rate.norm: 1554257556,571 B/op
                 Â·gc.count:           571,000 counts
                 Â·gc.time:            7269,000 ms

Iteration   2: 4,160 ops/s
                 Â·gc.alloc.rate:      6214,926 MB/sec
                 Â·gc.alloc.rate.norm: 1554257558,698 B/op
                 Â·gc.count:           558,000 counts
                 Â·gc.time:            7541,000 ms

Iteration   3: 3,203 ops/s
                 Â·gc.alloc.rate:      4820,856 MB/sec
                 Â·gc.alloc.rate.norm: 1554257563,886 B/op
                 Â·gc.count:           595,000 counts
                 Â·gc.time:            8401,000 ms

Iteration   4: 4,610 ops/s
                 Â·gc.alloc.rate:      6844,999 MB/sec
                 Â·gc.alloc.rate.norm: 1554257777,469 B/op
                 Â·gc.count:           551,000 counts
                 Â·gc.time:            7622,000 ms

Iteration   5: 4,526 ops/s
                 Â·gc.alloc.rate:      6670,020 MB/sec
                 Â·gc.alloc.rate.norm: 1554257556,766 B/op
                 Â·gc.count:           541,000 counts
                 Â·gc.time:            7525,000 ms


# Run progress: 46,67% complete, ETA 00:14:46
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
3,590 ops/s
# Warmup Iteration   2: 4,406 ops/s
# Warmup Iteration   3: 4,780 ops/s
# Warmup Iteration   4: 4,072 ops/s
# Warmup Iteration   5: 4,123 ops/s
Iteration   1: 4,671 ops/s
                 Â·gc.alloc.rate:      6827,682 MB/sec
                 Â·gc.alloc.rate.norm: 1554257555,918 B/op
                 Â·gc.count:           571,000 counts
                 Â·gc.time:            7608,000 ms

Iteration   2: 4,862 ops/s
                 Â·gc.alloc.rate:      7202,082 MB/sec
                 Â·gc.alloc.rate.norm: 1554257555,137 B/op
                 Â·gc.count:           545,000 counts
                 Â·gc.time:            7401,000 ms

Iteration   3: 4,396 ops/s
                 Â·gc.alloc.rate:      6488,882 MB/sec
                 Â·gc.alloc.rate.norm: 1554257557,447 B/op
                 Â·gc.count:           583,000 counts
                 Â·gc.time:            7772,000 ms

Iteration   4: 4,803 ops/s
                 Â·gc.alloc.rate:      7051,458 MB/sec
                 Â·gc.alloc.rate.norm: 1554257768,000 B/op
                 Â·gc.count:           561,000 counts
                 Â·gc.time:            7620,000 ms

Iteration   5: 3,843 ops/s
                 Â·gc.alloc.rate:      5704,942 MB/sec
                 Â·gc.alloc.rate.norm: 1554257559,805 B/op
                 Â·gc.count:           602,000 counts
                 Â·gc.time:            7999,000 ms


# Run progress: 53,33% complete, ETA 00:12:56
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
4,386 ops/s
# Warmup Iteration   2: 4,340 ops/s
# Warmup Iteration   3: 4,335 ops/s
# Warmup Iteration   4: 4,830 ops/s
# Warmup Iteration   5: 4,302 ops/s
Iteration   1: 5,063 ops/s
                 Â·gc.alloc.rate:      7467,065 MB/sec
                 Â·gc.alloc.rate.norm: 1554257554,415 B/op
                 Â·gc.count:           588,000 counts
                 Â·gc.time:            7282,000 ms

Iteration   2: 4,023 ops/s
                 Â·gc.alloc.rate:      5985,629 MB/sec
                 Â·gc.alloc.rate.norm: 1554257559,442 B/op
                 Â·gc.count:           544,000 counts
                 Â·gc.time:            7951,000 ms

Iteration   3: 3,518 ops/s
                 Â·gc.alloc.rate:      5208,609 MB/sec
                 Â·gc.alloc.rate.norm: 1554257562,378 B/op
                 Â·gc.count:           546,000 counts
                 Â·gc.time:            8113,000 ms

Iteration   4: 4,733 ops/s
                 Â·gc.alloc.rate:      7076,002 MB/sec
                 Â·gc.alloc.rate.norm: 1554257777,469 B/op
                 Â·gc.count:           550,000 counts
                 Â·gc.time:            7288,000 ms

Iteration   5: 3,149 ops/s
                 Â·gc.alloc.rate:      4759,586 MB/sec
                 Â·gc.alloc.rate.norm: 1554257565,647 B/op
                 Â·gc.count:           591,000 counts
                 Â·gc.time:            8308,000 ms


# Run progress: 60,00% complete, ETA 00:11:06
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
3,585 ops/s
# Warmup Iteration   2: 3,829 ops/s
# Warmup Iteration   3: 3,558 ops/s
# Warmup Iteration   4: 3,847 ops/s
# Warmup Iteration   5: 3,534 ops/s
Iteration   1: 3,551 ops/s
                 Â·gc.alloc.rate:      5288,539 MB/sec
                 Â·gc.alloc.rate.norm: 1554257561,684 B/op
                 Â·gc.count:           577,000 counts
                 Â·gc.time:            8190,000 ms

Iteration   2: 3,386 ops/s
                 Â·gc.alloc.rate:      5101,628 MB/sec
                 Â·gc.alloc.rate.norm: 1554257562,378 B/op
                 Â·gc.count:           607,000 counts
                 Â·gc.time:            8286,000 ms

Iteration   3: 4,272 ops/s
                 Â·gc.alloc.rate:      6231,600 MB/sec
                 Â·gc.alloc.rate.norm: 1554257557,689 B/op
                 Â·gc.count:           549,000 counts
                 Â·gc.time:            7892,000 ms

Iteration   4: 3,535 ops/s
                 Â·gc.alloc.rate:      5274,263 MB/sec
                 Â·gc.alloc.rate.norm: 1554257847,368 B/op
                 Â·gc.count:           595,000 counts
                 Â·gc.time:            8190,000 ms

Iteration   5: 3,499 ops/s
                 Â·gc.alloc.rate:      5210,694 MB/sec
                 Â·gc.alloc.rate.norm: 1554257561,514 B/op
                 Â·gc.count:           590,000 counts
                 Â·gc.time:            8069,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc":
  4,076 Â±(99.9%) 0,445 ops/s [Average]
  (min, avg, max) = (3,149, 4,076, 5,063), stdev = 0,594
  CI (99.9%): [3,631, 4,521] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.alloc.rate":
  6049,458 Â±(99.9%) 638,719 MB/sec [Average]
  (min, avg, max) = (4759,586, 6049,458, 7467,065), stdev = 852,672
  CI (99.9%): [5410,739, 6688,177] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm":
  1554257608,287 Â±(99.9%) 75,820 B/op [Average]
  (min, avg, max) = (1554257554,415, 1554257608,287, 1554257849,053), stdev = 101,217
  CI (99.9%): [1554257532,467, 1554257684,106] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.count":
  14235,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (529,000, 569,400, 607,000), stdev = 22,123
  CI (99.9%): [14235,000, 14235,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.time":
  196357,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (7269,000, 7854,280, 8401,000), stdev = 362,100
  CI (99.9%): [196357,000, 196357,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseG1GC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc
# Parameters: (percentageOfRetainedHeap = P_50)

# Run progress: 66,67% complete, ETA 00:09:15
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
5,565 ops/s
# Warmup Iteration   2: 5,883 ops/s
# Warmup Iteration   3: 5,300 ops/s
# Warmup Iteration   4: 5,147 ops/s
# Warmup Iteration   5: 5,513 ops/s
Iteration   1: 5,793 ops/s
                 Â·gc.alloc.rate:      5710,627 MB/sec
                 Â·gc.alloc.rate.norm: 1036171712,000 B/op
                 Â·gc.count:           605,000 counts
                 Â·gc.time:            7834,000 ms

Iteration   2: 5,116 ops/s
                 Â·gc.alloc.rate:      5046,283 MB/sec
                 Â·gc.alloc.rate.norm: 1036171714,415 B/op
                 Â·gc.count:           611,000 counts
                 Â·gc.time:            7996,000 ms

Iteration   3: 4,904 ops/s
                 Â·gc.alloc.rate:      4870,575 MB/sec
                 Â·gc.alloc.rate.norm: 1036171714,769 B/op
                 Â·gc.count:           630,000 counts
                 Â·gc.time:            8243,000 ms

Iteration   4: 4,447 ops/s
                 Â·gc.alloc.rate:      4379,740 MB/sec
                 Â·gc.alloc.rate.norm: 1036171947,745 B/op
                 Â·gc.count:           601,000 counts
                 Â·gc.time:            8504,000 ms

Iteration   5: 5,325 ops/s
                 Â·gc.alloc.rate:      5261,365 MB/sec
                 Â·gc.alloc.rate.norm: 1036171714,571 B/op
                 Â·gc.count:           582,000 counts
                 Â·gc.time:            8019,000 ms


# Run progress: 73,33% complete, ETA 00:07:24
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
4,908 ops/s
# Warmup Iteration   2: 6,374 ops/s
# Warmup Iteration   3: 6,190 ops/s
# Warmup Iteration   4: 5,210 ops/s
# Warmup Iteration   5: 5,479 ops/s
Iteration   1: 4,772 ops/s
                 Â·gc.alloc.rate:      4727,811 MB/sec
                 Â·gc.alloc.rate.norm: 1036171715,765 B/op
                 Â·gc.count:           607,000 counts
                 Â·gc.time:            8379,000 ms

Iteration   2: 5,011 ops/s
                 Â·gc.alloc.rate:      4949,405 MB/sec
                 Â·gc.alloc.rate.norm: 1036171714,415 B/op
                 Â·gc.count:           578,000 counts
                 Â·gc.time:            8225,000 ms

Iteration   3: 5,760 ops/s
                 Â·gc.alloc.rate:      5654,968 MB/sec
                 Â·gc.alloc.rate.norm: 1036171712,000 B/op
                 Â·gc.count:           608,000 counts
                 Â·gc.time:            7959,000 ms

Iteration   4: 6,102 ops/s
                 Â·gc.alloc.rate:      6020,339 MB/sec
                 Â·gc.alloc.rate.norm: 1036171883,810 B/op
                 Â·gc.count:           595,000 counts
                 Â·gc.time:            7559,000 ms

Iteration   5: 5,772 ops/s
                 Â·gc.alloc.rate:      5673,680 MB/sec
                 Â·gc.alloc.rate.norm: 1036171712,542 B/op
                 Â·gc.count:           565,000 counts
                 Â·gc.time:            7678,000 ms


# Run progress: 80,00% complete, ETA 00:05:33
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
6,092 ops/s
# Warmup Iteration   2: 5,126 ops/s
# Warmup Iteration   3: 5,944 ops/s
# Warmup Iteration   4: 5,776 ops/s
# Warmup Iteration   5: 5,629 ops/s
Iteration   1: 5,981 ops/s
                 Â·gc.alloc.rate:      5882,323 MB/sec
                 Â·gc.alloc.rate.norm: 1036171711,492 B/op
                 Â·gc.count:           609,000 counts
                 Â·gc.time:            7777,000 ms

Iteration   2: 5,651 ops/s
                 Â·gc.alloc.rate:      5552,432 MB/sec
                 Â·gc.alloc.rate.norm: 1036171712,542 B/op
                 Â·gc.count:           612,000 counts
                 Â·gc.time:            7865,000 ms

Iteration   3: 4,205 ops/s
                 Â·gc.alloc.rate:      4181,927 MB/sec
                 Â·gc.alloc.rate.norm: 1036171717,689 B/op
                 Â·gc.count:           607,000 counts
                 Â·gc.time:            8610,000 ms

Iteration   4: 4,141 ops/s
                 Â·gc.alloc.rate:      4133,574 MB/sec
                 Â·gc.alloc.rate.norm: 1036171964,909 B/op
                 Â·gc.count:           634,000 counts
                 Â·gc.time:            8599,000 ms

Iteration   5: 5,916 ops/s
                 Â·gc.alloc.rate:      5812,234 MB/sec
                 Â·gc.alloc.rate.norm: 1036171712,000 B/op
                 Â·gc.count:           606,000 counts
                 Â·gc.time:            7739,000 ms


# Run progress: 86,67% complete, ETA 00:03:42
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
4,705 ops/s
# Warmup Iteration   2: 4,680 ops/s
# Warmup Iteration   3: 5,247 ops/s
# Warmup Iteration   4: 4,237 ops/s
# Warmup Iteration   5: 6,488 ops/s
Iteration   1: 4,705 ops/s
                 Â·gc.alloc.rate:      4675,723 MB/sec
                 Â·gc.alloc.rate.norm: 1036171715,918 B/op
                 Â·gc.count:           619,000 counts
                 Â·gc.time:            8208,000 ms

Iteration   2: 6,424 ops/s
                 Â·gc.alloc.rate:      6276,525 MB/sec
                 Â·gc.alloc.rate.norm: 1036171709,612 B/op
                 Â·gc.count:           627,000 counts
                 Â·gc.time:            7661,000 ms

Iteration   3: 6,008 ops/s
                 Â·gc.alloc.rate:      5925,271 MB/sec
                 Â·gc.alloc.rate.norm: 1036171711,492 B/op
                 Â·gc.count:           607,000 counts
                 Â·gc.time:            7758,000 ms

Iteration   4: 5,529 ops/s
                 Â·gc.alloc.rate:      5462,041 MB/sec
                 Â·gc.alloc.rate.norm: 1036171903,579 B/op
                 Â·gc.count:           599,000 counts
                 Â·gc.time:            7818,000 ms

Iteration   5: 6,021 ops/s
                 Â·gc.alloc.rate:      5913,071 MB/sec
                 Â·gc.alloc.rate.norm: 1036171711,492 B/op
                 Â·gc.count:           611,000 counts
                 Â·gc.time:            7811,000 ms


# Run progress: 93,33% complete, ETA 00:01:50
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
5,709 ops/s
# Warmup Iteration   2: 6,194 ops/s
# Warmup Iteration   3: 6,112 ops/s
# Warmup Iteration   4: 5,516 ops/s
# Warmup Iteration   5: 4,534 ops/s
Iteration   1: 4,692 ops/s
                 Â·gc.alloc.rate:      4630,179 MB/sec
                 Â·gc.alloc.rate.norm: 1036171715,918 B/op
                 Â·gc.count:           592,000 counts
                 Â·gc.time:            8320,000 ms

Iteration   2: 4,656 ops/s
                 Â·gc.alloc.rate:      4627,892 MB/sec
                 Â·gc.alloc.rate.norm: 1036171715,918 B/op
                 Â·gc.count:           599,000 counts
                 Â·gc.time:            8322,000 ms

Iteration   3: 6,026 ops/s
                 Â·gc.alloc.rate:      5940,419 MB/sec
                 Â·gc.alloc.rate.norm: 1036171711,492 B/op
                 Â·gc.count:           601,000 counts
                 Â·gc.time:            7750,000 ms

Iteration   4: 6,085 ops/s
                 Â·gc.alloc.rate:      5980,257 MB/sec
                 Â·gc.alloc.rate.norm: 1036171884,317 B/op
                 Â·gc.count:           612,000 counts
                 Â·gc.time:            7699,000 ms

Iteration   5: 5,270 ops/s
                 Â·gc.alloc.rate:      5218,510 MB/sec
                 Â·gc.alloc.rate.norm: 1036171714,909 B/op
                 Â·gc.count:           593,000 counts
                 Â·gc.time:            8010,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc":
  5,372 Â±(99.9%) 0,498 ops/s [Average]
  (min, avg, max) = (4,141, 5,372, 6,424), stdev = 0,665
  CI (99.9%): [4,875, 5,870] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.alloc.rate":
  5300,287 Â±(99.9%) 476,043 MB/sec [Average]
  (min, avg, max) = (4133,574, 5300,287, 6276,525), stdev = 635,504
  CI (99.9%): [4824,244, 5776,330] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm":
  1036171754,213 Â±(99.9%) 63,237 B/op [Average]
  (min, avg, max) = (1036171709,612, 1036171754,213, 1036171964,909), stdev = 84,420
  CI (99.9%): [1036171690,976, 1036171817,449] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.count":
  15110,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (565,000, 604,400, 634,000), stdev = 15,438
  CI (99.9%): [15110,000, 15110,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.time":
  200343,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (7559,000, 8013,720, 8610,000), stdev = 312,401
  CI (99.9%): [200343,000, 200343,000] (assumes normal distribution)


# Run complete. Total time: 00:27:42

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                                  (percentageOfRetainedHeap)   Mode  Cnt           Score     Error   Units
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc                                             P_0  thrpt   25           3,449 Â±   0,280   ops/s
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.alloc.rate                              P_0  thrpt   25        6751,249 Â± 539,185  MB/sec
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm                         P_0  thrpt   25  2072343464,703 Â±  94,598    B/op
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.count                                   P_0  thrpt   25       12620,000            counts
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.time                                    P_0  thrpt   25      191461,000                ms
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc                                            P_25  thrpt   25           4,076 Â±   0,445   ops/s
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.alloc.rate                             P_25  thrpt   25        6049,458 Â± 638,719  MB/sec
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm                        P_25  thrpt   25  1554257608,287 Â±  75,820    B/op
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.count                                  P_25  thrpt   25       14235,000            counts
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.time                                   P_25  thrpt   25      196357,000                ms
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc                                            P_50  thrpt   25           5,372 Â±   0,498   ops/s
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.alloc.rate                             P_50  thrpt   25        5300,287 Â± 476,043  MB/sec
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm                        P_50  thrpt   25  1036171754,213 Â±  63,237    B/op
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.count                                  P_50  thrpt   25       15110,000            counts
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.time                                   P_50  thrpt   25      200343,000                ms

Benchmark result is saved to results/jdk-17/arm64/openjdk-hotspot-vm/HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark_g1GC_2threads.csv

Running HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark benchmark ...
java  -jar benchmarks/target/benchmarks.jar .*HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.* -foe true -wi 5 -w 10 -i 5 -r 10 -f 5 -rf csv -rff results/jdk-17/arm64/openjdk-hotspot-vm/HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark_shenandoahGC_1thread.csv -t 1 -prof gc -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseShenandoahGC"

# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseShenandoahGC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc
# Parameters: (percentageOfRetainedHeap = P_0)

# Run progress: 0,00% complete, ETA 00:25:00
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,018 ops/s
# Warmup Iteration   2: 0,019 ops/s
# Warmup Iteration   3: 0,020 ops/s
# Warmup Iteration   4: 0,017 ops/s
# Warmup Iteration   5: 0,020 ops/s
Iteration   1: 0,019 ops/s
                 Â·gc.alloc.rate:      73,604 MB/sec
                 Â·gc.alloc.rate.norm: 4144687176,000 B/op
                 Â·gc.count:           291,000 counts
                 Â·gc.time:            106263,000 ms

Iteration   2: 0,019 ops/s
                 Â·gc.alloc.rate:      76,898 MB/sec
                 Â·gc.alloc.rate.norm: 4144687176,000 B/op
                 Â·gc.count:           278,000 counts
                 Â·gc.time:            101932,000 ms

Iteration   3: 0,021 ops/s
                 Â·gc.alloc.rate:      81,705 MB/sec
                 Â·gc.alloc.rate.norm: 4144687208,000 B/op
                 Â·gc.count:           264,000 counts
                 Â·gc.time:            95777,000 ms

Iteration   4: 0,018 ops/s
                 Â·gc.alloc.rate:      70,664 MB/sec
                 Â·gc.alloc.rate.norm: 4144687176,000 B/op
                 Â·gc.count:           301,000 counts
                 Â·gc.time:            110728,000 ms

Iteration   5: 0,017 ops/s
                 Â·gc.alloc.rate:      65,761 MB/sec
                 Â·gc.alloc.rate.norm: 4144687176,000 B/op
                 Â·gc.count:           321,000 counts
                 Â·gc.time:            118998,000 ms


# Run progress: 6,67% complete, ETA 02:05:53
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,018 ops/s
# Warmup Iteration   2: 0,020 ops/s
# Warmup Iteration   3: 0,019 ops/s
# Warmup Iteration   4: 0,022 ops/s
# Warmup Iteration   5: 0,019 ops/s
Iteration   1: 0,019 ops/s
                 Â·gc.alloc.rate:      74,482 MB/sec
                 Â·gc.alloc.rate.norm: 4144687176,000 B/op
                 Â·gc.count:           287,000 counts
                 Â·gc.time:            105043,000 ms

Iteration   2: 0,018 ops/s
                 Â·gc.alloc.rate:      70,314 MB/sec
                 Â·gc.alloc.rate.norm: 4144687176,000 B/op
                 Â·gc.count:           302,000 counts
                 Â·gc.time:            111200,000 ms

Iteration   3: 0,020 ops/s
                 Â·gc.alloc.rate:      79,077 MB/sec
                 Â·gc.alloc.rate.norm: 4144687176,000 B/op
                 Â·gc.count:           273,000 counts
                 Â·gc.time:            98859,000 ms

Iteration   4: 0,018 ops/s
                 Â·gc.alloc.rate:      71,175 MB/sec
                 Â·gc.alloc.rate.norm: 4144687176,000 B/op
                 Â·gc.count:           301,000 counts
                 Â·gc.time:            109895,000 ms

Iteration   5: 0,019 ops/s
                 Â·gc.alloc.rate:      76,787 MB/sec
                 Â·gc.alloc.rate.norm: 4144687176,000 B/op
                 Â·gc.count:           284,000 counts
                 Â·gc.time:            101794,000 ms


# Run progress: 13,33% complete, ETA 01:55:38
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,017 ops/s
# Warmup Iteration   2: 0,020 ops/s
# Warmup Iteration   3: 0,019 ops/s
# Warmup Iteration   4: 0,019 ops/s
# Warmup Iteration   5: 0,020 ops/s
Iteration   1: 0,019 ops/s
                 Â·gc.alloc.rate:      75,756 MB/sec
                 Â·gc.alloc.rate.norm: 4144687208,000 B/op
                 Â·gc.count:           283,000 counts
                 Â·gc.time:            103400,000 ms

Iteration   2: 0,020 ops/s
                 Â·gc.alloc.rate:      79,905 MB/sec
                 Â·gc.alloc.rate.norm: 4144687176,000 B/op
                 Â·gc.count:           271,000 counts
                 Â·gc.time:            97698,000 ms

Iteration   3: 0,019 ops/s
                 Â·gc.alloc.rate:      76,338 MB/sec
                 Â·gc.alloc.rate.norm: 4144687208,000 B/op
                 Â·gc.count:           281,000 counts
                 Â·gc.time:            102495,000 ms

Iteration   4: 0,019 ops/s
                 Â·gc.alloc.rate:      76,260 MB/sec
                 Â·gc.alloc.rate.norm: 4144687176,000 B/op
                 Â·gc.count:           281,000 counts
                 Â·gc.time:            102606,000 ms

Iteration   5: 0,019 ops/s
                 Â·gc.alloc.rate:      76,042 MB/sec
                 Â·gc.alloc.rate.norm: 4144687176,000 B/op
                 Â·gc.count:           281,000 counts
                 Â·gc.time:            102890,000 ms


# Run progress: 20,00% complete, ETA 01:46:04
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,017 ops/s
# Warmup Iteration   2: 0,017 ops/s
# Warmup Iteration   3: 0,013 ops/s
# Warmup Iteration   4: 0,008 ops/s
# Warmup Iteration   5: 0,008 ops/s
Iteration   1: 0,010 ops/s
                 Â·gc.alloc.rate:      41,416 MB/sec
                 Â·gc.alloc.rate.norm: 4144687176,000 B/op
                 Â·gc.count:           274,000 counts
                 Â·gc.time:            189903,000 ms

Iteration   2: 0,010 ops/s
                 Â·gc.alloc.rate:      40,592 MB/sec
                 Â·gc.alloc.rate.norm: 4144687176,000 B/op
                 Â·gc.count:           237,000 counts
                 Â·gc.time:            193895,000 ms

Iteration   3: 0,007 ops/s
                 Â·gc.alloc.rate:      28,375 MB/sec
                 Â·gc.alloc.rate.norm: 4144687176,000 B/op
                 Â·gc.count:           298,000 counts
                 Â·gc.time:            277407,000 ms

Iteration   4: 0,008 ops/s
                 Â·gc.alloc.rate:      31,843 MB/sec
                 Â·gc.alloc.rate.norm: 4144687176,000 B/op
                 Â·gc.count:           312,000 counts
                 Â·gc.time:            246932,000 ms

Iteration   5: 0,020 ops/s
                 Â·gc.alloc.rate:      78,870 MB/sec
                 Â·gc.alloc.rate.norm: 4144687176,000 B/op
                 Â·gc.count:           275,000 counts
                 Â·gc.time:            99039,000 ms


# Run progress: 26,67% complete, ETA 01:57:01
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,021 ops/s
# Warmup Iteration   2: 0,019 ops/s
# Warmup Iteration   3: 0,017 ops/s
# Warmup Iteration   4: 0,019 ops/s
# Warmup Iteration   5: 0,020 ops/s
Iteration   1: 0,019 ops/s
                 Â·gc.alloc.rate:      74,094 MB/sec
                 Â·gc.alloc.rate.norm: 4144687176,000 B/op
                 Â·gc.count:           283,000 counts
                 Â·gc.time:            105579,000 ms

Iteration   2: 0,019 ops/s
                 Â·gc.alloc.rate:      75,184 MB/sec
                 Â·gc.alloc.rate.norm: 4144687176,000 B/op
                 Â·gc.count:           282,000 counts
                 Â·gc.time:            104399,000 ms

Iteration   3: 0,017 ops/s
                 Â·gc.alloc.rate:      67,618 MB/sec
                 Â·gc.alloc.rate.norm: 4144687176,000 B/op
                 Â·gc.count:           307,000 counts
                 Â·gc.time:            115758,000 ms

Iteration   4: 0,017 ops/s
                 Â·gc.alloc.rate:      68,908 MB/sec
                 Â·gc.alloc.rate.norm: 4144687176,000 B/op
                 Â·gc.count:           300,000 counts
                 Â·gc.time:            113475,000 ms

Iteration   5: 0,021 ops/s
                 Â·gc.alloc.rate:      84,514 MB/sec
                 Â·gc.alloc.rate.norm: 4144687176,000 B/op
                 Â·gc.count:           251,000 counts
                 Â·gc.time:            92455,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc":
  0,017 Â±(99.9%) 0,003 ops/s [Average]
  (min, avg, max) = (0,007, 0,017, 0,021), stdev = 0,004
  CI (99.9%): [0,014, 0,020] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.alloc.rate":
  68,647 Â±(99.9%) 11,623 MB/sec [Average]
  (min, avg, max) = (28,375, 68,647, 84,514), stdev = 15,516
  CI (99.9%): [57,025, 80,270] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm":
  4144687179,840 Â±(99.9%) 7,950 B/op [Average]
  (min, avg, max) = (4144687176,000, 4144687179,840, 4144687208,000), stdev = 10,613
  CI (99.9%): [4144687171,890, 4144687187,790] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.count":
  7118,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (237,000, 284,720, 321,000), stdev = 18,618
  CI (99.9%): [7118,000, 7118,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.time":
  3108420,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (92455,000, 124336,800, 277407,000), stdev = 48528,615
  CI (99.9%): [3108420,000, 3108420,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseShenandoahGC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc
# Parameters: (percentageOfRetainedHeap = P_25)

# Run progress: 33,33% complete, ETA 01:42:51
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,018 ops/s
# Warmup Iteration   2: 0,019 ops/s
# Warmup Iteration   3: 0,018 ops/s
# Warmup Iteration   4: 0,020 ops/s
# Warmup Iteration   5: 0,018 ops/s
Iteration   1: 0,018 ops/s
                 Â·gc.alloc.rate:      52,269 MB/sec
                 Â·gc.alloc.rate.norm: 3108515496,000 B/op
                 Â·gc.count:           301,000 counts
                 Â·gc.time:            110654,000 ms

Iteration   2: 0,019 ops/s
                 Â·gc.alloc.rate:      55,882 MB/sec
                 Â·gc.alloc.rate.norm: 3108515496,000 B/op
                 Â·gc.count:           273,000 counts
                 Â·gc.time:            104877,000 ms

Iteration   3: 0,018 ops/s
                 Â·gc.alloc.rate:      52,601 MB/sec
                 Â·gc.alloc.rate.norm: 3108515528,000 B/op
                 Â·gc.count:           297,000 counts
                 Â·gc.time:            110524,000 ms

Iteration   4: 0,019 ops/s
                 Â·gc.alloc.rate:      56,825 MB/sec
                 Â·gc.alloc.rate.norm: 3108515496,000 B/op
                 Â·gc.count:           270,000 counts
                 Â·gc.time:            102804,000 ms

Iteration   5: 0,020 ops/s
                 Â·gc.alloc.rate:      60,681 MB/sec
                 Â·gc.alloc.rate.norm: 3108515496,000 B/op
                 Â·gc.count:           251,000 counts
                 Â·gc.time:            96380,000 ms


# Run progress: 40,00% complete, ETA 01:30:37
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,020 ops/s
# Warmup Iteration   2: 0,019 ops/s
# Warmup Iteration   3: 0,020 ops/s
# Warmup Iteration   4: 0,017 ops/s
# Warmup Iteration   5: 0,018 ops/s
Iteration   1: 0,020 ops/s
                 Â·gc.alloc.rate:      59,484 MB/sec
                 Â·gc.alloc.rate.norm: 3108515496,000 B/op
                 Â·gc.count:           259,000 counts
                 Â·gc.time:            97799,000 ms

Iteration   2: 0,020 ops/s
                 Â·gc.alloc.rate:      57,987 MB/sec
                 Â·gc.alloc.rate.norm: 3108515496,000 B/op
                 Â·gc.count:           266,000 counts
                 Â·gc.time:            100755,000 ms

Iteration   3: 0,021 ops/s
                 Â·gc.alloc.rate:      62,576 MB/sec
                 Â·gc.alloc.rate.norm: 3108515528,000 B/op
                 Â·gc.count:           251,000 counts
                 Â·gc.time:            92847,000 ms

Iteration   4: 0,018 ops/s
                 Â·gc.alloc.rate:      53,264 MB/sec
                 Â·gc.alloc.rate.norm: 3108515496,000 B/op
                 Â·gc.count:           293,000 counts
                 Â·gc.time:            108993,000 ms

Iteration   5: 0,020 ops/s
                 Â·gc.alloc.rate:      59,574 MB/sec
                 Â·gc.alloc.rate.norm: 3108515496,000 B/op
                 Â·gc.count:           261,000 counts
                 Â·gc.time:            98441,000 ms


# Run progress: 46,67% complete, ETA 01:19:06
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,020 ops/s
# Warmup Iteration   2: 0,021 ops/s
# Warmup Iteration   3: 0,020 ops/s
# Warmup Iteration   4: 0,018 ops/s
# Warmup Iteration   5: 0,017 ops/s
Iteration   1: 0,018 ops/s
                 Â·gc.alloc.rate:      53,724 MB/sec
                 Â·gc.alloc.rate.norm: 3108515496,000 B/op
                 Â·gc.count:           281,000 counts
                 Â·gc.time:            109167,000 ms

Iteration   2: 0,019 ops/s
                 Â·gc.alloc.rate:      55,364 MB/sec
                 Â·gc.alloc.rate.norm: 3108515496,000 B/op
                 Â·gc.count:           276,000 counts
                 Â·gc.time:            105543,000 ms

Iteration   3: 0,021 ops/s
                 Â·gc.alloc.rate:      62,637 MB/sec
                 Â·gc.alloc.rate.norm: 3108515496,000 B/op
                 Â·gc.count:           246,000 counts
                 Â·gc.time:            93015,000 ms

Iteration   4: 0,019 ops/s
                 Â·gc.alloc.rate:      54,925 MB/sec
                 Â·gc.alloc.rate.norm: 3108515496,000 B/op
                 Â·gc.count:           281,000 counts
                 Â·gc.time:            105729,000 ms

Iteration   5: 0,019 ops/s
                 Â·gc.alloc.rate:      55,260 MB/sec
                 Â·gc.alloc.rate.norm: 3108515496,000 B/op
                 Â·gc.count:           279,000 counts
                 Â·gc.time:            105360,000 ms


# Run progress: 53,33% complete, ETA 01:08:17
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,018 ops/s
# Warmup Iteration   2: 0,019 ops/s
# Warmup Iteration   3: 0,018 ops/s
# Warmup Iteration   4: 0,018 ops/s
# Warmup Iteration   5: 0,018 ops/s
Iteration   1: 0,018 ops/s
                 Â·gc.alloc.rate:      52,274 MB/sec
                 Â·gc.alloc.rate.norm: 3108515496,000 B/op
                 Â·gc.count:           296,000 counts
                 Â·gc.time:            111038,000 ms

Iteration   2: 0,019 ops/s
                 Â·gc.alloc.rate:      57,233 MB/sec
                 Â·gc.alloc.rate.norm: 3108515496,000 B/op
                 Â·gc.count:           270,000 counts
                 Â·gc.time:            101846,000 ms

Iteration   3: 0,019 ops/s
                 Â·gc.alloc.rate:      56,949 MB/sec
                 Â·gc.alloc.rate.norm: 3108515496,000 B/op
                 Â·gc.count:           269,000 counts
                 Â·gc.time:            102167,000 ms

Iteration   4: 0,019 ops/s
                 Â·gc.alloc.rate:      54,888 MB/sec
                 Â·gc.alloc.rate.norm: 3108515496,000 B/op
                 Â·gc.count:           283,000 counts
                 Â·gc.time:            105697,000 ms

Iteration   5: 0,017 ops/s
                 Â·gc.alloc.rate:      50,243 MB/sec
                 Â·gc.alloc.rate.norm: 3108515496,000 B/op
                 Â·gc.count:           308,000 counts
                 Â·gc.time:            115584,000 ms


# Run progress: 60,00% complete, ETA 00:58:10
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,019 ops/s
# Warmup Iteration   2: 0,021 ops/s
# Warmup Iteration   3: 0,019 ops/s
# Warmup Iteration   4: 0,021 ops/s
# Warmup Iteration   5: 0,021 ops/s
Iteration   1: 0,017 ops/s
                 Â·gc.alloc.rate:      50,970 MB/sec
                 Â·gc.alloc.rate.norm: 3108515496,000 B/op
                 Â·gc.count:           299,000 counts
                 Â·gc.time:            114336,000 ms

Iteration   2: 0,019 ops/s
                 Â·gc.alloc.rate:      57,291 MB/sec
                 Â·gc.alloc.rate.norm: 3108515496,000 B/op
                 Â·gc.count:           270,000 counts
                 Â·gc.time:            101972,000 ms

Iteration   3: 0,019 ops/s
                 Â·gc.alloc.rate:      54,858 MB/sec
                 Â·gc.alloc.rate.norm: 3108515496,000 B/op
                 Â·gc.count:           283,000 counts
                 Â·gc.time:            106106,000 ms

Iteration   4: 0,018 ops/s
                 Â·gc.alloc.rate:      53,177 MB/sec
                 Â·gc.alloc.rate.norm: 3108515496,000 B/op
                 Â·gc.count:           293,000 counts
                 Â·gc.time:            109786,000 ms

Iteration   5: 0,019 ops/s
                 Â·gc.alloc.rate:      55,769 MB/sec
                 Â·gc.alloc.rate.norm: 3108515496,000 B/op
                 Â·gc.count:           271,000 counts
                 Â·gc.time:            104935,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc":
  0,019 Â±(99.9%) 0,001 ops/s [Average]
  (min, avg, max) = (0,017, 0,019, 0,021), stdev = 0,001
  CI (99.9%): [0,018, 0,020] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.alloc.rate":
  55,868 Â±(99.9%) 2,492 MB/sec [Average]
  (min, avg, max) = (50,243, 55,868, 62,637), stdev = 3,326
  CI (99.9%): [53,377, 58,360] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm":
  3108515498,560 Â±(99.9%) 6,637 B/op [Average]
  (min, avg, max) = (3108515496,000, 3108515498,560, 3108515528,000), stdev = 8,860
  CI (99.9%): [3108515491,923, 3108515505,197] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.count":
  6927,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (246,000, 277,080, 308,000), stdev = 16,683
  CI (99.9%): [6927,000, 6927,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.time":
  2616355,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (92847,000, 104654,200, 115584,000), stdev = 6001,840
  CI (99.9%): [2616355,000, 2616355,000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseShenandoahGC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc
# Parameters: (percentageOfRetainedHeap = P_50)

# Run progress: 66,67% complete, ETA 00:48:01
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,018 ops/s
# Warmup Iteration   2: 0,020 ops/s
# Warmup Iteration   3: 0,018 ops/s
# Warmup Iteration   4: 0,017 ops/s
# Warmup Iteration   5: 0,017 ops/s
Iteration   1: 0,020 ops/s
                 Â·gc.alloc.rate:      40,158 MB/sec
                 Â·gc.alloc.rate.norm: 2072343816,000 B/op
                 Â·gc.count:           260,000 counts
                 Â·gc.time:            96636,000 ms

Iteration   2: 0,020 ops/s
                 Â·gc.alloc.rate:      40,503 MB/sec
                 Â·gc.alloc.rate.norm: 2072343816,000 B/op
                 Â·gc.count:           260,000 counts
                 Â·gc.time:            95442,000 ms

Iteration   3: 0,022 ops/s
                 Â·gc.alloc.rate:      42,857 MB/sec
                 Â·gc.alloc.rate.norm: 2072343848,000 B/op
                 Â·gc.count:           238,000 counts
                 Â·gc.time:            91027,000 ms

Iteration   4: 0,021 ops/s
                 Â·gc.alloc.rate:      41,295 MB/sec
                 Â·gc.alloc.rate.norm: 2072343816,000 B/op
                 Â·gc.count:           251,000 counts
                 Â·gc.time:            94331,000 ms

Iteration   5: 0,023 ops/s
                 Â·gc.alloc.rate:      44,475 MB/sec
                 Â·gc.alloc.rate.norm: 2072343816,000 B/op
                 Â·gc.count:           233,000 counts
                 Â·gc.time:            87518,000 ms


# Run progress: 73,33% complete, ETA 00:38:05
# Fork: 2 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,017 ops/s
# Warmup Iteration   2: 0,020 ops/s
# Warmup Iteration   3: 0,019 ops/s
# Warmup Iteration   4: 0,017 ops/s
# Warmup Iteration   5: 0,019 ops/s
Iteration   1: 0,018 ops/s
                 Â·gc.alloc.rate:      35,713 MB/sec
                 Â·gc.alloc.rate.norm: 2072343848,000 B/op
                 Â·gc.count:           293,000 counts
                 Â·gc.time:            108133,000 ms

Iteration   2: 0,017 ops/s
                 Â·gc.alloc.rate:      33,708 MB/sec
                 Â·gc.alloc.rate.norm: 2072343816,000 B/op
                 Â·gc.count:           302,000 counts
                 Â·gc.time:            115837,000 ms

Iteration   3: 0,018 ops/s
                 Â·gc.alloc.rate:      36,068 MB/sec
                 Â·gc.alloc.rate.norm: 2072343848,000 B/op
                 Â·gc.count:           286,000 counts
                 Â·gc.time:            107834,000 ms

Iteration   4: 0,020 ops/s
                 Â·gc.alloc.rate:      40,421 MB/sec
                 Â·gc.alloc.rate.norm: 2072343816,000 B/op
                 Â·gc.count:           258,000 counts
                 Â·gc.time:            95797,000 ms

Iteration   5: 0,020 ops/s
                 Â·gc.alloc.rate:      38,882 MB/sec
                 Â·gc.alloc.rate.norm: 2072343816,000 B/op
                 Â·gc.count:           264,000 counts
                 Â·gc.time:            99919,000 ms


# Run progress: 80,00% complete, ETA 00:28:27
# Fork: 3 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,018 ops/s
# Warmup Iteration   2: 0,018 ops/s
# Warmup Iteration   3: 0,017 ops/s
# Warmup Iteration   4: 0,018 ops/s
# Warmup Iteration   5: 0,019 ops/s
Iteration   1: 0,021 ops/s
                 Â·gc.alloc.rate:      41,450 MB/sec
                 Â·gc.alloc.rate.norm: 2072343816,000 B/op
                 Â·gc.count:           244,000 counts
                 Â·gc.time:            93561,000 ms

Iteration   2: 0,020 ops/s
                 Â·gc.alloc.rate:      38,967 MB/sec
                 Â·gc.alloc.rate.norm: 2072343816,000 B/op
                 Â·gc.count:           258,000 counts
                 Â·gc.time:            100308,000 ms

Iteration   3: 0,017 ops/s
                 Â·gc.alloc.rate:      33,124 MB/sec
                 Â·gc.alloc.rate.norm: 2072343848,000 B/op
                 Â·gc.count:           301,000 counts
                 Â·gc.time:            117807,000 ms

Iteration   4: 0,017 ops/s
                 Â·gc.alloc.rate:      33,842 MB/sec
                 Â·gc.alloc.rate.norm: 2072343816,000 B/op
                 Â·gc.count:           301,000 counts
                 Â·gc.time:            114266,000 ms

Iteration   5: 0,017 ops/s
                 Â·gc.alloc.rate:      32,672 MB/sec
                 Â·gc.alloc.rate.norm: 2072343816,000 B/op
                 Â·gc.count:           309,000 counts
                 Â·gc.time:            118670,000 ms


# Run progress: 86,67% complete, ETA 00:18:57
# Fork: 4 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,017 ops/s
# Warmup Iteration   2: 0,018 ops/s
# Warmup Iteration   3: 0,018 ops/s
# Warmup Iteration   4: 0,020 ops/s
# Warmup Iteration   5: 0,019 ops/s
Iteration   1: 0,019 ops/s
                 Â·gc.alloc.rate:      37,824 MB/sec
                 Â·gc.alloc.rate.norm: 2072343848,000 B/op
                 Â·gc.count:           268,000 counts
                 Â·gc.time:            103386,000 ms

Iteration   2: 0,022 ops/s
                 Â·gc.alloc.rate:      43,428 MB/sec
                 Â·gc.alloc.rate.norm: 2072343848,000 B/op
                 Â·gc.count:           238,000 counts
                 Â·gc.time:            88971,000 ms

Iteration   3: 0,019 ops/s
                 Â·gc.alloc.rate:      36,610 MB/sec
                 Â·gc.alloc.rate.norm: 2072343848,000 B/op
                 Â·gc.count:           277,000 counts
                 Â·gc.time:            105833,000 ms

Iteration   4: 0,018 ops/s
                 Â·gc.alloc.rate:      35,275 MB/sec
                 Â·gc.alloc.rate.norm: 2072343816,000 B/op
                 Â·gc.count:           294,000 counts
                 Â·gc.time:            109626,000 ms

Iteration   5: 0,018 ops/s
                 Â·gc.alloc.rate:      34,999 MB/sec
                 Â·gc.alloc.rate.norm: 2072343816,000 B/op
                 Â·gc.count:           291,000 counts
                 Â·gc.time:            110669,000 ms


# Run progress: 93,33% complete, ETA 00:09:26
# Fork: 5 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,018 ops/s
# Warmup Iteration   2: 0,019 ops/s
# Warmup Iteration   3: 0,020 ops/s
# Warmup Iteration   4: 0,019 ops/s
# Warmup Iteration   5: 0,018 ops/s
Iteration   1: 0,017 ops/s
                 Â·gc.alloc.rate:      32,748 MB/sec
                 Â·gc.alloc.rate.norm: 2072343816,000 B/op
                 Â·gc.count:           322,000 counts
                 Â·gc.time:            118136,000 ms

Iteration   2: 0,019 ops/s
                 Â·gc.alloc.rate:      36,583 MB/sec
                 Â·gc.alloc.rate.norm: 2072343816,000 B/op
                 Â·gc.count:           281,000 counts
                 Â·gc.time:            106727,000 ms

Iteration   3: 0,018 ops/s
                 Â·gc.alloc.rate:      34,593 MB/sec
                 Â·gc.alloc.rate.norm: 2072343816,000 B/op
                 Â·gc.count:           289,000 counts
                 Â·gc.time:            112840,000 ms

Iteration   4: 0,018 ops/s
                 Â·gc.alloc.rate:      35,801 MB/sec
                 Â·gc.alloc.rate.norm: 2072343816,000 B/op
                 Â·gc.count:           294,000 counts
                 Â·gc.time:            108182,000 ms

Iteration   5: 0,017 ops/s
                 Â·gc.alloc.rate:      33,295 MB/sec
                 Â·gc.alloc.rate.norm: 2072343816,000 B/op
                 Â·gc.count:           308,000 counts
                 Â·gc.time:            116892,000 ms



Result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc":
  0,019 Â±(99.9%) 0,001 ops/s [Average]
  (min, avg, max) = (0,017, 0,019, 0,023), stdev = 0,002
  CI (99.9%): [0,018, 0,020] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.alloc.rate":
  37,412 Â±(99.9%) 2,696 MB/sec [Average]
  (min, avg, max) = (32,672, 37,412, 44,475), stdev = 3,600
  CI (99.9%): [34,715, 40,108] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm":
  2072343824,960 Â±(99.9%) 10,985 B/op [Average]
  (min, avg, max) = (2072343816,000, 2072343824,960, 2072343848,000), stdev = 14,664
  CI (99.9%): [2072343813,975, 2072343835,945] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.count":
  6920,000 Â±(99.9%) 0,001 counts [Sum]
  (min, avg, max) = (233,000, 276,800, 322,000), stdev = 25,290
  CI (99.9%): [6920,000, 6920,000] (assumes normal distribution)

Secondary result "com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.time":
  2618348,000 Â±(99.9%) 0,001 ms [Sum]
  (min, avg, max) = (87518,000, 104733,920, 118670,000), stdev = 9814,868
  CI (99.9%): [2618348,000, 2618348,000] (assumes normal distribution)


# Run complete. Total time: 02:21:27

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                                  (percentageOfRetainedHeap)   Mode  Cnt           Score    Error   Units
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc                                             P_0  thrpt   25           0,017 Â±  0,003   ops/s
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.alloc.rate                              P_0  thrpt   25          68,647 Â± 11,623  MB/sec
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm                         P_0  thrpt   25  4144687179,840 Â±  7,950    B/op
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.count                                   P_0  thrpt   25        7118,000           counts
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.time                                    P_0  thrpt   25     3108420,000               ms
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc                                            P_25  thrpt   25           0,019 Â±  0,001   ops/s
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.alloc.rate                             P_25  thrpt   25          55,868 Â±  2,492  MB/sec
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm                        P_25  thrpt   25  3108515498,560 Â±  6,637    B/op
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.count                                  P_25  thrpt   25        6927,000           counts
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.time                                   P_25  thrpt   25     2616355,000               ms
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc                                            P_50  thrpt   25           0,019 Â±  0,001   ops/s
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.alloc.rate                             P_50  thrpt   25          37,412 Â±  2,696  MB/sec
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.alloc.rate.norm                        P_50  thrpt   25  2072343824,960 Â± 10,985    B/op
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.count                                  P_50  thrpt   25        6920,000           counts
HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc:Â·gc.time                                   P_50  thrpt   25     2618348,000               ms

Benchmark result is saved to results/jdk-17/arm64/openjdk-hotspot-vm/HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark_shenandoahGC_1thread.csv

Running HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark benchmark ...
java  -jar benchmarks/target/benchmarks.jar .*HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.* -foe true -wi 5 -w 10 -i 5 -r 10 -f 5 -rf csv -rff results/jdk-17/arm64/openjdk-hotspot-vm/HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark_shenandoahGC_2threads.csv -t 2 -prof gc -jvmArgsAppend "-Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseShenandoahGC"

# JMH version: 1.36
# VM version: JDK 17.0.5, OpenJDK 64-Bit Server VM, 17.0.5+8
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -Xms4g -Xmx4g -XX:+AlwaysPreTouch -XX:+UseShenandoahGC
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.ionutbalosin.jvm.performance.benchmarks.micro.gc.HeapMemoryAllocatorWithFixedRetrainedHeapBenchmark.gc
# Parameters: (percentageOfRetainedHeap = P_0)

# Run progress: 0,00% complete, ETA 00:25:00
# Fork: 1 of 5
# Warmup Iteration   1: # WARNING: Unable to get Instrumentation. Dynamic Attach failed. You may add this JAR as -javaagent manually, or supply -Djdk.attach.allowAttachSelf
# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
0,036 ops/s
# Warmup Iteration   2: 0,041 ops/s
# Warmup Iteration   3: 1,145 ops/s
# Warmup Iteration   4: 0,035 ops/s
# Warmup Iteration   5: 0,323 ops/s
Iteration   1: 0,055 ops/s
                 Â·gc.alloc.rate:      104,986 MB/sec
                 Â·gc.alloc.rate.norm: 2072343620,000 B/op
                 Â·gc.count:           403,000 counts
                 Â·gc.time:            147071,000 ms

Iteration   2: